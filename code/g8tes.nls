;----------------------------------------------------------------------------------------------
;
;           .d888b.   dP                     
;           Y8' `8P   88                     
;  .d8888b. d8bad8b d8888P .d8888b. .d8888b. 
;  88'  `88 88` `88   88   88ooood8 Y8ooooo. 
;  88.  .88 8b. .88   88   88.  ...       88 
;  `8888P88 Y88888P   dP   `88888P' `88888P' 
;       .88                                  
;   d8888P                                               
; 
; Â© 2019 K N Crouse
;----------------------------------------------------------------------------------------------
; 
; This extension contains all functions that allow anima1s to make decisions from their 
; genotypes.
;
; List of all genotype cod0ns:
; 
; CODE  MAINTENANCE  DESCRIPTION                
;
; TRU   2019-09-XX   true
; FAL   2019-09-XX   false 
; XXX   2019-09-XX   ""
; AXX   2019-09-XX   "a" 
; ABX   2019-09-XX   "ab" 
; ABC   2019-09-XX   "acb" 
; XBX   2019-09-XX   "b" 
; XBC   2019-09-XX   "bc" 
; XXC   2019-09-XX   "c" 
; AXC   2019-09-XX   "ac" 
; FEM   2019-09-XX   female 
; MAL   2019-09-XX   male 
; GES   2019-09-XX   "gestatee" 
; INF   2019-09-XX   "infant" 
; JUV   2019-09-XX   "juvenile" 
; ADT   2019-09-XX   "adult" 
; SEN   2019-09-XX   "senescent"
; OVU   not done     "ovulating"
; CYC   2019-09-XX   "cycling"
; PRG   2019-09-XX   "pregnant" 
; LAC   2019-09-XX   "lactating" 
; RNM   2019-09-XX   random floating number from 0 to 1
; RNB   2019-09-XX   random boolean (true or false)
; DAY   not done     is day?
; NGT   not done     is night?
;
; NOT   not done     logical NOT ___
; AND   not done     ___ logical AND ___
; ORR   not done     ___ logical OR ___
; EQL   2019-09-XX   ___ is equal to ___
; NQL   2019-09-XX   ___ is not equal to ___
; GRT   2019-09-XX   ___ is greater than ___
; LST   2019-09-XX   ___ is less than ___
; SDO   2019-09-XX   ___ is same color shade as ___
; UUU   2019-09-XX   ___ set union ___
; NNN   2019-09-XX   ___ set intersection ___
; ANY   2019-09-XX   any targets with ___
; ONE   2019-09-XX   one-of targets with ___
; MEE   2019-09-XX   I am one of targets with ___
; ALL   2019-09-XX   all targets
;
; MID   2019-09-XX   target's meta-id   
; SIZ   2019-09-XX   target's size
; COL   2019-09-XX   target's color
; SEX   2019-09-XX   target's sex
; SHD   2019-09-XX   target's body.shade
; LFH   2019-09-XX   target's life.history
; FER   2019-09-XX   target's fertility
; GRP   2019-09-XX   target's group.identity
; AON   2019-09-XX   target's signal alpha is on?
; BON   2019-09-XX   target's signal beta is on?
; CON   2019-09-XX   target's signal gamma is on?
; SIG   2019-09-XX   target's current signal state ( i.e. "abc" or "a" or "bc" )
; EGO   2019-09-XX   target is ego?
; DSE   2019-09-XX   target's distance to myself
; ISA   2019-09-XX   target is an anima1?
; ISP   2019-09-XX   target is a plant?
; DED   2019-09-XX   target is dead?
; CRD   2019-09-XX   target is carried by me?
; CRG   2019-09-XX   target is carrying me?
; MYO   2019-09-XX   target is one of my-offspring? (female only)
; MOM   2019-09-XX   target is my mother? 
;
; EMI   2019-09-XX   ego's meta-id
; EAG   not done     ego's age
; ESZ   2019-09-XX   ego's size
; ECL   2019-09-XX   ego's color
; ESX   2019-09-XX   ego's biological.sex
; ESD   2019-09-XX   ego's body.shade
; ELH   2019-09-XX   ego's life.history
; EFR   2019-09-XX   ego's female.fertility
; EGP   2019-09-XX   ego's group.identity
; EXM   2019-09-XX   ego's x.magnitude
; EYM   2019-09-XX   ego's y.magnitude
; ENG   2019-09-XX   ego's energy.supply
; EBS   2019-09-XX   ego's body.size
; ESR   2019-09-XX   ego's sex.ratio
; ELS   2019-09-XX   ego's litter.size
; ECC   2019-09-XX   ego's conception.chance
; EST   2019-09-XX   ego's stomach.size
; EMC   2019-09-XX   ego's mutation.chance
; EPC   2019-09-XX   ego's day.perception.range
; ENP   2019-09-XX   ego's night.perception.range
; EAP   2019-09-XX   ego's audio.perception.range
; EDA   2019-09-XX   ego's day.perception.angle
; ENA   2019-09-XX   ego's night.perception.angle
; EAA   2019-09-XX   ego's audio.perception.angle
; EVR   2019-09-XX   ego's vocal.range
; EBC   2019-09-XX   ego's birthing.chance
; EWC   2019-09-XX   ego's weaning.chance
; EIC   2019-09-XX   ego's infancy.chance
; EJC   2019-09-XX   ego's juvenility.chance
; EAC   2019-09-XX   ego's adulthood.chance
; ESC   2019-09-XX   ego's senescency.chance
; ELC   2019-09-XX   ego's living.chance
; ASC   2019-09-XX   ego's alpha.chance
; BSC   2019-09-XX   ego's beta.chance
; CSC   2019-09-XX   ego's gamma.chance
;
; THN   2019-09-XX   if [TRUE] --> 
; TNT   2019-09-XX   if [FALSE] -->
;        
; MNT   2019-08-26   --> maintain-body
; GRW   2019-08-26   --> body-size                 
; BSD   2019-08-26   --> body-shade              
; DPR   2019-08-26   --> day-perception-range            
; NPR   2019-08-26   --> night-perception-range          
; APR   2019-08-26   --> audio-perception-range          
; DPA   2019-08-26   --> day-perception-angle
; NPA   2019-08-26   --> night-perception-angle
; APA   2019-08-26   --> audio-perception-angle 
; VCR   2019-08-26   --> vocal-range
; ICC   2019-08-26   --> conception-chance
; STM   2020-04-XX   --> stomach-size
; MTC   2019-08-26   --> mutation-chance            
; SXR   2019-08-26   --> sex-ratio               
; LTS   2019-08-26   --> litter-size               
; TRT   2019-08-26   --> turn-right               
; TLF   2019-08-26   --> turn-left                 
; GFD   2019-08-26   --> go-forward      
; HED   2020-XX-XX   --> get-heading 
; HID   2020-XX-XX   --> hide  
; SAC   2019-08-26   --> signal-alpha-on               
; SBC   2019-08-26   --> signal-beta-on               
; SCC   2019-08-26   --> signal-gamma-on               
; CKI   2019-08-26   --> check-infancy             
; CKB   2019-08-26   --> check-birth               
; CKJ   2019-08-26   --> check-juvenility         
; CKW   2019-08-26   --> check-weaning              
; CKA   2019-08-26   --> check-adulthood           
; CKS   2019-08-26   --> check-senescence         
;
; MOV   2020-04-01   --> move-toward
; MAF   2020-04-01   --> move-away-from
; SPL   2019-10-16   --> supply-to 
; DMF   2019-10-16   --> demand-from
; EAT   2019-10-16   --> eat
; JNG   2019-09-XX   --> join
; LEV   2019-08-26   --> leave
; RCT   2019-09-XX   --> recruit
; KCK   2019-08-26   --> kick-out
; PKU   2019-09-XX   --> pick-up
; PDN   2019-10-16   --> put-down
; CLG   2020-04-XX   --> cling-to
; SQM   2020-04-XX   --> squirm-from
; HLP   2019-09-XX   --> help
; ATK   2019-09-XX   --> attack 
; MAT   2019-10-16   --> mate-with
; 
;----------------------------------------------------------------------------------------------


;----------------------------------------------------------------------------------------------
; GET-DECISIONS
;
; Reporter that returns a list of decision vectors generated from genotype.
;
; Caller: anima1
; ENVIRONMENT: list of turtles (both plants and anima1s) observed by the caller.
;----------------------------------------------------------------------------------------------

to-report g8tes-get-decisions [ environment ]
  report get-iterative-decisions self environment [] true ( sentence chromosome.I chromosome.II ) no-turtles []
end

;---------------------------------------------------------------------------------------------- 
; INTERATIVE 'HELPER' FUNCTION
;----------------------------------------------------------------------------------------------
 
to-report get-iterative-decisions [ me old-environment old-gates old-boolean old-feed old-targets old-vectors ]
  
  let meself self
  let decision-vectors []
  if ( self = subject ) [ print (word "GID: environment - " old-environment "  gates - " old-gates "  boolean - " old-boolean "  feed - "  length old-feed "  targets - " old-targets " vectors - " old-vectors )]
  
  if ( length old-feed > 0 ) [
    
    let allele first old-feed
    
    if ( length allele > 0 and is-boolean? first allele ) [ set allele but-first allele ]
    
    if ( self = subject ) [ print old-feed ]
    if ( self = subject ) [ print allele ]
    
    ;---------------------------------------------------------------------------------------------- 
    ; ALLELE CODE IS EMPTY ---> CREATE DECISION VECTORS 
    ;----------------------------------------------------------------------------------------------
    
    ifelse ( length allele = 0 ) [

      ask old-targets [ ; passed through new call to iterative function
        let new-target self
        
        foreach old-vectors [ v ->
          let new-action g8tes-get-action item 0 v
          let new-weight item 1 v

          let distance-to-target ifelse-value ( distance new-target > 1 ) [ distance new-target ] [ 1 ]
          let vector-doesnt-exist true
          foreach decision-vectors [ d ->
            let decision-target item 1 d
            let decision-action item 2 d
            
            if ( decision-target = new-target ) and ( decision-action = new-action ) [
              set vector-doesnt-exist false
              set decision-vectors remove-item position v decision-vectors decision-vectors
              let new-vector replace-item 3 d ( item 3 d + precision ( new-weight / ( distance-to-target ^ 2 )) 5 )
              set decision-vectors lput new-vector decision-vectors ]]
          
          if vector-doesnt-exist [
            set decision-vectors lput (list meself new-target new-action precision ( new-weight / ( distance-to-target ^ 2 )) 5 ) decision-vectors ]
          
    ]]]
    
    ;---------------------------------------------------------------------------------------------- 
    ; ALLELE CODE IS NOT EMPTY ---> (READ CODE)
    ;----------------------------------------------------------------------------------------------
    
    [ ; READ THE NEXT CHUNK OF CODE of AN ALLELE
      
      ; get new chunk:
      let remaining-allele []
      let section-of-code []
      let part-of-chunk true
      
      ; separate allele into next chunk and remaining allele
      foreach allele [ c ->
        ifelse ( not part-of-chunk ) [
          set remaining-allele lput c remaining-allele
        ][
          ifelse ( member? c gate-codons ) [
            
            ifelse ( length section-of-code > 0 ) [
              set remaining-allele lput c []
            ][
              set section-of-code lput c []
            ]
            set part-of-chunk false 
          ][
            set section-of-code lput c section-of-code  
      ]]]
      
      ; settings for continuing iteration 
      let new-feed replace-item 0 old-feed remaining-allele
      let new-gates []
      let new-boolean old-boolean
      let new-targets old-targets
      let new-vectors old-vectors
      
      ;---------------------------------------------------------------------------------------------- 
      ; (READ CODE) ---> CODE is a "LOGIC GATE" ---> SAVE LOGIC GATE and MOVE ON
      ;----------------------------------------------------------------------------------------------
      
      ifelse ( member? first section-of-code gate-codons ) [
        
        let gate first section-of-code
        
        (ifelse 
          
          ( gate = "THN" ) [
            set new-boolean old-boolean ]
          
          ( gate = "TNT" ) [
            set new-boolean not old-boolean ]
          
          [ set new-gates (lput first section-of-code old-gates) ])
        
      ][
        
        ;---------------------------------------------------------------------------------------------- 
        ; (READ CODE) ---> CODE is a "DECISION" ---> SAVE DECISION and MOVE ON
        ;----------------------------------------------------------------------------------------------
        
        ifelse ( member? first section-of-code action-codons ) [ ; this halts if code that is action is not in action-codons
          
          if ( old-boolean ) [
            
            let new-action item 0 section-of-code
            let new-weight item 1 section-of-code
            set new-targets old-targets

            ask old-targets [
              
              set decision-vectors ( sentence decision-vectors ( get-iterative-decisions me old-environment [] new-boolean (list first new-feed ) new-targets (lput (list new-action new-weight ) old-vectors)))
          ]]
          
          ; settings for continuing iteration 
          set new-boolean true ; really?
          set new-feed ( but-first new-feed )
          set new-targets no-turtles
          set new-vectors []
        ]
        
        ;---------------------------------------------------------------------------------------------- 
        ;  (READ CODE) ---> CODE is an "ENVIRONMENT FILTER" ---> FILTER AGENTS and MOVE ON
        ;----------------------------------------------------------------------------------------------
        
        [
          
          set new-targets old-environment with [ read-section section-of-code ]
          
          foreach old-gates [ gate ->
            
            if ( gate = "ANY" ) [ set new-targets new-targets ]
            
            if ( gate = "NNN" ) [ set new-targets new-targets with [ member? self old-targets ] ]
            
            if ( gate = "UUU" ) [ set new-targets old-environment with [ member? self new-targets and member? self old-targets ] ]
            
            if ( gate = "ONE" ) [ set new-targets n-of 1 new-targets ]
            
            if ( gate = "MEE" ) [ set new-targets n-of 1 new-targets with [ self = myself ] ]
            
            if ( gate = "ALL" ) [ set new-targets old-environment ]
            
            set new-boolean any? new-targets ]
          
      ]]
      
      set decision-vectors ( sentence decision-vectors ( get-iterative-decisions me old-environment new-gates new-boolean new-feed new-targets new-vectors ) )
      
  ]]
  
  report decision-vectors
  
end

to-report g8tes-get-action [ action-code ]
              
  report
  (ifelse-value
    ( action-code = "MNT" ) [ "maintain-body" ]
    ( action-code = "GRW" ) [ "body-size" ]
    ( action-code = "BSD" ) [ "body-shade" ]
    ( action-code = "DPR" ) [ "day-perception-range" ]
    ( action-code = "NPR" ) [ "night-perception-range" ]
    ( action-code = "APR" ) [ "audio-perception-range" ]
    ( action-code = "DPA" ) [ "day-perception-angle" ]
    ( action-code = "NPA" ) [ "night-perception-angle" ]
    ( action-code = "APA" ) [ "audio-perception-angle" ]
    ( action-code = "VCR" ) [ "vocal-range" ]
    ( action-code = "ICC" ) [ "conception-chance" ]
    ( action-code = "STM" ) [ "stomach-size" ]   
    ( action-code = "MTC" ) [ "mutation-chance" ]
    ( action-code = "SXR" ) [ "sex-ratio" ]
    ( action-code = "LTS" ) [ "litter-size" ]
    ( action-code = "TRT" ) [ "turn-right" ]
    ( action-code = "TLF" ) [ "turn-left" ]
    ( action-code = "GFD" ) [ "go-forward" ]
    ( action-code = "MOV" ) [ "move-toward" ]
    ( action-code = "MAF" ) [ "move-away-from" ]
    ( action-code = "HED" ) [ "set-heading" ]
    ( action-code = "HID" ) [ "hide" ]
    ( action-code = "SAC" ) [ "signal-alpha-on" ]
    ( action-code = "SBC" ) [ "signal-beta-on" ]
    ( action-code = "SCC" ) [ "signal-gamma-on" ]
    ( action-code = "CKI" ) [ "check-infancy" ]
    ( action-code = "CKB" ) [ "check-birth" ]
    ( action-code = "CKJ" ) [ "check-juvenility" ]
    ( action-code = "CKW" ) [ "check-weaning" ]
    ( action-code = "ADC" ) [ "adult-chance" ]
    ( action-code = "CKA" ) [ "check-adulthood" ]
    ( action-code = "CKS" ) [ "check-senescence" ]
    ( action-code = "SPL" ) [ "supply-to" ]
    ( action-code = "DMF" ) [ "demand-from" ]
    ( action-code = "EAT" ) [ "eat" ]
    ( action-code = "PKU" ) [ "pick-up" ]
    ( action-code = "SQM" ) [ "squirm-from" ]
    ( action-code = "PDN" ) [ "put-down" ]
    ( action-code = "CLG" ) [ "cling-to" ]
    ( action-code = "ATK" ) [ "attack" ]
    ( action-code = "HLP" ) [ "help" ]
    ( action-code = "JNG" ) [ "join" ]
    ( action-code = "LEV" ) [ "leave" ]
    ( action-code = "RCT" ) [ "recruit" ]
    ( action-code = "KCK" ) [ "kick-out" ]
    ( action-code = "MAT" ) [ "mate-with" ]
    [ "" ])
  
end

to-report read-section [ section ]
  let operator ifelse-value ( length section = 3 ) [ item 1 section ] [ "" ]
  let left-value read-code ifelse-value ( length section = 3 ) [ item 0 section ] [ "" ]
  let right-value read-code ifelse-value ( length section = 3 ) [ item 2 section ] [ "" ]

  set left-value ifelse-value ( not is-number? left-value ) [ 0 ] [ left-value ]
  set right-value ifelse-value ( not is-number? right-value ) [ 0 ] [ right-value ]
  
  report (ifelse-value
    ( operator = "EQL" ) [ left-value = right-value ]
    ( operator = "NQL" ) [ left-value != right-value ]
    ( operator = "GRT" ) [ left-value > right-value ]
    ( operator = "LST" ) [ left-value < right-value ]
    ( operator = "SDO" ) [ shade-of? left-value right-value ]
    [ false ])
end

to-report read-code [ code ]
  report (ifelse-value
    
    ( is-number? code ) [ code ]
    
    ; what EGO can see about ANYONE
    ( code = "MID" ) [ meta-id ]
    ( code = "SIZ" ) [ size ]
    ( code = "COL" ) [ round color ]
    ( code = "SEX" and is-anima1? self ) [ biological.sex ]
    ( code = "SHD" and is-anima1? self ) [ body.shade ]
    ( code = "LFH" and is-anima1? self ) [ life.history ] 
    ( code = "FER" and is-anima1? self ) [ female.fertility ]  
    ( code = "GRP" and is-anima1? self ) [ group.identity ]  
    ( code = "AON" and is-anima1? self ) [ alpha.signal ]
    ( code = "BON" and is-anima1? self ) [ beta.signal ]
    ( code = "CON" and is-anima1? self ) [ gamma.signal ]
    ( code = "SIG" and is-anima1? self ) [ (word ifelse-value ( alpha.signal ) [ "a" ] [ "" ] ifelse-value ( beta.signal ) [ "b" ] [ "" ] ifelse-value ( alpha.signal ) [ "c" ] [ "" ]) ]

    ; what EGO can see about OTHERS
    ( code = "EGO" ) [ self = myself ] 
    ( code = "DSE" ) [ distance myself ]
    ( code = "ISA" ) [ is-anima1? self ]
    ( code = "ISP" ) [ is-plant? self ]
    ( code = "DED" and is-anima1? self ) [ is.alive = false ]
    ( code = "CRD" and is-anima1? self ) [ member? self [carried.items] of myself ]
    ( code = "CRG" and is-anima1? self ) [ member? myself carried.items ]
    ( code = "MYO" and is-anima1? self and biological.sex = "female" ) [ member? self [my-offspring] of myself ]
    ( code = "MOM" and is-anima1? self ) [ [mother] of myself = self ]
    ;( code = "REL" and is-anima1? self ) [ get-degree-relatedness-with myself ]

    ; what only EGO can see about ITSELF ( can't access information unless self = myself )
    ; currently carried by someone else?
    ( code = "EMI" and self = myself ) [ [meta-id] of myself ]
    ( code = "ESZ" and self = myself ) [ [size] of myself ]
    ( code = "ECL" and self = myself ) [ round [color] of myself ]
    ( code = "ESX" and self = myself ) [ [biological.sex] of myself ]
    ( code = "ESD" and self = myself ) [ [body.shade] of myself ]
    ( code = "ELH" and self = myself ) [ [life.history] of myself ] 
    ( code = "EFR" and self = myself ) [ [female.fertility] of myself ]
    ( code = "EGP" and self = myself ) [ [group.identity] of myself ]  
    ( code = "ENG" and self = myself ) [ [energy.supply] of myself ]
    ( code = "EBS" and self = myself ) [ [body.size] of myself ]
    ( code = "ESR" and self = myself ) [ [sex.ratio ] of myself ]
    ( code = "ELS" and self = myself ) [ [litter.size] of myself ]
    ( code = "ECC" and self = myself ) [ [conception.chance] of myself ]
    ( code = "EST" and self = myself ) [ [stomach.size] of myself ]
    ( code = "EMC" and self = myself ) [ [mutation.chance] of myself ]
    ( code = "EPC" and self = myself ) [ [day.perception.range] of myself ]
    ( code = "ENP" and self = myself ) [ [night.perception.range] of myself ]
    ( code = "EAP" and self = myself ) [ [audio.perception.range] of myself ]
    ( code = "EDA" and self = myself ) [ [day.perception.angle] of myself ]
    ( code = "ENA" and self = myself ) [ [night.perception.angle] of myself ]
    ( code = "EAA" and self = myself ) [ [audio.perception.angle] of myself ]
    ( code = "EVR" and self = myself ) [ [vocal.range] of myself ]
    ( code = "EBC" and self = myself ) [ [birthing.chance] of myself ]
    ( code = "EWC" and self = myself ) [ [weaning.chance] of myself ]
    ( code = "EIC" and self = myself ) [ [infancy.chance] of myself ]
    ( code = "EJC" and self = myself ) [ [juvenility.chance] of myself ]
    ( code = "EAC" and self = myself ) [ [adulthood.chance] of myself ]
    ( code = "ESC" and self = myself ) [ [senescency.chance] of myself ]
    ( code = "ELC" and self = myself ) [ [living.chance] of myself ]
    ( code = "ESA" and self = myself ) [ [alpha.chance] of myself ]
    ( code = "ESB" and self = myself ) [ [beta.chance] of myself ]
    ( code = "ESC" and self = myself ) [ [gamma.chance] of myself ]

    ; PRIMITIVES
    ( code = "TRU" ) [ true ]
    ( code = "FAL" ) [ false ]
    ( code = "XXX" ) [ "" ]
    ( code = "AXX" ) [ "a" ]
    ( code = "ABX" ) [ "ab" ]
    ( code = "ABC" ) [ "abc" ]
    ( code = "XBX" ) [ "b" ]
    ( code = "XBC" ) [ "bc" ]
    ( code = "XXC" ) [ "c" ]
    ( code = "AXC" ) [ "ac" ]
    ( code = "FEM" ) [ "female" ]
    ( code = "MAL" ) [ "male" ]
    ( code = "GES" ) [ "gestatee" ]
    ( code = "INF" ) [ "infant" ]
    ( code = "JUV" ) [ "juvenile" ]
    ( code = "ADT" ) [ "adult" ]
    ( code = "SEN" ) [ "senescent" ]
    ( code = "CYC" ) [ "cycling" ]
    ( code = "PRG" ) [ "pregnant" ]
    ( code = "LAC" ) [ "lactating" ]
    ( code = "RNM" ) [ random-float 1.0 ]
    ( code = "RNB" ) [ one-of [ true false ] ]
    ( code = "DAY" ) [ get-solar-status = "DAY" ]
    ( code = "NGT" ) [ get-solar-status = "NIGHT" ]
    
    [ false ])
end

;----------------------------------------------------------------------------------------------
; GET-MUTATION
;
; Returns a randomly selected codon to occasionally introduce novel mutations into a population.
;
; CALLER: anima1
;----------------------------------------------------------------------------------------------

to-report g8tes-get-mutation [ original-codon ]
  report one-of (sentence gate-codons action-codons operation-codons reporter-codons )
end

to-report gate-codons
  report [ 
    "ANY" "UUU" "NNN" "ONE" "MEE" 
    "ALL" "THN" "TNT" ] ; "AND" "ORR" "NOT" 
end

to-report action-codons
  report [ 
    "MNT" "GRW" "BSD" "DPR" "NPR" 
    "APR" "DPA" "NPA" "APA" "VCR"    
    "ICC" "STM" "MTC" "SXR" "LTS"
    "TRT" "TLF" "GFD" "HED" "HID"
    "SAC" "SBC" "SCC" "CKI" "CKB"
    "CKJ" "CKW" "CKA" "CKS" "MOV"
    "MAF" "SPL" "DMF" "EAT" "JNG"
    "LEV" "RCT" "KCK" "PKU" "PDN"
    "CLG" "SQM" "HLP" "ATK" "MAT" ]
end

to-report operation-codons 
  report [ "EQL" "NQL" "GRT" "LST" "SDO" ]
end

to-report reporter-codons
  report [
    "TRU" "FAL" "DAY" "NGT" "XXX"
    "AXX" "ABX" "ABC" "XBX" "XBC"
    "XXC" "AXC" "FEM" "MAL" "GES"
    "INF" "JUV" "ADT" "SEN"
    "CYC" "PRG" "LAC" "RNM" "RNB" 
    
    "MID" "SIZ" "COL" "SEX" "SHD"
    "LFH" "FER" "GRP" "AON" "BON"
    "CON" "SIG" "EGO" "DSE" "ISA"
    "ISP" "DED" "CRD" "MYO" "MOM"  
    
    "EMI" "EAG" "ESZ"
    "ECL" "ESX" "ESD" "ELH" "EFR" 
    "EGP" "EXM" "EYM" "ENG"
    "EBS" "ESR" "ELS" "ECC" "EST"
    "EMC" "EPC" "ENP" "EAP" "EDA"
    "ENA" "EAA" "EVR" "EBC" "EWC" 
    "EIC" "EJC" "EAC" "ESC" "ELC" 
    "ASC" "BSC" "CSC" 
  ]
end
