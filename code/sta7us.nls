;----------------------------------------------------------------------------------------------
;
;             dP            d88888P                   
;             88                d8'                   
;  .d8888b. d8888P .d8888b.    d8'  dP    dP .d8888b. 
;  Y8ooooo.   88   88'  `88   d8'   88    88 Y8ooooo. 
;        88   88   88.  .88  d8'    88.  .88       88 
;  `88888P'   dP   `88888P8 d8'     `88888P' `88888P' 
; 
; © 2020 K N Crouse                                        
;----------------------------------------------------------------------------------------------
; 
; This extension contains all functions that allow anima1s to make decisions from their 
; genotypes.
;
; List of all genotype cod0ns:
; 
; CODE  MAINTENANCE  DESCRIPTION                
;
;  a    2019-09-XX   is an adult
;  b    2019-09-XX   is bigger than myself
;  c    2019-09-XX   is cycling
;  d    2019-09-XX   is a plant (not an anima1)
;  e    2019-09-XX   is myself
;  f    2019-09-XX   is female
;  g    2019-09-XX   is a gestatee
;  h    2019-09-XX   is healthier than myself
;  i    2019-09-XX   is an infant
;  j    2019-09-XX   is a juvenile
;  k    2019-09-XX   is kin (relatedness > 0.2)
;  l    2019-09-XX   is lactating
;  m    2019-09-XX   is a male
;  n    2019-09-XX   is a group member
;  o    2019-09-XX   is another (not myself)
;  p    2019-09-XX   is pregnant
;  q    2019-09-XX   is not kin (relatedness <= 0.2)
;  r    2019-09-XX   is smaller than myself
;  s    2019-09-XX   is senescent
;  t    2019-09-XX   is neither carrying or carried by myself
;  u    2019-09-XX   is a stranger (none-group member)
;  v    2019-09-XX   is alive
;  w    2019-09-XX   is dead
;  x    2019-09-XX   is sicker than myself
;  y    2019-09-XX   is carried by myself
;  z    2019-09-XX   is an anima1 (not a plant)
;  +    2019-09-XX   is carrying myself
;  α    2019-09-XX   has alpha signal on
;  β    2019-09-XX   has beta signal on
;  ɣ    2019-09-XX   has gamma signal on
;  *    2019-09-XX   is observed during the day
;  -    2019-09-XX   is observed during the night
;  #    2019-09-XX   has color shade between # = 0 [dark] and # = 9 [light]
;  $    2019-09-XX   has more energy than myself
;  ~    2019-09-XX   has less energy than myself
;         
; MNT   2019-08-26   --> maintain-body
; GRW   2019-08-26   --> body-size                 
; BSD   2019-08-26   --> body-shade              
; IPR   2019-08-26   --> day-perception            
; NPR   2019-08-26   --> night-perception          
; APR   2019-08-26   --> audio-perception          
; DPA   2019-08-26   --> day-perception-angle
; NPA   2019-08-26   --> night-perception-angle
; APA   2019-08-26   --> audio-perception-angle 
; VCR   2019-08-26   --> vocal-range
; ICC   2019-08-26   --> conception-chance    
; STM   not done     --> stomach-size
; MTR   2019-08-26   --> mutation-rate            
; SXR   2019-08-26   --> sex-ratio               
; LTS   2019-08-26   --> litter-size               
; LEV   2019-08-26   --> leave-group  
; MOV   2019-08-26   --> move-toward
; TRT   2019-08-26   --> turn-right               
; TLF   2019-08-26   --> turn-left                 
; GFD   2019-08-26   --> go-forward               
; SAO   2019-08-26   --> signal-a-on               
; SBO   2019-08-26   --> signal-b-on               
; SCO   2019-08-26   --> signal-c-on               
; CKI   2019-08-26   --> check-infancy             
; CKB   2019-08-26   --> check-birth               
; CKJ   2019-08-26   --> check-juvenility         
; CKW   2019-08-26   --> check-weaning              
; CKA   2019-08-26   --> check-adulthood           
; CKS   2019-08-26   --> check-senescence            
; GFT   2019-10-16   --> supply-to 
; RFT   2019-10-16   --> demand-from
; EAT   2019-10-16   --> eat
; PKU   2019-09-XX   --> pick-up
; SQM   2020-04-XX   --> squirm-from
; PDN   2019-10-16   --> put-down
; CLG   2020-04-XX   --> cling-to
;                    --> give-to
;                    --> take-from ; other action to shift inventory?
; ATK   2019-09-XX   --> attack 
; HLP   2019-09-XX   --> help
; JNG   2019-09-XX   --> join-group-of
; MAT   2019-10-16   --> mate-with
; 
;----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
; MAKE DECISIONS
;
; Reporter that returns a list of decision vectors generated from genotype.
;
; Caller: anima1
; ENVIRONMENT: list of turtles (both plants and anima1s) observed by the caller.
;----------------------------------------------------------------------------------------------

to-report sta7us-make-decisions [ local-turtles ]
  
  let meself self
  let current-energy energy.supply
  let ego-status status-of meself
  let decision-vectors []
  let conspecifics-list []
  let status-list []

  let status-table table:make
  ask local-turtles [
    table:put status-table [meta-id] of self [ status-of myself ] of myself ]
  
  foreach (sentence chromosome.I chromosome.II) [ g ->
    if ( length g = 5 and is-boolean? first g and is-string? item 1 g and is-string? item 2 g and is-string? item 3 g and is-number? item 4 g ) [ ; checks that allele correctly organized
      let gene-ego item 1 g
      let gene-other item 2 g
      let gene-action item 3 g
      let gene-weight item 4 g
      
      ; Check that first CODON matches self
      if first-string-is-part-of-last? ( gene-ego ) ( ego-status ) [
        
        ; Consider status-of others in the environment
        ask local-turtles [
          let other-guy self
          let other-status table:get status-table [meta-id] of self
          
          ; Check that second CODON matches other
          if first-string-is-part-of-last? ( gene-other ) ( other-status ) [
            
            ask myself [
              let distance-to-target ifelse-value ( distance other-guy > 1 ) [ distance other-guy ] [ 1 ]
              let vector-doesnt-exist true
              foreach decision-vectors [ v ->
                
                if ( item 2 v = other-guy ) and ( item 3 v = ( get-action gene-action ) ) [
                  set vector-doesnt-exist false
                  set decision-vectors remove-item position v decision-vectors decision-vectors
                  let new-vector replace-item 4 v ( item 4 v + precision ( gene-weight / ( distance-to-target ^ 2 )) 5 )
                  set decision-vectors lput new-vector decision-vectors ]]
              
              if vector-doesnt-exist [
                set decision-vectors lput (list random 9999999 meself other-guy ( get-action gene-action ) precision ( gene-weight / ( distance-to-target ^ 2 )) 5 ) decision-vectors ]
        ]]]
      ]
    ]
  ]
  
  report decision-vectors
end

;----------------------------------------------------------------------------------------------
; GET MUTATION
;
; Returns a randomly selected codon to occasionally introduce novel mutations into a population.
;
; CALLER: anima1
;----------------------------------------------------------------------------------------------

to-report sta7us-get-mutation [ original-codon ]
  report ( ifelse-value 
    ( member? original-codon action-code-list ) [ one-of action-code-list ] 
    [ generate-status ] ) ; expand to include add, delete, duplicate, mutate
end

;--------------------------------------------------------------------------------------------------------------------
; REPORTERS
;--------------------------------------------------------------------------------------------------------------------

to-report get-action [ action-code ] ; called by sta7us, fix

  report
  (ifelse-value
    ( action-code = "DEC" or action-code = "make-decisions" ) [ "make-decisions" ]
    ( action-code = "MNT" or action-code = "maintain-body" ) [ "maintain-body" ]
    ( action-code = "GRW" or action-code = "body-size" ) [ "body-size" ]
    ( action-code = "BSD" or action-code = "body-shade" ) [ "body-shade" ]
    ( action-code = "IPR" or action-code = "day-perception") [ "day-perception" ]
    ( action-code = "NPR" or action-code = "night-perception" ) [ "night-perception" ]
    ( action-code = "APR" or action-code = "audio-perception" ) [ "audio-perception" ]
    ( action-code = "DPA" or action-code = "day-perception-angle" ) [ "day-perception-angle" ]
    ( action-code = "NPA" or action-code = "night-perception-angle" ) [ "night-perception-angle" ]
    ( action-code = "APA" or action-code = "audio-perception-angle") [ "audio-perception-angle" ]
    ( action-code = "VCR" or action-code = "vocal-range" ) [ "vocal-range" ]
    ( action-code = "ICC" or action-code = "conception-chance" ) [ "conception-chance" ]
    ( action-code = "STM" or action-code = "stomach-size" ) [ "stomach-size" ]   
    ( action-code = "MTR" or action-code = "mutation-rate" ) [ "mutation-rate" ]
    ( action-code = "SXR" or action-code = "sex-ratio" ) [ "sex-ratio" ]
    ( action-code = "LTS" or action-code = "litter-size" ) [ "litter-size" ]
    ( action-code = "LEV" or action-code = "leave-group" ) [ "leave-group" ]
    ( action-code = "TRT" or action-code = "turn-right" ) [ "turn-right" ]
    ( action-code = "TLF" or action-code = "turn-left" ) [ "turn-left" ]
    ( action-code = "GFD" or action-code = "go-forward" ) [ "go-forward" ]
    ( action-code = "MOV" or action-code = "move-toward" ) [ "move-toward" ]
    ( action-code = "HED" or action-code = "set-heading" ) [ "set-heading" ]
    ( action-code = "SAC" or action-code = "signal-a-chance" ) [ "signal-a-chance" ]
    ( action-code = "SAO" or action-code = "signal-a-on" ) [ "signal-a-on" ]
    ( action-code = "SBC" or action-code = "signal-b-chance" ) [ "signal-b-chance" ]
    ( action-code = "SBO" or action-code = "signal-b-on" ) [ "signal-b-on" ]
    ( action-code = "SCC" or action-code = "signal-c-chance" ) [ "signal-c-chance" ]
    ( action-code = "SCO" or action-code = "signal-c-on" ) [ "signal-c-on" ]
    ( action-code = "INC" or action-code = "infancy-chance" ) [ "infancy-chance" ]
    ( action-code = "CKI" or action-code = "check-infancy" ) [ "check-infancy" ]
    ( action-code = "GVB" or action-code = "birthing-chance" ) [ "birthing-chance" ]
    ( action-code = "CKB" or action-code = "check-birth" ) [ "check-birth" ]
    ( action-code = "JVC" or action-code = "juvenile-chance" ) [ "juvenile-chance" ]
    ( action-code = "CKJ" or action-code = "check-juvenility" ) [ "check-juvenility" ]
    ( action-code = "WEN" or action-code = "weaning-chance" ) [ "weaning-chance" ]
    ( action-code = "CKW" or action-code = "check-weaning" ) [ "check-weaning" ]
    ( action-code = "ADC" or action-code = "adult-chance" ) [ "adult-chance" ]
    ( action-code = "CKA" or action-code = "check-adulthood" ) [ "check-adulthood" ]
    ( action-code = "SNC" or action-code = "senescent-chance" ) [ "senescent-chance" ]
    ( action-code = "CKS" or action-code = "check-senescence" ) [ "check-senescence" ]
    ( action-code = "DSC" or action-code = "digest-stomach" ) [ "digest-stomach" ]
    ( action-code = "FAT" or action-code = "reserve-energy" ) [ "reserve-energy" ]
    ( action-code = "BRN" or action-code = "burn-reserves" ) [ "burn-reserves" ]
    ( action-code = "GFT" or action-code = "supply-to" ) [ "supply-to" ]
    ( action-code = "RFT" or action-code = "demand-from" ) [ "demand-from" ]
    ( action-code = "EAT" or action-code = "eat") [ "eat" ]
    ( action-code = "PKU" or action-code = "pick-up" ) [ "pick-up" ]
    ( action-code = "SQM" or action-code = "squirm-from" ) [ "squirm-from" ]
    ( action-code = "PDN" or action-code = "put-down" ) [ "put-down" ]
    ( action-code = "CLG" or action-code = "cling-to" ) [ "cling-to" ]
    ( action-code = "ATK" or action-code = "attack" ) [ "attack" ]
    ( action-code = "HLP" or action-code = "help") [ "help" ]
    ( action-code = "JNG" or action-code = "join-group-of" ) [ "join-group-of" ]
    ( action-code = "MAT" or action-code = "mate-with") [ "mate-with" ]
    [ "" ])
  
end

to-report status-of [ target ]
  let status-report ""

  ifelse (is-anima1? target) 
  [ ; ANIMALS
    let target-kind "z"
    let target-self ifelse-value ( target = self ) [ "e" ] [ "o" ]
    let target-alive ifelse-value ( is.alive ) [ "v" ] [ "w" ]
    let target-sex first [biological.sex] of target
    let target-life-history first [life.history] of target
    let target-fertility first [female.fertility] of target
    let target-size ifelse-value ( [size] of target < size ) [ "r" ] [ "b" ]
    let target-health ifelse-value ( [living.chance] of target > living.chance ) [ "h" ] [ "x" ]
    let target-kin ifelse-value ( relatedness-with target > 0.2 ) [ "k" ] [ "q" ]
    let target-group ifelse-value ( [group.identity] of target = group.identity ) [ "n" ] [ "u" ] 
    let target-carry ifelse-value ( member? target carried.items ) [ "y" ] [ ifelse-value ( member? self [carried.items] of target ) [ "+" ] [ "t" ] ]
    let target-signal (word ifelse-value alpha.signal [ "α" ][ "" ] ifelse-value beta.signal [ "β" ][ "" ] ifelse-value gamma.signal [ "ɣ" ][ "" ] )
    let target-energy ifelse-value ( [energy.supply] of target > energy.supply ) [ "$" ] [ "~" ]
    set status-report (word target-self target-alive target-kind target-sex target-life-history target-fertility target-size target-health target-kin target-group target-carry target-signal )
    
  ][ 
    ; PLANTS
    let target-kind "d" 
    set status-report ( word target-kind ) 
  ]
  
  ; BOTH
  set status-report (word status-report ifelse-value ( get-solar-status = "DAY" ) [ "*" ][ "-" ] )
  set status-report (word status-report ceiling [color] of target )
  
  report status-report
end

to-report first-string-is-part-of-last? [ string1 string2 ]
  let first-is-part-of-last true
  let index 0
  if ( is-string? string1 and is-string? string2 ) [
    while [index < length string1] [
      if ( not member? item index string1 string2 ) and ( item index string1 != " " ) [ set first-is-part-of-last false ]
      set index index + 1 ]
  ]
  report first-is-part-of-last
end

to-report status-code-list
  report [ 
    "a" "b" "c" "d" "e" "f" "g" 
    "h" "i" "j" "k" "l" "m" "n"
    "o" "p" "q" "r" "s" "t" "u"
    "v" "w" "x" "y" "z" "+" "α"
    "β" "ɣ" "*" "-" "#" "$" "~" 
    "1" "2" "3" "4" "5" 
    "6" "7" "8" "9" "0" ]
end

to-report action-code-list
  report [ 
    "DEC" "MNT" "GRW" "BSD" "IPR" 
    "NPR" "APR" "ICC" "MTR" "SXR" 
    "LTS" "LEV" "TRT" "TLF" "GFD" 
    "HED" "SAC" "SBC" "SCC" "SAO" 
    "SBO" "SCO" "INC" "CKI" "GVB" 
    "MOV" "AWY"
    "CKB" "CKJ" "CKW"
    "CKA" "CKS" "DSC" 
    "GFT" "RFT" "EAT" "SQM" "CLG"
    "PKU" "PDN" "ATK" "HLP" "JNG"
    "MAT" "DPA" "NPA" "APA" "VCR"  ]
end

to-report generate-status
  let new-status one-of status-code-list
  repeat (random 5) [ set new-status ( word new-status one-of status-code-list ) ]
  report new-status
end

