;----------------------------------------------------------------------------------------------
;
;             dP            d88888P                   
;             88                d8'                   
;  .d8888b. d8888P .d8888b.    d8'  dP    dP .d8888b. 
;  Y8ooooo.   88   88'  `88   d8'   88    88 Y8ooooo. 
;        88   88   88.  .88  d8'    88.  .88       88 
;  `88888P'   dP   `88888P8 d8'     `88888P' `88888P' 
; 
; © 2019 K N Crouse                                        
;----------------------------------------------------------------------------------------------
; 
; This extension contains all functions that allow anima1s to make decisions from their 
; genotypes.
;
; List of all genotype cod0ns:
; 
; CODE  MAINTENANCE  DESCRIPTION                
;
;  a    2019-09-XX   target is an adult
;  b    2019-09-XX   target is bigger than myself
;  c    2019-09-XX   target is cycling
;  d    2019-09-XX   target is a plant (not an anima1)
;  e    2019-09-XX   target is myself
;  f    2019-09-XX   target is female
;  g    2019-09-XX   target is a gestatee
;  h    2019-09-XX   target is healthier than myself
;  i    2019-09-XX   target is an infant
;  j    2019-09-XX   target is a juvenile
;  k    2019-09-XX   target is kin (relatedness > 0.2)
;  l    2019-09-XX   target is lactating
;  m    2019-09-XX   target is a male
;  n    2019-09-XX   target is a group member
;  o    2019-09-XX   target is another (not myself)
;  p    2019-09-XX   target is pregnant
;  q    2019-09-XX   target is not kin (relatedness <= 0.2)
;  r    2019-09-XX   target is smaller than myself
;  s    2019-09-XX   target is senescent
;  t    2019-09-XX   target is neither carrying or carried by myself
;  u    2019-09-XX   target is a stranger (none-group member)
;  v    2019-09-XX   target is alive
;  w    2019-09-XX   target is dead
;  x    2019-09-XX   target is sicker than myself
;  y    2019-09-XX   target is carried by myself
;  z    2019-09-XX   target is an anima1 (not a plant)
;  +    2019-09-XX   target is carrying myself
;  α    2019-09-XX   target has alpha signal on
;  β    2019-09-XX   target has beta signal on
;  ɣ    2019-09-XX   target has gamma signal on
;  *    2019-09-XX   target is observed during the day
;  -    2019-09-XX   target is observed during the night
;  #    2019-09-XX   target's color shade between # = 0 [dark] and # = 9 [light]
;  $    2019-09-XX   target has more energy than myself
;  ~    2019-09-XX   target has less energy than myself
;         
; MNT   2019-08-26   --> maintain-body
; GRW   2019-08-26   --> body-size                 
; BSD   2019-08-26   --> body-shade              
; IPR   2019-08-26   --> day-perception            
; NPR   2019-08-26   --> night-perception          
; APR   2019-08-26   --> audio-perception          
; DPA   2019-08-26   --> day-perception-angle
; NPA   2019-08-26   --> night-perception-angle
; APA   2019-08-26   --> audio-perception-angle 
; VCR   2019-08-26   --> vocal-range
; ICC   2019-08-26   --> conception-chance        
; MTR   2019-08-26   --> mutation-rate            
; SXR   2019-08-26   --> sex-ratio               
; LTS   2019-08-26   --> litter-size               
; LEV   2019-08-26   --> leave-group  
; MOV   2019-08-26   --> move-toward
; TRT   2019-08-26   --> turn-right               
; TLF   2019-08-26   --> turn-left                 
; GFD   2019-08-26   --> go-forward               
; SAO   2019-08-26   --> signal-a-on               
; SBO   2019-08-26   --> signal-b-on               
; SCO   2019-08-26   --> signal-c-on               
; CKI   2019-08-26   --> check-infancy             
; CKB   2019-08-26   --> check-birth               
; CKJ   2019-08-26   --> check-juvenility         
; CKW   2019-08-26   --> check-weaning              
; CKA   2019-08-26   --> check-adulthood           
; CKS   2019-08-26   --> check-senescence            
; GFT   2019-10-16   --> supply-to 
; RFT   2019-10-16   --> demand-from
; EAT   2019-10-16   --> eat
; PKU   2019-09-XX   --> pick-up
; SQM   not done     --> squirm-from
; PDN   2019-10-16   --> put-down
; CLG   not done     --> cling-to
; ATK   2019-09-XX   --> attack 
; HLP   2019-09-XX   --> help
; JNG   2019-09-XX   --> join-group-of
; MAT   2019-10-16   --> mate-with
; 
;----------------------------------------------------------------------------------------------

to-report status-of [ target ]
  let status-report ""
  
  ;  if ( subject = self and is-anima1? target ) [
  ;    print (word "anima1: " [meta-id] of target )
  ;    print (word "     biological.sex: " [biological.sex] of target )
  ;    print (word "     life.history: " [life.history] of target )
  ;    print (word "     female.fertility: " [female.fertility] of target )
  ;    print (word "     body.size: " [body.size] of target )
  ;    print (word "     relatedness-with: " relatedness-with target )
  ;    print (word "     living.chance: " [living.chance] of target )
  ;    print (word "     energy.supply: " [energy.supply] of target )
  ;    print (word "     is.dead: " [is.dead] of target )
  ;  ]
  
  ifelse (is-anima1? target) 
  [ ; ANIMALS
    let target-kind "z"
    let target-self ifelse-value ( target = self ) [ "e" ] [ "o" ]
    let target-alive ifelse-value ( not is.dead ) [ "v" ] [ "w" ]
    let target-sex first [biological.sex] of target
    let target-life-history first [life.history] of target
    let target-fertility first [female.fertility] of target
    let target-size ifelse-value ( [size] of target < size ) [ "r" ] [ "b" ]
    let target-health ifelse-value ( [living.chance] of target > living.chance ) [ "h" ] [ "x" ]
    let target-kin ifelse-value ( relatedness-with target > 0.2 ) [ "k" ] [ "q" ]
    let target-group ifelse-value ( [group.identity] of target = group.identity ) [ "n" ] [ "u" ] 
    let target-carry ifelse-value ( member? target carried.items ) [ "y" ] [ ifelse-value ( member? self [carried.items] of target ) [ "+" ] [ "t" ] ]
    let target-signal (word ifelse-value alpha.signal [ "α" ][ "" ] ifelse-value beta.signal [ "β" ][ "" ] ifelse-value gamma.signal [ "ɣ" ][ "" ] )
    let target-energy ifelse-value ( [energy.supply] of target > energy.supply ) [ "$" ] [ "~" ]
    set status-report (word target-self target-alive target-kind target-sex target-life-history target-fertility target-size target-health target-kin target-group target-carry target-signal )
    
  ][ ; PLANTS
    let target-kind "d" 
    set status-report ( word target-kind ) ]
  
  ; BOTH
  set status-report (word status-report ifelse-value ( sun-status = "DAY" ) [ "*" ][ "-" ] )
  set status-report (word status-report ceiling [color] of target )
    
  report status-report
end

to sta7us-act
  
  foreach decision.vectors [ vector ->
    
    let energy-cost abs item 5 vector
    let not-done item 6 vector
    
    if ( not-done and energy.supply > energy-cost ) [
      ;let ego item 1 vector
      let target item 2 vector
      let code item 3 vector
      ;let operation item 4 vector
      let raw-weight item 5 vector
      update-energy ( - energy-cost )
      ;decisions-done (list vector)
      
      ifelse ifelse-value ( target = nobody ) [ false ] [ distance target < ( size / 2 + [size] of target / 2 ) ] [
        do-action code target raw-weight
        
      ][
        if (target != nobody ) [
          
          let polarity ( raw-weight > 0 )
          let ycor-difference ([ycor] of target - [ycor] of self )
          let xcor-difference ([xcor] of target - [xcor] of self )
          let angle ifelse-value ( ycor-difference = 0 or xcor-difference = 0 ) [ random 360 ] [ atan ycor-difference xcor-difference ]
          if ( polarity = false ) [ set angle angle - 180 ] ; could possibly simplify by taking out polarity and ...
          set x.magnitude x.magnitude + (energy-cost * sin angle) ; ... putting raw-weight here instead of energy-cost
          set y.magnitude y.magnitude + (energy-cost * cos angle) ; ... would that be mathematically equivalent?
        ]
      ]
    ]
  ]
  
end

;----------------------------------------------------------------------------------------------
; DO-ACTION
;
; Operation to do a given ACTION directed to a given TARGET with a given VALUE.
;
; CALLER: anima1
; ACTION: the action code representing the action to perform.
; TARGET: the receiver of an inter-action.
; VALUE: the amount of energy allotted to the action.
;----------------------------------------------------------------------------------------------

to sta7us-do-action [ action-code target value ]
  
  carefully [
    if action-code = "MNT" [ maintain-body value ]
    if action-code = "GRW" [ body-size value ]
    if action-code = "BSD" [ body-shade value ]
    if action-code = "IPR" [ day-perception value ]
    if action-code = "NPR" [ night-perception value ]
    if action-code = "APR" [ audio-perception value ]
    if action-code = "DPA" [ day-perception-angle value ]
    if action-code = "NPA" [ night-perception-angle value ]
    if action-code = "APA" [ audio-perception-angle value ]
    if action-code = "VCR" [ vocal-range value ]
    if action-code = "ICC" [ conception-chance value ]
    if action-code = "MTR" [ mutation-rate value ]
    if action-code = "SXR" [ sex-ratio value ]
    if action-code = "LTS" [ litter-size value ]
    if action-code = "LEV" [ leave-group-of target value ]
    if action-code = "MOV" [ move-toward target value ]
    if action-code = "TRT" [ turn-right value ]
    if action-code = "TLF" [ turn-left value ]
    if action-code = "GFD" [ go-forward value ]
    ;if action-code = "HED" [ set-heading value ]
    if action-code = "SAO" [ signal-a-on value ]
    if action-code = "SBO" [ signal-b-on value ]
    if action-code = "SCO" [ signal-c-on value ]
    if action-code = "CKI" [ check-infancy value ]
    if action-code = "CKB" [ check-birth value ]
    if action-code = "CKJ" [ check-juvenility value ]
    if action-code = "CKW" [ check-weaning value ]
    if action-code = "CKA" [ check-adulthood value ]
    if action-code = "CKS" [ check-senescence value ]
    if action-code = "GFT" [ supply-to target value ]
    if action-code = "RFT" [ demand-from target value ]
    if action-code = "EAT" [ eat target value ]
;    if action-code = "PKU" [ pick-up target value ]
;    if action-code = "SQM" [ squirm-from target value ]
    if action-code = "PDN" [ put-down target value ]
;    if action-code = "CLG" [ cling-to target value ]
    if action-code = "ATK" [ attack target value ]
    if action-code = "HLP" [ help target value ]
    if action-code = "JNG" [ join-group-of target value ]
    if action-code = "MAT" [ mate-with target value ]
    
  ][  ]
  
end

;----------------------------------------------------------------------------------------------
; GET-MUTATION
;
; Returns a randomly selected codon to occasionally introduce novel mutations into a population.
;
; CALLER: anima1
;----------------------------------------------------------------------------------------------

to-report get-mutation
  let index random 5
  let new-mutation ""
  
  if ( index = 0 ) [ set new-mutation one-of [ true false ] ]
  if ( index = 1 ) [ set new-mutation generate-status ]
  if ( index = 2 ) [ set new-mutation generate-status ]
  if ( index = 3 ) [ set new-mutation one-of action-code-list ]
  if ( index = 4 ) [ set new-mutation precision ( random-float 1.0 * ( ifelse-value (random-float 1.0 < 0.5 ) [ 1 ] [ -1 ] ) ) 5 ]
  
  report new-mutation
end

to-report status-code-list
  report [ 
    "a" "b" "c" "d" "e" "f" "g" 
    "h" "i" "j" "k" "l" "m" "n"
    "o" "p" "q" "r" "s" "t" "u"
    "v" "w" "x" "y" "z" "+" "α"
    "β" "ɣ" "*" "-" "#" "$" "~" 
    "1" "2" "3" "4" "5" 
    "6" "7" "8" "9" "0" ]
end

to-report action-code-list
  report [ 
    "DEC" "MNT" "GRW" "BSD" "IPR" 
    "NPR" "APR" "ICC" "MTR" "SXR" 
    "LTS" "LEV" "TRT" "TLF" "GFD" 
    "HED" "SAC" "SBC" "SCC" "SAO" 
    "SBO" "SCO" "INC" "CKI" "GVB" 
    "MOV" "AWY"
    "CKB" "CKJ" "CKW"
    "CKA" "CKS" "DSC" 
    "GFT" "RFT" "EAT" "SQM" "CLG"
    "PKU" "PDN" "ATK" "HLP" "JNG"
    "MAT" "DPA" "NPA" "APA" "VCR"  ]
end

to-report generate-status
  let new-status one-of status-code-list
  repeat (random 5) [ set new-status ( word new-status one-of status-code-list ) ]
  report new-status
end

;----------------------------------------------------------------------------------------------
; GENERATE-DECISIONS
;
; Reporter that returns a list of decision vectors generated from genotype.
;
; Caller: anima1
; ENVIRONMENT: list of turtles (both plants and anima1s) observed by the caller.
;----------------------------------------------------------------------------------------------

to generate-decisions [ local-turtles ] ; check actually working
  let meself self
  let current-energy energy.supply
  let self-phenotype status-of meself
  let decision-vectors []
  let conspecifics-list []
  let status-list []

  let status-table table:make
  ask local-turtles [
    table:put status-table [meta-id] of self [ status-of myself ] of myself ]
  
  foreach (sentence chromosome.I chromosome.II) [ g ->
    let gene-ego item 1 g
    let gene-other item 2 g
    let gene-action item 3 g
    let gene-weight item 4 g
    
    ; Check that first CODON matches self
    if first-string-is-part-of-last? ( gene-ego ) ( self-phenotype ) [
      
      ; Consider status-of others in the environment
      ask local-turtles [
        let other-guy self
        let other-status table:get status-table [meta-id] of self
        
        ; Check that second CODON matches other
        if first-string-is-part-of-last? ( gene-other ) ( other-status ) [
          
          ask myself [
            let distance-to-target ifelse-value ( distance other-guy > 1 ) [ distance other-guy ] [ 1 ]
            let vector-doesnt-exist true
            foreach decision-vectors [ v ->
              
              if ( item 2 v = other-guy ) and ( item 3 v = ( get-action gene-action ) ) [
                set vector-doesnt-exist false
                set decision-vectors remove-item position v decision-vectors decision-vectors
                let new-vector replace-item 4 v ( item 4 v + precision ( gene-weight / ( distance-to-target ^ 2 )) 5 )
                set decision-vectors lput new-vector decision-vectors ]]
            
            if vector-doesnt-exist [
              set decision-vectors lput (list random 9999999 meself other-guy ( get-action gene-action ) precision ( gene-weight / ( distance-to-target ^ 2 )) 5 ) decision-vectors ]
      ]]]
  ]]
  
  set decision.vectors ( sentence decision.vectors decision-vectors )
end

;--------------------------------------------------------------------------------------------------------------------
; OTHER FUNCTIONS
;--------------------------------------------------------------------------------------------------------------------

to-report first-string-is-part-of-last? [ string1 string2 ]
  let first-is-part-of-last true
  let index 0
  if ( is-string? string1 and is-string? string2 ) [
    while [index < length string1] [
      if ( not member? item index string1 string2 ) and ( item index string1 != " " ) [ set first-is-part-of-last false ]
      set index index + 1 ]
  ]
  report first-is-part-of-last
end

to-report get-decisions [ target target-target action-name ]
  report filter [ vector -> item 2 vector = target-target and item 3 vector = action-name ] [ decision.vectors ] of target 
end

to-report get-decisions-cost [ vector-list ]
  report sum map [ vector -> item 4 vector ] vector-list
end

to decisions-done [ vector-list ]
  if ( not empty? vector-list ) [
    let vector-ids map [ vector -> item 0 vector ] vector-list
    set done-decisions sentence vector-ids done-decisions
;    foreach decision.vectors [ vector ->
;      if ( member? item 0 vector vector-ids ) [ set decision.vectors replace-item (position vector decision.vectors) decision.vectors replace-item 6 vector false ]
;    ]
  ]
end
