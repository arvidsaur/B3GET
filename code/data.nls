;----------------------------------------------------------------------------------------------
;
;        dP            dP            
;        88            88            
;  .d888b88 .d8888b. d8888P .d8888b. 
;  88'  `88 88'  `88   88   88'  `88 
;  88.  .88 88.  .88   88   88.  .88 
;  `88888P8 `88888P8   dP   `88888P8 
;
; Â© 2020 K N Crouse
;----------------------------------------------------------------------------------------------     
; 
; This extension contains all functions that allow users to create population and genotypes 
; files and store metadata from a simulation. These files are stored in the data folder.
;
;----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
; METAFILE
;----------------------------------------------------------------------------------------------

to setup-metafile
  
  if ( not file-exists? "../data/metafile.csv" ) [
    
    file-open "../data/metafile.csv"
    csv:to-file "../data/metafile.csv" (list (list
      "date-and-time"
      "path-to-experiment"
      "model-version"
      "model-structure"
      "genotype-reader"
      "simulation-id"
      "ticks"
      "file-type"
      "file-name"
      "documentation-notes"
      "population-input" 
      "genotype-input"
      "plant-annual-cycle" 
      "plant-seasonality" 
      "plant-minimum-neighbors" 
      "plant-maximum-neighbors" 
      "plant-daily-cycle" 
      "plant-quality"
      "world-width" 
      "world-height"
      "deterioration-rate" 
      "selection-rate"
      "output-results?" 
      "selection-on?"
      "useful-commands"
      "command-input"
    ))
    
    file-close ]
end

to update-metafile [ type-of-file name-of-file ]
  
  ; Save whatever is currently in the METAFILE or create new
  if ( not file-exists? "../data/metafile.csv" ) [ setup-metafile ]
  file-open "../data/metafile.csv"
  let old-metafile csv:from-file "../data/metafile.csv"
  
  if documentation-notes = "" [ set documentation-notes "Metafile updated." ]
  
  ; Update METAFILE with a new row of FILE information
  csv:to-file "../data/metafile.csv"
  (lput
    (list 
      date-and-time
      path-to-experiment
      model-version
      model-structure
      genotype-reader
      simulation-id
      ticks
      type-of-file
      name-of-file
      documentation-notes
      population 
      genotype
      plant-annual-cycle 
      plant-seasonality
      plant-minimum-neighbors 
      plant-maximum-neighbors
      plant-daily-cycle 
      plant-quality
      world-width 
      world-height
      deterioration-rate
      selection-rate
      output-results?
      selection-on?
      useful-commands
      command-input 
    )
    
    old-metafile )
  
  set documentation-notes ""
  file-close
end

;----------------------------------------------------------------------------------------------
; POPULATION FILES
;----------------------------------------------------------------------------------------------

to-report generate-population-id
  let alphabet [ "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" ]
  report ( word "p" random 99 one-of alphabet one-of alphabet one-of alphabet )
end

to import-population
  output-header (word " IMPORT POPULATION : " population )
  
  ifelse file-exists? ( word "../data/" population ".csv" ) [
    
    import-turtles-from ( word "../data/" population ".csv" )
    
    ; create new meta-ids for everyone
    let table-of-ids table:make
    ask turtles [
      let new-id random 9999999
      table:put table-of-ids meta-id new-id
      set meta-id new-id ]
    
    ; update carried items list
    ask anima1s [
      if ( not is-list? carried.items ) [ set carried.items [] ]
      foreach carried.items [ itm -> set carried.items remove itm ( lput one-of anima1s with [ meta-id = ( table:get table-of-ids itm ) ] carried.items ) ] ]
    
    ; update mother identity
    ask anima1s [
      if ( mother = 0 or mother = "nobody" ) [ set mother nobody ]
      if ( member? mother table:keys table-of-ids ) [ 
        set mother one-of turtles with [ table:get table-of-ids [mother] of myself = meta-id ] ]]

    ; update group affilitations with new ids
    ask anima1s [
     set group.identity table:get table-of-ids group.identity ]
    
    ; generation initialization of variables
    ask anima1s [
      set group-transfers-list []
      set matings-list []
      set conceptions-list []
      set cells-occupied []
      set infanticide-list []
      set decision.vectors []
      set my.environment no-turtles
      if ( stomach.size = 0 ) [ set stomach.size 0.1 ]
      if ( is.alive = 0 ) [ set is.alive true ]]
    
    set documentation-notes (word "Population file " population " imported. " documentation-notes )
    update-metafile "population" population
    output-print " Population import successful."
    
  ][ set population "" ]
  
end

to save-population
  output-header (word " SAVE POPULATION : " population )

  ifelse ( file-exists? (word "../data/" population ".csv") )
  [ 
    ; popup window options if population file already exists
    let answer user-yes-or-no? 
    (word "The population " population " already exists! "
      "Would you like to: overwrite the existing file with current population [ YES ], "
      "save current population to a different randomly generated file name [ NO ], "
      "or forget the whole darn thing [ HALT ]?" )
    ifelse ( answer ) [ file-delete (word "../data/" population ".csv") save-population ] [ set population generate-population-id save-population ]
    
  ][

    ; list of turtle state variables to save
    let turtle-list (list 
      "breed" 
      "meta-id" 
      "age"
      "color" 
      "heading" 
      "xcor" 
      "ycor" 
      "label" 
      "label-color"
      "shape" 
      "hidden?" 
      "size" 
      "pen-size" 
      "pen-mode"
      "biological.sex" 
      "life.history" 
      "female.fertility" 
      "energy.supply" 
      "group.identity" 
      "is.alive" 
      "alpha.signal" 
      "beta.signal" 
      "gamma.signal"
      "mother"
      "chromosome.I" 
      "chromosome.II" 
      "identity.I" 
      "identity.II"
      "living.chance" 
      "body.size" 
      "body.shade" 
      "stomach.size" 
      "mutation.chance"
      "sex.ratio" 
      "litter.size" 
      "conception.chance"
      "day.perception.angle"
      "night.perception.angle" 
      "audio.perception.angle"
      "day.perception.range" 
      "night.perception.range" 
      "audio.perception.range"
      "vocal.range" 
      "alpha.chance" 
      "beta.chance" 
      "gamma.chance"
      "birthing.chance" 
      "weaning.chance"
      "infancy.chance"
      "juvenility.chance" 
      "adulthood.chance"
      "senescency.chance"
      "carried.items" )
    
    ask turtles with [ breed = anima1s or breed = groups ] [ 
      if ( is-anima1? self ) [ set mother ifelse-value ( mother != nobody ) [ [meta-id] of mother ] [ nobody ] ]
      export-turtle-to (word "../data/" population ".csv") turtle-list 
      if ( is-anima1? self ) [ set mother ifelse-value ( mother != nobody ) [ one-of anima1s with [ meta-id = [mother] of myself ]] [ nobody ] ]
    ]

    set documentation-notes (word "New population " population " saved. " documentation-notes )
    update-metafile "population" population
    output-print " Population successfully saved."
  ]
end

;----------------------------------------------------------------------------------------------
; GENOTYPE FILES
;----------------------------------------------------------------------------------------------

to-report generate-genotype-id
  report ( word "g" [meta-id] of one-of anima1s )
end

to import-genotype
  output-header (word " IMPORT GENOTYPE : " genotype )

  ifelse file-exists? ( word "../data/" genotype ".txt" ) [  
    
    ask anima1s [
      
      set chromosome.I []
      set chromosome.II []
      
      file-open ( word "../data/" genotype ".txt" )
      let first-chromosome? true 
      while [ not file-at-end? ] [
        let row (csv:from-row file-read-line " ")
        (ifelse 
          ( row = [""] ) 
          [ set first-chromosome? false ]
          ( first-chromosome? ) 
          [ set chromosome.I lput row chromosome.I ]
          [ set chromosome.II lput row chromosome.II ])
      ]
      file-close
    ]
    
    set documentation-notes (word "Genotype " genotype " imported. " documentation-notes )
    update-metafile "genotype" genotype
    output-print " Genotype import successful."
    
  ] [ set genotype "" ]
  
end

to save-genotype
  output-header (word " SAVE GENOTYPE : organism " meta-id )
  (csv:to-file ( word "../data/" genotype ".txt" ) (sentence chromosome.I [[]] chromosome.II ) " ")
  set documentation-notes (word "New genotype " genotype " saved. " documentation-notes )
  update-metafile "genotype" genotype
  output-print " Genotype successfully saved."
end
