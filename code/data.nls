;----------------------------------------------------------------------------------------------
;
;        dP            dP            
;        88            88            
;  .d888b88 .d8888b. d8888P .d8888b. 
;  88'  `88 88'  `88   88   88'  `88 
;  88.  .88 88.  .88   88   88.  .88 
;  `88888P8 `88888P8   dP   `88888P8 
;
; Â© 2020 K N Crouse
;----------------------------------------------------------------------------------------------     
; 
; This extension contains all functions that allow users to create population and genotypes 
; files and store metadata from a simulation. These files are stored in the data folder.
;
;----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
; METAFILE FILES
;----------------------------------------------------------------------------------------------

to-report metafile-exists?
  report file-exists? "../data/metafile.csv"
end

to setup-metafile
  
  if ( not metafile-exists? ) [
    
    file-open "../data/metafile.csv"
    csv:to-file "../data/metafile.csv" (list (list
      "date-and-time"
      "path-to-experiment"
      "model-version"
      "model-structure"
      "genotype-reader"
      "simulation-id"
      "ticks"
      "file-type"
      "file-name"
      "documentation-notes"
      "population-input" 
      "genotype-input"
      "plant-annual-cycle" 
      "plant-seasonality" 
      "plant-minimum-neighbors" 
      "plant-maximum-neighbors" 
      "plant-daily-cycle" 
      "plant-quality"
      "world-width" 
      "world-height"
      "deterioration-rate" 
      "selection-rate"
      "output-results?" 
      "selection-on?"
      "useful-commands"
      "command-input"
    ))
    
    file-close ]
end

to update-metafile [ type-of-file name-of-file ]
  
  ; Save whatever is currently in the METAFILE or create new
  if ( not metafile-exists? ) [ setup-metafile ]
  file-open "../data/metafile.csv"
  let old-metafile csv:from-file "../data/metafile.csv"
  
  if documentation-notes = "" [ set documentation-notes "Metafile updated." ]
  
  ; Update METAFILE with a new row of FILE information
  csv:to-file "../data/metafile.csv"
  (lput
    (list 
      date-and-time
      path-to-experiment
      model-version
      model-structure
      genotype-reader
      simulation-id
      ticks
      type-of-file
      name-of-file
      documentation-notes
      population 
      genotype
      plant-annual-cycle 
      plant-seasonality
      plant-minimum-neighbors 
      plant-maximum-neighbors
      plant-daily-cycle 
      plant-quality
      world-width 
      world-height
      deterioration-rate
      selection-rate
      output-results?
      selection-on?
      useful-commands
      command-input 
    )
    
    old-metafile )
  
  set documentation-notes ""
  file-close
end

;----------------------------------------------------------------------------------------------
; POPULATION FILES
;----------------------------------------------------------------------------------------------

to-report generate-population-id
  let alphabet [ "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" ]
  report ( word "p" random 99 one-of alphabet one-of alphabet one-of alphabet )
end

to-report population-file-exists?
  report file-exists? ( word "../data/" population ".csv" )
end

;to ask-anima1s-unlock-chromosomes
;  set chromosome.I read-from-string chromosome.I
;  set chromosome.II read-from-string chromosome.II
;end

to import-population
  clear-output
  output-print " ---------------------------------------------------------------------------"
  output-print (word " IMPORT POPULATION : " population )
  output-print " ---------------------------------------------------------------------------"
  
  ifelse population-file-exists? [
    
    import-turtles-from (word "../data/" population ".csv")
    
    let id-memory table:make
    
    
    ask anima1s [
      
      ;ask anima1s with [ biological.sex = "female" and life.history = "adult" ] [ set female.fertility "cycling" ]
      
      let new-id random 9999999
      table:put id-memory meta-id new-id
      set meta-id new-id
      
      set carried.items ifelse-value ( is-string? carried.items ) [ read-from-string carried.items ] [ [] ] ; for if population file does not have carried.items
      
      set group-transfers-list []
      set matings-list []
      set conceptions-list []
      set cells-occupied []
      set infanticide-list []
      set decision.vectors []
      set my-environment no-turtles
      if ( stomach.size = 0 ) [ set stomach.size 0.1 ]
      if ( is.alive = 0 ) [ set is.alive true ] ; note it will import both alive and dead as alive if population file has is.dead instead of is.alive
      
      ;      set chromosome.I csv:from-string chromosome.I
      ;      set chromosome.II read-from-string chromosome.II
      ;ask-anima1s-unlock-chromosomes
    ]
    
    ask anima1s [
      
      let updated-carried-items []
      foreach carried.items [ c ->
        set updated-carried-items lput one-of anima1s with [ meta-id = ( table:get id-memory c ) ] updated-carried-items
      ]
      set carried.items updated-carried-items
      
      if ( member? mother-identity table:keys id-memory ) [ 
        set mother-identity table:get id-memory mother-identity
      ]
      
      ;      let new-var read-from-string chromosome.II
      ;      print new-var
    ]
    
    ;ask anima1s [ if ((life.history = "gestatee" or life.history = "infant" ) and mother != nobody ) [ ask mother [ set carried.items lput myself carried.items ]] ]
    
    ask groups [
      
      let current-group-members group-members
      set meta-id random 9999999
      ask current-group-members [ set group.identity [meta-id] of myself ]
      
    ]
    
    set documentation-notes (word "Population file " population " imported. " documentation-notes )
    update-metafile "population" population
    output-print " Population import successful."
    
  ][ set population "" ]
  
end

to save-population
  clear-output
  output-print " ---------------------------------------------------------------------------"
  output-print (word " SAVE POPULATION : " population )
  output-print " ---------------------------------------------------------------------------"
  
  ifelse ( file-exists? (word "../data/" population ".csv") )
  [ 
    let answer user-yes-or-no? 
    (word "The population " population " already exists! "
      "Would you like to: [ YES ] overwrite the existing file with current population, "
      "[ NO ] save current population to a different randomly generated file name, "
      "or [ HALT ] forget the whole darn thing?" )
    ifelse ( answer ) [ file-delete (word "../data/" population ".csv") save-population ] [ set population generate-population-id save-population ]
    
  ][
    
    let selected-groups []
    
    let group-list ( list "breed" "meta-id"
      "color" "heading" "xcor" "ycor"
      "shape" "label" "label-color" "hidden?" "size" 
      "pen-size" "pen-mode" )
    
    let turtle-list (list "breed" "meta-id" "age"
      "color" "heading" "xcor" "ycor" "label" "label-color"
      "shape" "hidden?" "size" "pen-size" "pen-mode"
      "biological.sex" "life.history" "female.fertility" "energy.supply" 
      "group.identity" "is.alive" "alpha.signal" "beta.signal" "gamma.signal"
      "chromosome.I" "chromosome.II" "identity.I" "identity.II"
      "living.chance" "body.size" "body.shade" "stomach.size" "mutation.chance"
      "sex.ratio" "litter.size" "conception.chance"
      "day.perception.angle" "night.perception.angle" "audio.perception.angle"
      "day.perception.range" "night.perception.range" "audio.perception.range"
      "vocal.range" "alpha.chance" "beta.chance" "gamma.chance"
      "birthing.chance" "weaning.chance" "infancy.chance"
      "juvenility.chance" "adulthood.chance" "senescency.chance"
      "carried.items" "mother-identity" )
    
    ask anima1s [
      
      if ( not member? group.identity selected-groups ) [ set selected-groups lput group.identity selected-groups ]
      
      ; turtle variables can only be saved in string format
      set chromosome.I csv:to-string chromosome.I
      set chromosome.II csv:to-string chromosome.II
      
      let old-carried-items carried.items
      let new-carried-items []
      foreach carried.items [ itm ->
        set new-carried-items lput [meta-id] of itm new-carried-items ]
      set carried.items new-carried-items
      
      export-turtle-to (word "../data/" population ".csv") turtle-list 
      
      set chromosome.I csv:from-string chromosome.I
      set chromosome.II csv:from-string chromosome.II 
      set carried.items old-carried-items
    ]
    
    foreach selected-groups [ g ->
      ask one-of groups with [ meta-id = g ] [ export-turtle-to (word "../data/" population ".csv") group-list ]
    ]
    
    set documentation-notes (word "New population " population " saved. " documentation-notes )
    update-metafile "population" population
    output-print " Population successfully saved."
  ]
end

;----------------------------------------------------------------------------------------------
; GENOTYPE FILES
;----------------------------------------------------------------------------------------------

to-report generate-genotype-id
  report ( word "g" [meta-id] of one-of anima1s  )
end

to-report genotype-file-exists?
  report file-exists? ( word "../data/" genotype ".txt" )
end

to import-genotype
  clear-output
  output-print " ---------------------------------------------------------------------------"
  output-print (word " IMPORT GENOTYPE : " genotype )
  output-print " ---------------------------------------------------------------------------"
  
  ifelse genotype-file-exists? [  
    
    ask anima1s [
      
      set chromosome.I []
      set chromosome.II []
      
      file-open ( word "../data/" genotype ".txt" )
      let first-chromosome? true 
      while [ not file-at-end? ] [
        let row (csv:from-row file-read-line " ")
        (ifelse 
          ( row = [""] ) 
          [ set first-chromosome? false ]
          ( first-chromosome? ) 
          [ set chromosome.I lput row chromosome.I ]
          [ set chromosome.II lput row chromosome.II ])
      ]
      file-close
    ]
    
    set documentation-notes (word "Genotype " genotype " imported. " documentation-notes )
    update-metafile "genotype" genotype
    output-print " Genotype import successful."
    
  ] [ set genotype "" ]
  
end

to save-genotype
  clear-output
  output-print " ---------------------------------------------------------------------------"
  output-print (word " SAVE GENOTYPE : organism " meta-id )
  output-print " ---------------------------------------------------------------------------"
  (csv:to-file ( word "../data/" genotype ".txt" ) (sentence chromosome.I [[]] chromosome.II ) " ")
  set documentation-notes (word "New genotype " genotype " saved. " documentation-notes )
  update-metafile "genotype" genotype
  output-print " Genotype successfully saved."
end
