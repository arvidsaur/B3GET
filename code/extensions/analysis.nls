; ========================================================================================================= ;
; 
;                                                                                    
;   .d888888  888888ba   .d888888  dP        dP    dP .d88888b  dP .d88888b  
;  d8'    88  88    `8b d8'    88  88        Y8.  .8P 88.    "' 88 88.    "' 
;  88aaaaa88a 88     88 88aaaaa88a 88         Y8aa8P  `Y88888b. 88 `Y88888b. 
;  88     88  88     88 88     88  88           88          `8b 88       `8b 
;  88     88  88     88 88     88  88           88    d8'   .8P 88 d8'   .8P 
;  88     88  dP     dP 88     88  88888888P    dP     Y88888P  dP  Y88888P  
;                                                                          
;            
; Â© 2021 K N Crouse  
; ========================================================================================================= ;

to thesis-setup
  
  clear-all                                                    ; Delete all current settings in the simulation.
  reset-ticks                                                  ; Reset the timesteps to zero.
  
  set path-to-experiment "../results/thesis/"
  set genotype-language "sta2us"
  set output-results? true 
  set selection-on? false
  set plant-annual-cycle 1000
  set plant-daily-cycle 10
  set plant-seasonality 0.5
  set plant-quality 4
  set deterioration-rate -0.01
  
  set maximum-population-size 200
  set minimum-population-size 200
  
  ; final settings 
  set simulation-summary-ticks 25000 
  set simulation-scan-ticks 250 
  set group-scan-ticks 2000 
  set individual-scan-ticks 0 
  set view-scan-ticks 10000 
  set genotype-scan-ticks 10000
  set focal-follow-rate 1E-4
  set record-individuals true 
  set verification-rate 1E-5
  set record-world-ticks 100000
  set simulation-stop-at 100000
  
;  set simulation-summary-ticks 500 
;  set simulation-scan-ticks 250 
;  set group-scan-ticks 100
;  set individual-scan-ticks 0 
;  set view-scan-ticks 100
;  set genotype-scan-ticks 100
;  set focal-follow-rate 1E-3 
;  set record-individuals true 
;  set verification-rate 1E-5
;  set record-world-ticks 1000
;  set simulation-stop-at 1000
  
  if ( model-structure = 0 ) [ set model-structure [] ]
  
  ( ifelse
    ( first behaviorspace-experiment-name = "A" ) [  ]
    ( first behaviorspace-experiment-name = "B" ) [ set plant-annual-cycle 10000 set plant-daily-cycle 100 ]
    ( first behaviorspace-experiment-name = "C" ) [ set plant-annual-cycle 10000 ]
    ( first behaviorspace-experiment-name = "D" ) [ set plant-daily-cycle 100 ]
    ( first behaviorspace-experiment-name = "E" ) [ set plant-seasonality 0 ]
    ( first behaviorspace-experiment-name = "F" ) [ set plant-seasonality 1 ]
    ( first behaviorspace-experiment-name = "G" ) [ set plant-quality 2 ]
    ( first behaviorspace-experiment-name = "H" ) [ set plant-quality 6 ]
    ( first behaviorspace-experiment-name = "I" ) [ set deterioration-rate -0.001 ]
    ( first behaviorspace-experiment-name = "J" ) [ set model-structure lput "aspatial" model-structure ]
    ( first behaviorspace-experiment-name = "K" ) [ set model-structure lput "stork" model-structure ]
    ( first behaviorspace-experiment-name = "L" ) [ set model-structure lput "reaper" model-structure ]
    ( first behaviorspace-experiment-name = "M" ) [ 
      set model-structure lput "ideal-form" model-structure set model-structure lput "stork" model-structure ]
    ( first behaviorspace-experiment-name = "N" ) [ set model-structure lput "free-lunch" model-structure ]
    ( first behaviorspace-experiment-name = "O" ) [ set model-structure lput "no-evolution" model-structure ]
    ( first behaviorspace-experiment-name = "P" ) [ set model-structure lput "uninvadable" model-structure ]
    [  ] )
  
  ;setup-nine-runs
  setup-four-runs

  setup-parameters                                             ; Setup the global parameter settings.
  setup-patches                                                ; Initialize the plants for a new simulation.
  import-population                                            ; Create an initial population of indiviudals
  import-genotype                                              ; and their genotypes from user files.
  
  output-print (word                                           ; Once setup is complete, display the current
    " Simulation " simulation-id " "                           ; state of the new simulation.
    behaviorspace-run-number " end setup at "
    date-and-time )
  
end

to thesis-final
  simulation-summary
  if ( record-individuals ) [ ask anima1s with [ is.alive ] [ individual-summary ]]
end

to setup-four-runs
  
  if ( length behaviorspace-experiment-name = 4 ) [
    
    set plant-minimum-neighbors read-from-string ( item 1 behaviorspace-experiment-name )
    set plant-maximum-neighbors read-from-string ( item 2 behaviorspace-experiment-name )
    
    ( ifelse 
      ( population = "Chimpanzees" ) [
        set genotype "chimpanzees" ]
      ( population = "Geladas")[
        set genotype "geladas" ]
      ( population = "Hamadryas" )[
        set genotype "hamadryas" ]
      ( population = "Olives" )[
        set genotype "olives" ]
      [])
    
    set simulation-id ( word "s" 
      first behaviorspace-experiment-name 
      first population
      plant-minimum-neighbors 
      plant-maximum-neighbors 
      item 3 behaviorspace-experiment-name )]
  
end

to setup-nine-runs
  
  set plant-maximum-neighbors read-from-string last behaviorspace-experiment-name
  
  ( ifelse 
    ( item 1 behaviorspace-experiment-name = "C" ) [
      set population "Chimpanzees"
      set genotype "chimpanzees" ]
    ( item 1 behaviorspace-experiment-name = "G" )[
      set population "Geladas"
      set genotype "geladas" ]
    ( item 1 behaviorspace-experiment-name = "H" )[
      set population "Hamadryas"
      set genotype "hamadryas" ]
    ( item 1 behaviorspace-experiment-name = "O" )[
      set population "Olives"
      set genotype "olives" ]
    ( item 1 behaviorspace-experiment-name = "Q" ) [
      set population "Chimpanzees"
      set genotype "geladas" ]
    ( item 1 behaviorspace-experiment-name = "R" )[
      set population "Chimpanzees"
      set genotype "hamadryas" ]
    ( item 1 behaviorspace-experiment-name = "S" )[
      set population "Chimpanzees"
      set genotype "olives" ]
    ( item 1 behaviorspace-experiment-name = "T" )[
      set population "Geladas"
      set genotype "chimpanzees" ]
    ( item 1 behaviorspace-experiment-name = "U" ) [
      set population "Hamadryas"
      set genotype "chimpanzees" ]
    ( item 1 behaviorspace-experiment-name = "V" )[
      set population "Olives"
      set genotype "chimpanzees" ]
    [])
  
  ; give simulation-id specific configuration: sDO17B means
  ; simulation of WORLD-D, Baboons seed population,
  ; run B (instead of A), plant-minimum-neighbors = 1 and
  ; plant-maximum-neighbors = 7
  ifelse ( plant-minimum-neighbors < plant-maximum-neighbors ) [
    set simulation-id ( word "s" but-last behaviorspace-experiment-name plant-minimum-neighbors plant-maximum-neighbors "A" )
  ][
    let min-holder plant-minimum-neighbors
    let max-holder plant-maximum-neighbors
    set plant-minimum-neighbors max-holder - 1
    set plant-maximum-neighbors min-holder
    set simulation-id ( word "s" but-last behaviorspace-experiment-name plant-minimum-neighbors plant-maximum-neighbors "B" )
  ]
  
end

to set-results-settings
  
  set simulation-summary-ticks 10000     
  set simulation-scan-ticks 1000         
  set group-scan-ticks 1000                
  set individual-scan-ticks 0           
  set view-scan-ticks 1000                
  set genotype-scan-ticks 1000            
  set focal-follow-rate 1E-3               
  set record-individuals true            
  set verification-rate 1E-5             
  set record-world-ticks 0   
  
end

to generate-jobs
  
  let worlds [ "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" ]
  let min-neighbors [ 0 1 2 3 4 5 6 7 ]
  let max-neighbors [ 1 2 3 4 5 6 7 8 ]
  let A-or-B [ "A" "B" ]
  
  file-open ( word path-to-experiment "thesis.sh" )
  file-print "#!/bin/bash -l"
  
  foreach worlds [ w ->
    
    file-open ( word path-to-experiment "thesis.sh" )
    file-print ( word "./World-" w ".sh" )
    
    file-close
    
    file-open ( word path-to-experiment "World-" w ".sh" )
    file-print "#!/bin/bash -l"
    
    foreach min-neighbors [ n ->
      
      foreach max-neighbors [ x ->
        
        foreach A-or-B [ z ->
          
          if ( n < x ) [
            
            let name (word w n x z )
            
            file-open ( word path-to-experiment "World-" w ".sh" )
            file-print ( word "sbatch " name ".sh" )
            
            file-close
            
            file-open ( word path-to-experiment name ".sh" )
            
            file-print "#!/bin/bash -l"
            file-print "#SBATCH --time=96:00:00"
            file-print "#SBATCH --ntasks=24"
            file-print "#SBATCH --mem=60g"
            file-print "#SBATCH --mail-type=ALL"
            file-print "#SBATCH --mail-user=crou0048@umn.edu"
            file-print "export JAVA_HOME=/usr/java/jre1.8.0_101"
            file-print (word "/home/lehmanc/crou0048/Desktop/NetLogo\\ 6.2.0/netlogo-headless.sh --model /home/lehmanc/crou0048/Desktop/B3GET/code/B3GET.nlogo --setup-file thesis-experiments.xml --experiment " name " --threads 4")
            
            file-close
            
  ]]]]]
  
end

to generate-experiments
  
  file-open ( word path-to-experiment "thesis-experiments.xml" )
  
  file-print "<experiments>"
 
  let worlds [ "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" ]
  let min-neighbors [ 0 1 2 3 4 5 6 7 ]
  let max-neighbors [ 1 2 3 4 5 6 7 8 ]
  let A-or-B [ "A" "B" ]
  
  foreach worlds [ w ->
    
    foreach min-neighbors [ n ->
      
      foreach max-neighbors [ x ->
        
        foreach A-or-B [ z ->
          
          if ( n < x ) [
            
            let name (word w n x z )
            file-print ( word "  <experiment name=\"" name "\" repetitions=\"1\" runMetricsEveryStep=\"false\">" )
            file-print ( word "    <setup>thesis-setup</setup>" )
            file-print ( word "    <go>go</go>" )
            file-print ( word "    <final>thesis-final</final>" )
            file-print ( word "    <enumeratedValueSet variable=\"population\">" )
            file-print ( word "      <value value=\"&quot;Chimpanzees&quot;\"/>" )
            file-print ( word "      <value value=\"&quot;Geladas&quot;\"/>" )
            file-print ( word "      <value value=\"&quot;Hamadryas&quot;\"/>" )
            file-print ( word "      <value value=\"&quot;Olives&quot;\"/>" )
            file-print ( word "    </enumeratedValueSet>" )
            file-print ( word "  </experiment>" )
            
  ]]]]]
  
  file-print "</experiments>"
  file-close
  
end

to protopan-generate-experiments
  
  file-open ( word path-to-experiment "protopan.xml" )
  
  file-print "<experiments>"
 
  let plants [ "P" "H" ]
  let seasonality [ "S" "C" ]
  let quality [ 3 4 5 6 ]
  let A-D [ "A" "B" "C" "D" ]
  
  foreach plants [ p ->
    
    foreach seasonality [ s ->
      
      foreach A-D [ z ->
        
        let name ( word p s z )
        file-print ( word "  <experiment name=\"" name "\" repetitions=\"1\" runMetricsEveryStep=\"false\">" )
        file-print ( word "    <setup>protopan-setup</setup>" )
        file-print ( word "    <go>go</go>" )
        file-print ( word "    <final>protopan-final</final>" )
        file-print ( word "    <enumeratedValueSet variable=\"plant-quality\">" )
        file-print ( word "      <value value=\"5\"/>" )
        file-print ( word "      <value value=\"6\"/>" )
        file-print ( word "      <value value=\"7\"/>" )
        file-print ( word "      <value value=\"8\"/>" )
        file-print ( word "    </enumeratedValueSet>" )
        file-print ( word "  </experiment>" )
        
  ]]]
  
  file-print "</experiments>"
  file-close
  
end

to protopan-generate-jobs
  
  let plants [ "P" "H" ]
  let seasonality [ "S" "C" ]
  let quality [ 3 4 5 6 ]
  let A-D [ "A" "B" "C" "D" ]
  
  file-open ( word path-to-experiment "protopan.sh" )
  file-print "#!/bin/bash -l"
  
  foreach plants [ p ->
    
    foreach seasonality [ s ->
      
      foreach A-D [ z ->
        
        let name (word p s z )
        
        file-open ( word path-to-experiment "protopan.sh" )
        file-print ( word "sbatch -p max " name ".sh" )
        
        file-close
        
        file-open ( word path-to-experiment name ".sh" )
        
        file-print "#!/bin/bash -l"
        file-print "#SBATCH --time=30-0:00:00"
        file-print "#SBATCH --ntasks=24"
        file-print "#SBATCH --mem=60g"
        file-print "#SBATCH --mail-type=ALL"
        file-print "#SBATCH --mail-user=crou0048@umn.edu"
        file-print "export JAVA_HOME=/usr/java/jre1.8.0_101"
        file-print (word "/home/lehmanc/crou0048/Desktop/NetLogo\\ 6.2.0/netlogo-headless.sh --model /home/lehmanc/crou0048/Desktop/B3GET/code/B3GET.nlogo --setup-file protopan.xml --experiment " name " --threads 4")
        
        file-close
        
  ]]]
  
end

to protopan-setup
  
  clear-all                                                    ; Delete all current settings in the simulation.
  reset-ticks                                                  ; Reset the timesteps to zero.
  
  set path-to-experiment "../results/ProtoPan/"
  set genotype-language "sta2us"
  set output-results? true 
  set selection-on? false
  set plant-annual-cycle 1000
  set plant-daily-cycle 10
  ;set plant-seasonality 0.5
  ;set plant-quality 4
  set deterioration-rate -0.01

  ; final settings 
  set simulation-summary-ticks 100000 
  set simulation-scan-ticks 250 
  set group-scan-ticks 100000 
  set individual-scan-ticks 0 
  set view-scan-ticks 100000 
  set genotype-scan-ticks 10000
  set focal-follow-rate 1E-4
  set record-individuals true 
  set verification-rate 1E-5
  set record-world-ticks 1000000
  set simulation-stop-at 1000000
  
  set population "ProtoPan"
  set genotype "protopan"
  
  if ( model-structure = 0 ) [ set model-structure [] ]
 
 ; TO DO FOR PROTOPAN
  
  if ( first behaviorspace-experiment-name = "P" ) [ set plant-minimum-neighbors 4 set plant-maximum-neighbors 7 ]
  if ( first behaviorspace-experiment-name = "H" ) [ set plant-minimum-neighbors 0 set plant-maximum-neighbors 7 ]
  if ( item 1 behaviorspace-experiment-name = "S" ) [ set plant-seasonality 1 ]
  if ( item 1 behaviorspace-experiment-name = "C" ) [ set plant-seasonality 0 ]
  
  set simulation-id ( word 
    generate-simulation-id
    "-"
    item 0 behaviorspace-experiment-name 
    item 1 behaviorspace-experiment-name 
    plant-quality
    item 2 behaviorspace-experiment-name )
  
  setup-parameters                                             ; Setup the global parameter settings.
  setup-patches                                                ; Initialize the plants for a new simulation.
  import-population                                            ; Create an initial population of indiviudals
  import-genotype                                              ; and their genotypes from user files.
  
  output-print (word                                           ; Once setup is complete, display the current
    " Simulation " simulation-id " "                           ; state of the new simulation.
    behaviorspace-run-number " end setup at "
    date-and-time )
  
end

to protopan-final
  simulation-summary
  if ( record-individuals ) [ ask anima1s with [ is.alive ] [ individual-summary ]]
end


to protopan-BYTE-extraction
  
  let selected-byte-worlds [ 
    "wAC46A" "wAC46B" "wAC24A" "wAC24B" "wEC46A" "wEC46B" "wEC24A" "wEC24B"
    "wFC46A" "wFC46B" "wFC24A" "wFC24B" "wGC46A" "wGC46B" "wGC24A" "wGC24B" 
    "wHC46A" "wHC46B" "wHC24A" "wHC24B" ]
  
  foreach selected-byte-worlds [ w -> 
    
    let file-path ( word "../results/results-to-ignore/BYTE/b3get-output/" w "-100000.csv" )
    import-world file-path
    
    set path-to-experiment "../results/ProtoPan/"

    ask anima1s with [ is.alive = false and generation.number > ( max [generation.number] of anima1s - 3 ) and life.history = "adult" ] [
      fill-in-blank-data
      individual-summary
    ]
    
  ]
  
end

to fill-in-blank-data
  
  let target self
  
  foreach attack.from.history [ i ->
    
    let ego one-of anima1s with [ my.identity = i ]
    
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of ego = "male" and [group.identity] of ego = [group.identity] of target ) [
      set from.ingroup.male.attack.count from.ingroup.male.attack.count + 1 ]
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of ego = "male" and [group.identity] of ego != [group.identity] of target ) [
      set from.nongroup.male.attack.count from.nongroup.male.attack.count + 1 ]
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of ego = "female" and [group.identity] of ego = [group.identity] of target ) [
      set from.ingroup.female.attack.count from.ingroup.female.attack.count + 1 ]
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of ego = "female" and [group.identity] of ego != [group.identity] of target ) [
      set from.nongroup.female.attack.count from.nongroup.female.attack.count + 1 ]
    
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of target = "male" and [group.identity] of ego = [group.identity] of target ) [
      ask target [ set to.ingroup.male.attack.count to.ingroup.male.attack.count + 1 ]]
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of target = "male" and [group.identity] of ego != [group.identity] of target ) [
      ask target [ set to.nongroup.male.attack.count to.nongroup.male.attack.count + 1]]
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of target = "female" and [group.identity] of ego = [group.identity] of target ) [
      ask target [ set to.ingroup.female.attack.count to.ingroup.female.attack.count + 1 ]]
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of target = "female" and [group.identity] of ego != [group.identity] of target ) [
      ask target [ set to.nongroup.female.attack.count to.nongroup.female.attack.count + 1]]
    
  ]
  
  foreach help.from.history [ j ->
    
    let ego one-of anima1s with [ my.identity = j ]
    
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of ego = "male" and [group.identity] of ego = [group.identity] of target ) [
      set from.ingroup.male.help.count from.ingroup.male.help.count + 1 ]
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of ego = "male" and [group.identity] of ego != [group.identity] of target ) [
      set from.nongroup.male.help.count from.nongroup.male.help.count + 1 ]
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of ego = "female" and [group.identity] of ego = [group.identity] of target ) [
      set from.ingroup.female.help.count from.ingroup.female.help.count + 1 ]
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of ego = "female" and [group.identity] of ego != [group.identity] of target ) [
      set from.nongroup.female.help.count from.nongroup.female.help.count + 1 ]
    
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of target = "male" and [group.identity] of ego = [group.identity] of target ) [
      ask target [ set to.ingroup.male.help.count to.ingroup.male.help.count + 1 ]]
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of target = "male" and [group.identity] of ego != [group.identity] of target ) [
      ask target [ set to.nongroup.male.help.count to.nongroup.male.help.count + 1 ]]
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of target = "female" and [group.identity] of ego = [group.identity] of target ) [
      ask target [ set to.ingroup.female.help.count to.ingroup.female.help.count + 1 ]]
    if ( [life.history] of ego = "adult" and [life.history] of target = "adult" and [biological.sex] of target = "female" and [group.identity] of ego != [group.identity] of target ) [
      ask target [ set to.nongroup.female.help.count to.nongroup.female.help.count + 1 ]]
    
  ]
  
end
