
;--------------------------------------------------------------------------------------------------------------------
;
;   oo            dP                     .8888b
;                 88                     88   "
;   dP 88d888b. d8888P .d8888b. 88d888b. 88aaa  .d8888b. .d8888b. .d8888b.
;   88 88'  `88   88   88ooood8 88'  `88 88     88'  `88 88'  `"" 88ooood8
;   88 88    88   88   88.  ... 88       88     88.  .88 88.  ... 88.  ...
;   dP dP    dP   dP   `88888P' dP       dP     `88888P8 `88888P' `88888P'
;
; © 2020 K N Crouse
;--------------------------------------------------------------------------------------------------------------------

to setup-button
  if ( simulation-id != 0 and ticks > 100000 ) [ record-world ]
  setup
end

to go-button
  ifelse ( simulation-id != 0 )
  [ go ]
  [ let user-setup-response false
    set user-setup-response user-yes-or-no? "Would you like to start a new simulation?"
    ifelse ( user-setup-response ) [ setup ] [ stop ] ]
end

to save-button
  if ( simulation-id = 0 ) [ set simulation-id generate-simulation-id ]
  update-metafile "simulation" simulation-id
end

to reset-population-button
  set population generate-population-id
end

to export-population-button
  if ( any? anima1s ) [ save-population ]
end

to import-population-button
  import-population
end

to reset-genotype-button
  set genotype generate-genotype-id
end

to export-genotype-button
  if ( subject != nobody ) [ ask one-of anima1s with [ subject = self ] [ save-genotype ]]
end

to import-genotype-button
  import-genotype
end

;-----------------------------------------------------------------------------
;                                                                dP          
;                                                                88          
; .d8888b. .d8888b. 88d8b.d8b. 88d8b.d8b. .d8888b. 88d888b. .d888b88 .d8888b. 
; 88'  `"" 88'  `88 88'`88'`88 88'`88'`88 88'  `88 88'  `88 88'  `88 Y8ooooo. 
; 88.  ... 88.  .88 88  88  88 88  88  88 88.  .88 88    88 88.  .88       88 
; `88888P' `88888P' dP  dP  dP dP  dP  dP `88888P8 dP    dP `88888P8 `88888P' 
;                                                                            
;-----------------------------------------------------------------------------                                                                          

to command
  
  if ( simulation-id != 0 ) [ ; commands only work when a simulation is active
    
    clear-output
    
    (ifelse 
      ( useful-commands = "help-me" ) [ set selected-display "" help-me ]
      ( useful-commands = "meta-report" ) [ set selected-display "" meta-report ]
      
      ( useful-commands = "parameter-settings" ) [ set selected-display "" ]
      ( useful-commands = "default-settings" ) [ set selected-display "" default-settings ]
      ( useful-commands = "model-structure" ) [ set selected-display "" set-model-structure ]
      ( useful-commands = "-- aspatial" ) [ set selected-display "" set-model-structure ]
      ( useful-commands = "-- free-lunch" ) [ set selected-display "" set-model-structure ]
      ( useful-commands = "-- ideal-form" ) [ set selected-display "" set-model-structure ]
      ( useful-commands = "-- no-evolution" ) [ set selected-display "" set-model-structure ]
      ( useful-commands = "-- no-plants" ) [ set selected-display "" set-model-structure  ]
      ( useful-commands = "-- reaper" ) [ set selected-display "" set-model-structure ]
      ( useful-commands = "-- show-fertility" ) [ set selected-display "" set-model-structure ]
      ( useful-commands = "-- stork" ) [ set selected-display "" set-model-structure ]
      ( useful-commands = "-- uninvadable" ) [ set selected-display "" set-model-structure ]
      ( useful-commands = "clear-population" ) [ set selected-display "" clear-population ]
      ( useful-commands = "new-population" ) [ set selected-display ""   ]      
      ( useful-commands = "reset-plants" ) [ set selected-display ""  output-reset-plants ]
      ( useful-commands = "save-simulation" ) [ set selected-display ""  ]
      
      ( useful-commands = "dynamic-check" ) [ set selected-display "" dynamic-verification ]
      ( useful-commands = "-- true" ) [ set selected-display "" dynamic-verification ]
      ( useful-commands = "-- false" ) [ set selected-display "" dynamic-verification ]
      ( useful-commands = "runtime-check" ) [ set selected-display "" runtime-verification ]
      ( useful-commands = "visual-check" ) [ set selected-display "" visual-verification ]
      ( useful-commands = "-- dine-and-dash" ) [ set selected-display "" visual-verification ]
      ( useful-commands = "-- life-history-channel" ) [ set selected-display "" visual-verification ]
      ( useful-commands = "-- musical-pairs" ) [ set selected-display "" visual-verification ]
      ( useful-commands = "-- night-and-day" ) [ set selected-display "" visual-verification ]
      ( useful-commands = "-- popularity-context" ) [ set selected-display "" visual-verification ]
      ( useful-commands = "-- speed-mating" ) [ set selected-display "" visual-verification ]
      ( useful-commands = "-- square-dance" ) [ set selected-display "" visual-verification ]
      ( useful-commands = "-- supply-and-demand" ) [ set selected-display "" visual-verification ]
      
      ( useful-commands = "age-in-timesteps" ) [ set selected-display "age" display-results ]
      ( useful-commands = "decisions" ) [ set selected-display "decisions" display-results  ]
      ( useful-commands = "actions" ) [ set selected-display "actions" display-results  ]
      ( useful-commands = "generations" ) [ set selected-display "generations" display-results  ]
      ( useful-commands = "life-history" ) [ set selected-display "life-history" display-results  ]
      ( useful-commands = "birthing" ) [ set selected-display "birthing" display-results  ]
      ( useful-commands = "weaning" ) [ set selected-display "weaning" display-results  ]
      ( useful-commands = "matings" ) [ set selected-display "matings" display-results  ]
      ( useful-commands = "mating-partners" ) [ set selected-display "mating-partners" display-results  ]
      ( useful-commands = "conceptions" ) [ set selected-display "conceptions" display-results  ]
      ( useful-commands = "infanticide" ) [ set selected-display "infanticide" display-results  ]
      ( useful-commands = "group-transfers" ) [ set selected-display "group-transfers" display-results  ]
      ( useful-commands = "travel-distance" ) [ set selected-display "travel-distance" display-results  ]
      ( useful-commands = "phenotype" ) [ set selected-display "phenotype" display-results  ]
      ( useful-commands = "genotype" ) [ set selected-display "genotype" display-results  ]
      ( useful-commands = "groups" ) [ set selected-display "groups" display-results  ]
      ( useful-commands = "lotka-volterra" ) [ set selected-display "lotka-volterra" display-results  ]
      
      [])
    
  ]
end

to help-me
  
  output-header " HELP ME: a user guide for commands"
  output-print " Select a command option from the useful-commands dropdown menu and"
  output-print " click ▷ to activate the command. A description of each command is listed "
  output-print " below. "
  output-print ""
  output-print " > SIMULATION"
  output-print ""
  output-print "  meta-report : prints a summary of user activities"
  output-print "  dynamic-verify-code : prints a summary of verification code checks"
  output-print "  visual-verify-code : prints a summary of verification code checks"
  output-print "  check-runtime : prints a summary of simulation operations"    
  output-print "  simulation-report : prints a summary of current simulation"
  ;output-print "  genotype-reader : set the genotype file format of simulation"
  output-print "  model-structure [ ] : set the model structure for the simulation"
  output-print ""
  output-print " > WORLD"
  output-print ""
  output-print "  setup-plants : replenishes the world with plants"
  output-print "  clear-population: removes all organisms from the world"
  ;output-print "  import-world [ file ] : import world file from experiment folder"
  output-print ""
  output-print " > DATA"
  output-print ""
  output-print "  view-genotype : prints the genotype of an organism or population"
  output-print "  view-decisions : shows the decisions of an organism or population"
  output-print "  view-actions : shows the actions of an organism or population"
  output-print "  view-history : summarizes history of an organism or population"
  output-print "  view-status : shows current status of an organism or population"
  ;output-print "  add-allele [ code ] : add mutation to population"
  ;output-print "  delete-allele [ code ] : delete allele from everywhere in the population"
  output-print ""
  
end

to output-header [ header-title ]
  clear-output
  output-print " ---------------------------------------------------------------------------"
  output-print ( word " " header-title )
  output-print " ---------------------------------------------------------------------------"
end

;-----------------------------------------------------------------------------       
; CLEAR POPULATION
;-----------------------------------------------------------------------------   

to clear-population
  output-header " CLEAR POPULATION :   "
  ask anima1s [ die ]
  output-print " Population cleared."
end

;-----------------------------------------------------------------------------       
; DEFAULT SETTINGS
;-----------------------------------------------------------------------------   

to default-settings
  
  set path-to-experiment "../results/"
  set output-results? false
  set selection-on? false
  set observation-notes ""
  set plant-annual-cycle 1000
  set plant-daily-cycle 10
  set plant-seasonality 0.5
  set plant-quality 5.0
  set plant-minimum-neighbors 0
  set plant-maximum-neighbors 8
  set population "Hamadryas"
  set genotype "hamadryas"
  ; plot
  ; output

end

;-----------------------------------------------------------------------------       
; META REPORT
;-----------------------------------------------------------------------------       

to meta-report
  output-header (word "META REPORT :  "  simulation-id )
  
  let metafile but-first csv:from-file "../data/metafile.csv"
  let how-many-rows length metafile
  let up-to-40-rows ifelse-value ( how-many-rows > 40 ) [ sublist metafile ( how-many-rows - 40 ) ( how-many-rows ) ] [ metafile ]
  
  foreach up-to-40-rows [ x -> 
    let data-string item 0 x
    let sim-id item 5 x
    let notes item 9 x 
    let how-many-chars length notes
    let up-to-35-chars ifelse-value ( how-many-chars > 35 ) [ substring notes ( how-many-chars - 35 ) ( how-many-chars ) ] [ notes ]
    output-print (word " " data-string "  " sim-id "  " up-to-35-chars ) ]
  
end

;-----------------------------------------------------------------------------       
; MODEL STRUCTURE
;-----------------------------------------------------------------------------    

to set-model-structure
  output-header ( word " MODEL STRUCTURE : " )
  let structure-list [ "aspatial" "free-lunch" "ideal-form" "no-evolution" "no-plants" "reaper" "show-fertility" "stork" "uninvadable" ]
  let structure-choice substring useful-commands 3 length useful-commands
  
  if ( member? structure-choice structure-list ) [
    ifelse ( not member? structure-choice model-structure ) 
    [ set model-structure lput structure-choice model-structure ]
    [ set model-structure remove structure-choice model-structure ]
  ]
  
  output-print " "
  output-print "  Current rules:"
  output-print " "
  foreach model-structure [ s -> output-print (word "  " s ) ]
  output-print " "
  output-print "  Unused rules:"
  output-print " "
  foreach structure-list [ l -> if ( not member? l model-structure ) [ output-print (word "  " l )]]
  
end

;-----------------------------------------------------------------------------       
; AGE HISTOGRAM
;-----------------------------------------------------------------------------    

to age-histogram
  clear-plot
  set-plot-pen-interval 100
  set-plot-x-range 0 max [ age.in.ticks ] of anima1s with [ is.alive ]
  histogram [ age.in.ticks ] of anima1s with [ is.alive ]
end

;-----------------------------------------------------------------------------       
; RESET PLANTS
;-----------------------------------------------------------------------------   

to output-reset-plants
  output-header " RESET PLANTS :   "
  setup-patches
  output-print " Plants reset."
end

;-----------------------------------------------------------------------------       
; SEED POPULATION
;-----------------------------------------------------------------------------   

to seed-population
  let population-choice substring useful-commands 3 length useful-commands
  set path-to-experiment "../data/"
  set population population-choice
  set genotype population-choice
  import-population
end

;-----------------------------------------------------------------------------       
; DYNAMIC CHECK
;-----------------------------------------------------------------------------     

to dynamic-verification
  let user-choice substring useful-commands 5 length useful-commands
  
  ( ifelse
    
    ( user-choice = "true" ) [
      output-header " CODE VERIFICATION : TRUE ONLY  "
      output-true-verification ]
    
    ( user-choice = "false" ) [
      output-header " CODE VERIFICATION : FALSE ONLY   "
      output-false-verification ]
    
    [ output-header " CODE VERIFICATION :  ALL  "
      output-all-verification ])
end

;-----------------------------------------------------------------------------       
; RUNTIME CHECK
;-----------------------------------------------------------------------------     

to runtime-verification
    output-header (word "CHECK RUNTIME : " how-many-ticks? " timesteps")
    profiler:reset
    profiler:start
    repeat how-many-ticks? [ go ]
    output-print profiler:report 
    profiler:stop
end

;-----------------------------------------------------------------------------       
; VISUAL CHECK
;-----------------------------------------------------------------------------     

to visual-verification
  let user-choice substring useful-commands 5 length useful-commands
  let visual-list [ "dine-and-dash" "life-history-channel" "musical-pairs" "night-and-day" "popularity-context" "speed-mating" "square-dance" "supply-and-demand" ]
  
  if ( member? user-choice visual-list ) [
    
    let visual-verification-file ( word "../data/visual-verification/" user-choice ".csv" )
    
    ifelse ( file-exists? visual-verification-file )
    
    [ set output-results? false
      set selection-on? false
      clear-turtles
      set path-to-experiment "../data/visual-verification/"
      set population user-choice 
      set genotype user-choice 
      import-population ]
    
    [ user-message "File not found." ]
    
  ]
end

;-----------------------------------------------------------------------------       
; VIEW ACTIONS
;-----------------------------------------------------------------------------   

to output-actions
  let anima1-to-inspect one-of anima1s with [ self = subject ]
  output-header (word " ACTIONS : " ifelse-value ( anima1-to-inspect = nobody ) [ "all individuals" ] [ (word "individual " [meta.id ] of anima1-to-inspect ) ] )
  
  ifelse ( anima1-to-inspect != nobody ) 
  
  [ ask anima1-to-inspect [
    foreach actions.completed [ action -> output-print action ]]]
  
  [ foreach recent-actions-completed [ action -> output-print-action action ]]
  
end

to output-print-action [ action ]
  output-print ( word " At " item 0 action " timesteps " item 1 action " performed " item 3 action " on " item 2 action " for " item 4 action " energy." )
end

;-----------------------------------------------------------------------------       
; VIEW DECISIONS
;-----------------------------------------------------------------------------   

to output-decisions
  let anima1-to-inspect one-of anima1s with [ self = subject ]
  output-header (word " DECISIONS : " ifelse-value ( anima1-to-inspect = nobody ) [ "all individuals" ] [ (word "individual " [meta.id ] of anima1-to-inspect ) ] )
  
  ifelse ( anima1-to-inspect != nobody ) 
  
  [ ask anima1-to-inspect [
    foreach decision.vectors [ decision ->
      output-print ( word " " decision )]]]
  
  [ foreach recent-decisions-made [ d -> 
      output-print (word "  " d ) ]]
end

;-----------------------------------------------------------------------------       
; VIEW ENVIRONMENT
;-----------------------------------------------------------------------------  















;-----------------------------------------------------------------------------       
; VIEW GENOTYPE
;-----------------------------------------------------------------------------   

to output-genotype
  let anima1-to-inspect one-of anima1s with [ self = subject ]
  output-header (word " GENOTYPE : " ifelse-value ( anima1-to-inspect = nobody ) [ "" ] [ (word "organism " [meta.id ] of anima1-to-inspect ) ] )
  ifelse ( anima1-to-inspect = nobody ) [
    ;set observation-notes (word "Organism " read-from-string command-input " not found.")
    ;output-print (word " Organism " read-from-string command-input " not found.")
  ][
    foreach [chromosome.I] of anima1-to-inspect [ a ->
      output-print (word " "reduce [ [itm nxt] -> (word itm " " nxt ) ] a ) ]
    output-print ""
    foreach [chromosome.II] of anima1-to-inspect [ a ->
      output-print (word " "reduce [ [itm nxt] -> (word itm " " nxt ) ] a ) ]
    ;set observation-notes (word "View genotype of organism " command-input ". " observation-notes )
  ]
end

;-----------------------------------------------------------------------------       
; VIEW HISTORY
;-----------------------------------------------------------------------------   

to output-history
  let anima1-to-inspect one-of anima1s with [ self = subject ]
  output-header (word " HISTORY : " ifelse-value ( anima1-to-inspect = nobody ) [ "all individuals" ] [ (word "individual " [meta.id ] of anima1-to-inspect ) ] )
  
  output-print ( word " Total energy gained: "
    ifelse-value ( anima1-to-inspect != nobody ) 
    [ [ precision total.energy.gains 2 ] of subject ] 
    [ ( word precision ( sum [ total.energy.gains ] of anima1s with [ biological.sex = "female"] ) 2 " (females) " precision ( sum [ total.energy.gains ] of anima1s with [ biological.sex = "male"] ) 2 " (males) " ) ] )
  
  output-print ( word " Total energy cost: "
    ifelse-value ( anima1-to-inspect != nobody ) 
    [ [ precision total.energy.cost 2 ] of subject ] 
    [ ( word precision ( sum [ total.energy.cost ] of anima1s with [ biological.sex = "female"] ) 2 " (females) " precision ( sum [ total.energy.cost ] of anima1s with [ biological.sex = "male"]) 2 " (males) " ) ] )
  
  output-print ( word " Total energy gained by foraging: "
    ifelse-value ( anima1-to-inspect != nobody ) 
    [ [ precision foraging.gains 2 ] of subject ] 
    [ ( word precision ( sum [ foraging.gains ] of anima1s with [ biological.sex = "female"] ) 2 " (females) " precision ( sum [ foraging.gains ] of anima1s with [ biological.sex = "male"]) 2 " (males) " ) ] )
  
  output-print ( word " Number of helpful behaviors: "
    ifelse-value ( anima1-to-inspect != nobody ) 
    [ [ length aid.history ] of subject ] 
    [ ( word sum [ length aid.history ] of anima1s with [ biological.sex = "female"] " (females) " sum [ length aid.history ] of anima1s with [ biological.sex = "male"] " (males) " ) ] )
  
  output-print ( word " Number of aggressive behaviors: "
    ifelse-value ( anima1-to-inspect != nobody ) 
    [ [ length harm.history ] of subject ] 
    [ ( word sum [ length harm.history ] of anima1s with [ biological.sex = "female"] " (females) " sum [ length harm.history ] of anima1s with [ biological.sex = "male"] " (males) " ) ] )
  
  output-print ( word " Number of infanticides: "
    ifelse-value ( anima1-to-inspect != nobody ) 
    [ [ length infanticide.history ] of subject ] 
    [ ( word sum [ length infanticide.history ] of anima1s with [ biological.sex = "female"] " (females) " sum [ length infanticide.history ] of anima1s with [ biological.sex = "male"] " (males) " ) ] )
  
  output-print ( word " Number of copulations: "
    ifelse-value ( anima1-to-inspect != nobody ) 
    [ [ length copulations.history ] of subject ] 
    [ ( word sum [ length copulations.history ] of anima1s with [ biological.sex = "female"] " (females) " sum [ length copulations.history ] of anima1s with [ biological.sex = "male"] " (males) " ) ] )
  
  output-print ( word " Number of conceptions: "
    ifelse-value ( anima1-to-inspect != nobody ) 
    [ [ length conceptions.history ] of subject ] 
    [ ( word sum [ length conceptions.history ] of anima1s with [ biological.sex = "female"] " (females) " sum [ length conceptions.history ] of anima1s with [ biological.sex = "male"] " (males) " ) ] )
  
  output-print ( word " Number of group transfers: "
    ifelse-value ( anima1-to-inspect != nobody ) 
    [ [ length group.transfers.history ] of subject ] 
    [ ( word sum [ length group.transfers.history ] of anima1s with [ biological.sex = "female"] " (females) " sum [ length group.transfers.history ] of anima1s with [ biological.sex = "male"] " (males) " ) ] )
  
end

;-----------------------------------------------------------------------------       
; VIEW STATUS
;-----------------------------------------------------------------------------   

to output-status
  let anima1-to-inspect one-of anima1s with [ self = subject ]
  output-header (word " STATUS : " ifelse-value ( anima1-to-inspect = nobody ) [ "all individuals" ] [ (word "individual " [ meta.id ] of anima1-to-inspect ) ] )
  
  output-print ( word " Number of individuals: " count anima1s )
  output-print ( word " Number of females: " count anima1s with [ biological.sex = "female" ] )
  output-print ( word " Number of males: " count anima1s with [ biological.sex = "male" ] )
  
  let group-list []
  let group-size-list []
  let females-in-group []
  let males-in-group []
  let juveniles-in-group []
  let infants-in-group []
  let gestatees-in-group []
  
  ask anima1s [ if ( not member? group.identity group-list ) [ set group-list lput group.identity group-list ]]
  foreach group-list [ g -> 
    set group-size-list lput ( count anima1s with [ group.identity = g ] ) group-size-list 
    set females-in-group lput ( count anima1s with [ group.identity = g and biological.sex = "female" and life.history = "adult"] ) females-in-group 
    set males-in-group lput ( count anima1s with [ group.identity = g and biological.sex = "male" and life.history = "adult" ] ) males-in-group 
    set juveniles-in-group lput ( count anima1s with [ group.identity = g and life.history = "juvenile" ] ) juveniles-in-group
    set infants-in-group lput ( count anima1s with [ group.identity = g and life.history = "infant" ] ) infants-in-group
    set gestatees-in-group lput ( count anima1s with [ group.identity = g and life.history = "gestatee" ] ) gestatees-in-group
  ]
  
  output-print ( word " Number of groups: " length group-list )
  output-print ( word " Average group size: " precision mean group-size-list 2 )
  output-print ( word " Average number of adult females per group: " precision mean females-in-group 2 )
  output-print ( word " Average number of adult males per group: " precision mean males-in-group 2 )
  output-print ( word " Average number of juveniles per group: " precision mean juveniles-in-group 2 )
  output-print ( word " Average number of infants per group: " precision mean infants-in-group 2 )
  output-print ( word " Average number of gestatees per group: " precision mean gestatees-in-group 2 )
end

;-----------------------------------------------------------------------------   
;
;            dP            dP            
;            88            88            
;   88d888b. 88 .d8888b. d8888P .d8888b. 
;   88'  `88 88 88'  `88   88   Y8ooooo. 
;   88.  .88 88 88.  .88   88         88 
;   88Y888P' dP `88888P'   dP   `88888P' 
;   88                                   
;   dP                                   
;-----------------------------------------------------------------------------   

to display-results 
  
  if ( simulation-id != 0 ) [ ; commands only work when a simulation is active
    
    clear-output
    
    (ifelse 
      ( selected-display = "age" and crosssectional---longitudinal---specialized = 1 ) [ plot-cosssectional-age  ]
      ( selected-display = "age" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-age ]
      ( selected-display = "age" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-age ]
      
      ( selected-display = "decisions" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-decisions ]
      ( selected-display = "decisions" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-decisions ]
      ( selected-display = "decisions" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-decisions ]
      
      ( selected-display = "actions" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-actions ]
      ( selected-display = "actions" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-actions ]
      ( selected-display = "actions" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-actions ]
      
      ( selected-display = "generations" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-columns "generation.number" ]
      ( selected-display = "generations" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-generations ]
      ( selected-display = "generations" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-generations ]
      
      ( selected-display = "life-history" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-life-history ]
      ( selected-display = "life-history" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-life-history ]
      ( selected-display = "life-history" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-life-history ]
      
      ( selected-display = "birthing" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-columns "ifelse-value ( mother.initiated.birth = true ) [ 1 ] [ 0 ]" ]
      ( selected-display = "birthing" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-birthing ]
      ( selected-display = "birthing" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-birthing ]
      
      ( selected-display = "weaning" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-columns "ifelse-value ( mother.initiated.weaning = true ) [ 1 ] [ 0 ]"  ]
      ( selected-display = "weaning" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-weaning ]
      ( selected-display = "weaning" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-weaning ]
      
      ( selected-display = "matings" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-columns "length copulations.history"  ]
      ( selected-display = "matings" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-matings ]
      ( selected-display = "matings" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-matings ]
      
      ( selected-display = "mating-partners" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-columns "length remove-duplicates copulations.history"  ]
      ( selected-display = "mating-partners" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-mating-partners ]
      ( selected-display = "mating-partners" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-mating-partners ]
      
      ( selected-display = "conceptions" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-columns "length conceptions.history"  ]
      ( selected-display = "conceptions" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-conceptions ]
      ( selected-display = "conceptions" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-conceptions ]
      
      ( selected-display = "infanticide" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-columns "length infanticide.history"  ]
      ( selected-display = "infanticide" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-infanticide ]
      ( selected-display = "infanticide" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-infanticide ]
      
      ( selected-display = "group-transfers" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-columns "length group.transfers.history"  ]
      ( selected-display = "group-transfers" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-group-transfers ]
      ( selected-display = "group-transfers" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-group-transfers ]
      
      ( selected-display = "travel-distance" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-columns "distance.traveled"  ]
      ( selected-display = "travel-distance" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-travel-distance ]
      ( selected-display = "travel-distance" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-travel-distance ]
      
      ( selected-display = "phenotype" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-phenotype ]
      ( selected-display = "phenotype" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-phenotype ]
      ( selected-display = "phenotype" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-phenotype ]
      
      ( selected-display = "genotype" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-genotype ]
      ( selected-display = "genotype" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-genotype ]
      ( selected-display = "genotype" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-genotype ]
      
      ( selected-display = "groups" and crosssectional---longitudinal---specialized = 1 ) [ plot-crosssectional-groups ]
      ( selected-display = "groups" and crosssectional---longitudinal---specialized = 2 ) [ plot-longitudinal-groups ]
      ( selected-display = "groups" and crosssectional---longitudinal---specialized = 3 ) [ plot-specialized-groups ]
      
      ( selected-display = "lotka-volterra" ) [ plot-lotka-volterra ]
      
      [])   
  ]
  
end

;-----------------------------------------------------------------------------       
; CROSS-SECTIONAL PLOTS
;-----------------------------------------------------------------------------   

to plot-crosssectional-columns [ input ]
  let individual-list get-sorted-individuals                        ; get sorted list of living agents
  let plot-list []                                                  ; initialize list of values to be plotted
  foreach individual-list [ i ->     
    set plot-list lput ( [ get-column-list input ] of i ) plot-list ]
  plot-colored-histogram 1 plot-list life-history-color-list                   ; update plot based on plot list
end

to plot-colored-histogram [ column-interval plot-list color-list ]
  clear-all-plots
  set-current-plot "plot"
  set-plot-pen-interval 0.01
  set-plot-pen-mode 1
  
  let index 0
  foreach plot-list [ column ->
    let y-so-far 0
    let column-index 0
    foreach column [ c ->
      set y-so-far c
      let index-2 0
      repeat ( 70 * column-interval ) [
        set-plot-pen-color item column-index color-list
        plot-pen-down
        plotxy ( index + 0.1 + index-2 ) y-so-far
        set index-2 index-2 + 0.01
        plot-pen-up ]
      set column-index column-index + 1
    ]
    set index index + column-interval ]  
end

to-report get-column-list [ input-string ]
  let report-list []
  set report-list lput (ifelse-value ( life.history = "gestatee" and biological.sex = "female" ) [ run-result input-string ] [ 0 ]) report-list 
  set report-list lput (ifelse-value ( life.history = "gestatee" and biological.sex = "male" ) [ run-result input-string ] [ 0 ]) report-list
  set report-list lput (ifelse-value ( life.history = "infant" and biological.sex = "female" ) [ run-result input-string ] [ 0 ]) report-list
  set report-list lput (ifelse-value ( life.history = "infant" and biological.sex = "male" ) [ run-result input-string ] [ 0 ]) report-list
  set report-list lput (ifelse-value ( life.history = "juvenile" and biological.sex = "female" ) [ run-result input-string ] [ 0 ]) report-list
  set report-list lput (ifelse-value ( life.history = "juvenile" and biological.sex = "male" ) [ run-result input-string ] [ 0 ]) report-list
  set report-list lput (ifelse-value ( female.fertility = "cycling" and biological.sex = "female" ) [ run-result input-string ] [ 0 ]) report-list
  set report-list lput (ifelse-value ( female.fertility = "pregnant" and biological.sex = "female" ) [ run-result input-string ] [ 0 ]) report-list
  set report-list lput (ifelse-value ( female.fertility = "lactating" and biological.sex = "female" ) [ run-result input-string ] [ 0 ]) report-list
  set report-list lput (ifelse-value ( life.history = "adult" and biological.sex = "male" ) [ run-result input-string ] [ 0 ]) report-list
  report report-list
end

to-report life-history-color-list ; female gestatee, male gestatee, female infant, male infant, female juvenile, male juvenile, cycling female, pregnant female, lactating female, adult male
  report [ 65 55 46 43 26 23 135 125 115 95 15 ]
end

to-report get-sorted-individuals ; filter [ s -> first s != "t" ] ["hi" "there" "everyone"]
  let base-sort sort-on [meta.id] anima1s with [ is.alive ]
  let sex-sort ifelse-value ( sort--------female--------male--------off = 1 ) [ sort-by [ [i j ] -> [ biological.sex ] of i < [ biological.sex ] of j ] base-sort ] [ base-sort ]
  let life-history-sort ifelse-value ( sort--adult--juvenile--infant--gestatee--off = 1 )[ sort-by [ [ i j ] -> [ life-history-number ] of i < [ life-history-number ] of j ] sex-sort ] [ sex-sort ]
  let filter-by-life-history filter [ i -> ( sort--adult--juvenile--infant--gestatee--off = 1 ) or
    ( sort--adult--juvenile--infant--gestatee--off = 6 ) or
    ( sort--adult--juvenile--infant--gestatee--off = 2 and [life.history] of i = "adult" ) or 
    ( sort--adult--juvenile--infant--gestatee--off = 3 and [life.history] of i = "juvenile" ) or 
    ( sort--adult--juvenile--infant--gestatee--off = 4 and [life.history] of i = "infant" ) or 
    ( sort--adult--juvenile--infant--gestatee--off = 5 and [life.history] of i = "gestatee" ) ] life-history-sort
  let filter-by-sex filter [ i -> ( sort--------female--------male--------off = 1 ) or
    ( sort--------female--------male--------off = 4 ) or
    ( sort--------female--------male--------off = 2 and [biological.sex] of i = "female" ) or 
    ( sort--------female--------male--------off = 3 and [biological.sex] of i = "male" ) ] filter-by-life-history
  let final-sort filter-by-sex
  report final-sort
end

to-report life-history-number
  report (ifelse-value
    ( life.history = "adult" ) [ 1 ]
    ( life.history = "juvenile" ) [ 2 ]
    ( life.history = "infant" ) [ 3 ]
    ( life.history = "gestatee" ) [ 4 ]
    [ 5 ])
end

to-report get-life-history-filter
  report (ifelse-value
    ( sort--adult--juvenile--infant--gestatee--off = 5 )[ "Gestatee " ]
    ( sort--adult--juvenile--infant--gestatee--off = 4 )[ "Infant " ]
    ( sort--adult--juvenile--infant--gestatee--off = 3 )[ "Juvenile " ]
    ( sort--adult--juvenile--infant--gestatee--off = 2 )[ "Adult " ]
    [ "" ])    
end

to-report get-sex-filter
  report (ifelse-value
    ( sort--------female--------male--------off = 2 )[ "Female " ]
    ( sort--------female--------male--------off = 3 )[ "Male " ]
    [ "" ]) 
end

;-----------------------------------------------------------------------------       
; AGE
;-----------------------------------------------------------------------------   

to plot-cosssectional-age 
  plot-crosssectional-columns "age.in.ticks"
end

to output-cosssectional-age-plot
  output-header (word "PLOT: Current Age of " get-life-history-filter get-sex-filter "Individuals")
  output-print " x: individuals"
  output-print " y: current age in timesteps"
end

to plot-longitudinal-age 

end

to plot-specialized-age 
  
;  let max-age max [age.in.ticks] of anima1s with [is.alive]
;  let how-many-bars 20
;  let age-interval max-age / how-many-bars
;  let age-list []
;  let lower-age 0
;  let upper-age lower-age + age-interval
;  repeat how-many-bars [
;    let agent-count count anima1s with [ is.alive and age.in.ticks >= lower-age and age.in.ticks < upper-age ]
;    let subject-age any? anima1s with [ is.alive and subject = self and age.in.ticks >= lower-age and age.in.ticks < upper-age ]
;    set age-list lput ( list agent-count ifelse-value ( subject-age ) [ agent-count ][ 0 ] ) age-list
;    set lower-age lower-age + age-interval
;    set upper-age upper-age + age-interval ]
;  plot-colored-histogram age-interval age-list [ black red ]
  
end

;-----------------------------------------------------------------------------       
; DECISIONS
;-----------------------------------------------------------------------------   


to plot-crosssectional-decisions 
  let individual-list get-sorted-individuals                        ; get sorted list of living agents
  let plot-list []                                                  ; initialize list of values to be plotted
  
  let decisions-list [ 
    "living-chance" "body-size" "body-shade" 
    "day-perception" "night-perception" "visual-angle" "visual-range" 
    "conception-chance" "bite-capacity" "mutation-chance" "sex-ratio" "litter-size" 
    "turn-right" "turn-left" "go-forward" "set-heading" "set-heading-random" 
    "hide" "rest" 
    "yellow-signal" "red-signal" "blue-signal" 
    "check-infancy" "check-juvenility" "check-adulthood" 
    "check-birth" "check-weaning" 
    "move-toward" "move-away-from" "supply-to" "demand-from" "eat"
    "join" "leave" "recruit" "kick-out"
    "pick-up" "put-down" "cling-to" "squirm-from"
    "help" "hurt" "mate-with" ]
  
  let color-list [ 
    3 5 7 
    12 14 16 18
    23 25 27 
    33 37
    43 45 47 
    54 56
    64 67
    73 75 77
    82 85 87
    93 96 
    103 107 
    123 125 127
    132 134 136 138
    142 144 146 148
    153 155 157 ]
  
  foreach individual-list [ i ->                                    ; loop through each individual
    
    foreach decisions-list [ d ->
      
      
    
;    ifelse ( subject = i )                                          ; check if individual is subject
;    [ set plot-list lput (list 0 [age.in.ticks] of i ) plot-list ]  ; if yes, then update plot list for red columm
;    [ set plot-list lput (list [age.in.ticks] of i 0 ) plot-list ]] ; if no, then update plot list for black column
  ]]
  plot-colored-histogram 1 plot-list color-list                      ; update plot based on plot list
end

to plot-longitudinal-decisions 
  ; this cannot be done unless there is some longitudinal record stored within each agent
end

to plot-specialized-decisions 
end

to plot-crosssectional-actions 
end

to plot-longitudinal-actions 
  ; this cannot be done unless there is some longitudinal record stored within each agent
end

to plot-specialized-actions 
end
  
to plot-crosssectional-generations 
end
  
to plot-longitudinal-generations 
  let max-generation max [generation.number] of anima1s with [is.alive]
  let plot-list []
  let generation 0
  repeat ( max-generation + 1 ) [
    let agent-count count anima1s with [ is.alive and generation.number = generation ]
    set plot-list lput ( list agent-count ) plot-list
    set generation generation + 1
  ]
  plot-colored-histogram 1 plot-list [ black ]
end

to plot-specialized-generations 
end
  
to plot-crosssectional-life-history 
end

to plot-longitudinal-life-history 
end

to plot-specialized-life-history 
end
  
to plot-crosssectional-birthing end
to plot-longitudinal-birthing end
to plot-specialized-birthing end
  
to plot-crosssectional-weaning end
to plot-longitudinal-weaning end
to plot-specialized-weaning end
  
to plot-crosssectional-matings end
to plot-longitudinal-matings end
to plot-specialized-matings end
  
to plot-crosssectional-mating-partners end
to plot-longitudinal-mating-partners end
to plot-specialized-mating-partners end
  
to plot-crosssectional-conceptions end
to plot-longitudinal-conceptions end
to plot-specialized-conceptions end
  
to plot-crosssectional-infanticide end
to plot-longitudinal-infanticide end
to plot-specialized-infanticide end
  
to plot-crosssectional-group-transfers end
to plot-longitudinal-group-transfers end
to plot-specialized-group-transfers end
  
to plot-crosssectional-travel-distance end
to plot-longitudinal-travel-distance end
to plot-specialized-travel-distance end
  
to plot-crosssectional-phenotype end
to plot-longitudinal-phenotype end
to plot-specialized-phenotype end
  
to plot-crosssectional-genotype end
to plot-longitudinal-genotype end
to plot-specialized-genotype end
  
  ;-----------------------------------------------------------------------------       
  ; GROUPS
  ;-----------------------------------------------------------------------------   
  
to plot-crosssectional-groups end
to plot-longitudinal-groups end
to plot-specialized-groups 
  let current-groups sort remove-duplicates [group.identity] of anima1s with [ is.alive ]
  let group-composition-list []
  
  foreach current-groups [ group ->
    let this-group-composition []
    let y-so-far count anima1s with [ is.alive and group.identity = group ]
    foreach [ "gestatee" "infant" "juvenile" "adult" ] [ life-stage ->      
      foreach [ "female" "male" ] [ sex ->
        set this-group-composition lput y-so-far this-group-composition
        set y-so-far y-so-far - count anima1s with [ is.alive and group.identity = group and life.history = life-stage and biological.sex = sex ]
      ]
    ]
    set group-composition-list lput this-group-composition group-composition-list
  ] 
  plot-colored-histogram 1 group-composition-list [ red orange yellow green turquoise sky blue magenta ]
end
  
to plot-lotka-volterra 
  clear-all-plots
  set-plot-pen-mode 0
  set-plot-pen-color green
  let index 0
  foreach plant-abundance-record [ p ->
    plotxy ( 100 * index ) ( ln p )
    set index index + 1 ]
  plot-pen-up
  set index 0
  set-plot-pen-color brown
  foreach population-size-record [ s ->
    plotxy ( 100 * index ) ( ln s )
    plot-pen-down
    set index index + 1 ]
end





  
;
;to output-genotype-reader [ input ]
;  output-header ( word " GENOTYPE READER : " )
;
;;  let genotype-list [ "sta7us" "g8tes" ] ; g8tes not working
;;  ifelse ( member? input genotype-list ) [
;;    ifelse ( genotype-reader = input ) [
;;      set command-input one-of remove input genotype-list
;;      output-print ( word " The genotype reader is currently set to \"" genotype-reader "\"." ) 
;;      output-print ( word " Would you like to set the genotype reader to \"" command-input "\"?" ) 
;;      output-print ( word " If so click ▷." ) 
;;    ][
;;      set genotype-reader input
;;      output-print ( word " The genotype reader is currently set to \"" genotype-reader "\"." ) 
;;    ]
;;  ][
;;    set command-input first genotype-list
;;    output-print ( word " The genotype reader is currently set to \"" genotype-reader "\"." ) 
;;    output-print ( word " Would you like to set the genotype reader to \"" command-input "\"?" ) 
;;    output-print ( word " If so click ▷." )]
;  
;end

;;-----------------------------------------------------------------------------       
;; SIMULATION REPORT
;;-----------------------------------------------------------------------------     
;
;to output-simulation-report
;  output-header ( word " SIMULATION REPORT : " )
;  output-print ( word "  simulation-id:  " simulation-id )
;  output-print ( word "  model-version:  " model-version )
;  output-print ( word "  model-structure:  " model-structure )
;  ;output-print ( word "  genotype-reader:  " genotype-reader )
;  output-print ( word "  deterioration-rate:  " deterioration-rate )
;  output-print ( word "  maximum-visual-range:  " maximum-visual-range )
;  output-print ( word "  base-litter-size:  " base-litter-size )
;end






























