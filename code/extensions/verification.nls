;-------------------------------------------------------------------------------------------------
; 
;                             oo .8888b oo                     dP   oo                   
;                                88   "                        88                        
;  dP   .dP .d8888b. 88d888b. dP 88aaa  dP .d8888b. .d8888b. d8888P dP .d8888b. 88d888b. 
;  88   d8' 88ooood8 88'  `88 88 88     88 88'  `"" 88'  `88   88   88 88'  `88 88'  `88 
;  88 .88'  88.  ... 88       88 88     88 88.  ... 88.  .88   88   88 88.  .88 88    88 
;  8888P'   `88888P' dP       dP dP     dP `88888P' `88888P8   dP   dP `88888P' dP    dP 
; 
; Â© 2020 K N Crouse  
;-------------------------------------------------------------------------------------------------
;
; This extension contains all functions related to verifying B3GET's code during simulations.   
;
;-------------------------------------------------------------------------------------------------


  
  ;-------------------------------------------------------------------------------------------------
  ; SPOT CHECK FUNCTIONS
  ;-------------------------------------------------------------------------------------------------
  
to reset-chromosomes
  ;  if ( mother != nobody and father != nobody ) [
  ;    ask mother [ 
  ;      set chromosome.I [ [ true "A" "B" "C" ] [ true "D" "E" "F" ] [ true "G" "H" "I" ] [ true "X" "Y" "Z" ] [ true "E" 0.1 0.2 0.3 ]] 
  ;      set chromosome.II [ [ true "A2" "B2" "C2" ] [ true "D2" "E2" "F2" ] [ true "G2" "H2" "I2" ] ] 
  ;    ]
  ;    ask father [ 
  ;      set chromosome.I [ [ true "J" "K" "L" ] [ true "M" "N" "O" ] [ true "P" "Q" "R" ] ] 
  ;      set chromosome.II [ [ true "J2" "K2" "L2" ] [ true "M2" "N2" "O2" ] [ true "P2" "Q2" "R2" ]  ] 
  ;    ]
  ;    setup-chromosomes-from mother father
  ;  ]
end

;---------------------------------------------------------------------------------------------------------------------------------
; VERIFICATION TAPE:
;
; Generates a "tape" of all verification measurements that looks something like this:
;
; DATE-AND-TIME  MODEL-VERSION  SIMULATION-ID  TICKS  VERIFICATION_1  VERIFICATION_2  VERIFICATION_3  VERIFICATION_4   ....
;  - - - - -      - - - - - -    - - - - - -    - -     function_1      function_2      function_3      function_4     ....
;  - - - - -      - - - - - -    - - - - - -    - -      runtime          dynamic-check         static           visual      ....
; date-and-time  model-version  simulation-id  ticks   true / false    true / false    true / false    true / false    ....
; date-and-time  model-version  simulation-id  ticks   true / false    true / false    true / false    true / false    ....
; date-and-time  model-version  simulation-id  ticks   true / false    true / false    true / false    true / false    ....
; date-and-time  model-version  simulation-id  ticks   true / false    true / false    true / false    true / false    ....
;
;---------------------------------------------------------------------------------------------------------------------------------

;---------------------------------------------------------------------------------------------------------------------------------
; GUI OUPUT FUNCTIONS 
;---------------------------------------------------------------------------------------------------------------------------------

to-report go-runtime
  profiler:reset
  profiler:start
  repeat 1 [ go ]
  report profiler:inclusive-time "go"
end

to output-all-verification
  clear-output
  let new-tape generate-verification-tape
  let length-of-tape length first new-tape
  let i 0
  
  while [ i < length-of-tape ]
  [
    (ifelse 
      ( i < 4 ) [output-print (word " "  item i item 0 new-tape " " item i item 3 new-tape ) if ( i = 3 ) [ output-print ( "     " ) ] ]
      [ output-print (word " " (i - 3) ". " item i item 3 new-tape "  " item i item 2 new-tape "  " item i item 1 new-tape "  :  " item i item 0 new-tape )])
    set i i + 1
  ]  
end

to output-true-verification
  clear-output
  let new-tape generate-verification-tape
  let length-of-tape length first new-tape
  let i 0
  let j 0
  while [ i < length-of-tape ]
  [
    (ifelse 
      ( i < 4 ) [output-print (word " "  item i item 0 new-tape " " item i item 3 new-tape ) if ( i = 3 ) [ output-print ( "     " ) ] ]
      [ if (item i item 3 new-tape = true ) [ set j j + 1 output-print (word " " j ". " item i item 3 new-tape " " item i item 2 new-tape " " item i item 1 new-tape " : " item i item 0 new-tape ) ]])
    set i i + 1
  ]
end

to output-false-verification
  clear-output
  let new-tape generate-verification-tape
  let length-of-tape length first new-tape
  let i 0
  let j 0
  while [ i < length-of-tape ]
  [
    (ifelse 
      ( i < 4 ) [output-print (word " " item i item 0 new-tape " " item i item 3 new-tape ) if ( i = 3 ) [ output-print ( "     " ) ] ]
      [ if (item i item 3 new-tape = false) [ set j j + 1 output-print (word " " j ". " item i item 3 new-tape " " item i item 2 new-tape " " item i item 1 new-tape " : " item i item 0 new-tape ) ]])
    set i i + 1
  ]
end

to-report anima1z report anima1s with [ is.alive ] end

;--------------------------------------------------------------------------------------------------------------------------------------------------
; GENERATE TAPE
;--------------------------------------------------------------------------------------------------------------------------------------------------

to-report generate-verification-tape
  
  profiler:reset
  profiler:start
  
  let count-alive-agents 0
  let count-all-agents 0
  
  repeat how-many-ticks? [ 
    
    set count-alive-agents count-alive-agents + count anima1z with [ is.alive ]
    set count-all-agents count-all-agents + count anima1z
    
    go ]
  
  let header (list "date-and-time" "model-version" "simulation-id" "ticks" )
  let verification (list "" "" "" "" )
  let function (list "" "" "" "" )
  let boolean (list date-and-time model-version simulation-id ticks ) 
  
  ;--------------------------------------------------------------------------------------------------------------------
  ; GO
  ;--------------------------------------------------------------------------------------------------------------------
  
  set header lput "The runtime of go subroutine is less than 10 milliseconds per timestep per agent?" header
  set verification lput "runtime-boundaries" verification
  set function lput "go" function
  set boolean lput ( ifelse-value ( count-alive-agents = 0 ) [ false ] [ ( profiler:inclusive-time "go" / count-alive-agents ) < 10 ] ) boolean
  
  set header lput "The runtime of go subroutine is less than 500 milliseconds per timestep?" header
  set verification lput "runtime-boundaries" verification
  set function lput "go" function
  set boolean lput ( ( profiler:inclusive-time "go" / how-many-ticks? ) < 500 ) boolean
  
  set header lput "All agents are designated as one of the life history options?" header
  set verification lput "dynamic-check" verification
  set function lput "go" function
  set boolean lput ( not any? anima1z with [ life.history != "gestatee" and life.history != "infant" and life.history != "juvenile" and life.history != "adult" ] ) boolean
  
  ;--------------------------------------------------------------------------------------------------------------------
  ; --- MODEL STRUCTURE
  ;--------------------------------------------------------------------------------------------------------------------
  
  set header lput "An aspatial model-structure allows agents to see beyond their perception abilities?" header 
  set verification lput "dynamic-check" verification 
  set function lput "go" function
  set boolean lput ( ifelse-value ( model-structure = "aspatial" ) 
    [ any? anima1z with [ max [distance myself] of my.environment > visual.range ] ] 
    [ true ] ) boolean
  
  set header lput "Agents not in the same location can interact with each other in an aspatial model-structure?" header 
  set verification lput "dynamic-check" verification 
  set function lput "go" function
  set boolean lput ( ifelse-value ( model-structure = "aspatial" ) [ any? anima1z with [ max [ distance myself ] of my.environment > 1 ] ] [ true ] ) boolean 
  
  set header lput "Agents can have a negative emergy supply in a free-lunch model-structure?" header 
  set verification lput "dynamic-check" verification 
  set function lput "go" function
  set boolean lput ( ifelse-value ( model-structure = "free-lunch" ) [ any? anima1z with [ energy.supply < 0 ]] [ true ] ) boolean 
  
  set header lput "Agents cannot have a negative emergy supply if the model-structure is not free-lunch?" header 
  set verification lput "dynamic-check" verification
  set function lput "go" function
  set boolean lput ( ifelse-value ( model-structure != "free-lunch" ) [ not any? anima1z with [ energy.supply < 0 ]] [ true ] ) boolean 
  
  set header lput "Population size is equal to 100 individuals for reaper model structure?" header ; however, could be less than 100 if starting population has fewer than 100 individuals
  set verification lput "dynamic-check" verification 
  set function lput "go" function
  set boolean lput ( ifelse-value ( model-structure = "reaper" ) [ count anima1z with [ is.alive ] = 100 ] [ true ] ) boolean 
  
  set header lput "Population size is equal to 100 individuals for stork model structure?" header ; however, could be less than 100 if no males or females available in mating pool
  set verification lput "dynamic-check" verification 
  set function lput "go" function
  set boolean lput ( ifelse-value ( model-structure = "stork" ) [ count anima1z with [ is.alive ] = 100 ] [ true ] ) boolean 
  
  set header lput "There are no mating events signaled by a '!' in stork model structure?" header
  set verification lput "dynamic-check" verification 
  set function lput "go" function
  set boolean lput ( ifelse-value ( model-structure = "stork" ) [ not any? anima1z with [ label = "!" ] ] [ true ] ) boolean 
  
  set header lput "An ideal-form model-structure has no standard deviation for body size in population?" header 
  set verification lput "dynamic-check" verification 
  set function lput "go" function
  set boolean lput ( ifelse-value ( model-structure = "ideal-form" ) [ standard-deviation [body.size] of anima1z = 0 ] [ true ] ) boolean 
  
  set header lput "All agents in the population have the same genotype in no-evolution model-structure?" header 
  set verification lput "dynamic-check" verification 
  set function lput "go" function
  set boolean lput ( ifelse-value ( model-structure = "no-evolution" ) [ false ] [ true ] ) boolean ; to do
  
  ;--------------------------------------------------------------------------------------------------------------------
  ; UPDATE-PATCHES
  ;--------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to update-patches same as length of timesteps for verification?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "update-patches" function
  set boolean lput ( profiler:calls "update-patches" = how-many-ticks? ) boolean   
  
  set header lput "No plants have an energy supply that exceeds their terminal energy?" header 
  set verification lput "dynamic-check" verification 
  set function lput "update-patches" function
  set boolean lput ( not any? patches with [ penergy.supply > pterminal.energy ] ) boolean   
  
  ;--------------------------------------------------------------------------------------------------------------------
  ; DETERIORATE
  ;--------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to deteriorate are the same as population size?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "deteriorate" function
  set boolean lput ( profiler:calls "deteriorate" = count-all-agents ) boolean
  
  ;--------------------------------------------------------------------------------------------------------------------
  ; CHECK-MORTALITY
  ;--------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to check-mortality are the same as population size?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "check-mortality" function
  set boolean lput ( profiler:calls "check-mortality" = count-all-agents ) boolean 
  
  ;--------------------------------------------------------------------------------------------------------------------
  ; UPDATE-APPEARANCE
  ;--------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to update-appearance are the same as population size?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "update-appearance" function
  set boolean lput ( profiler:calls "update-appearance" = count-all-agents ) boolean   
  
  set header lput "All agents have a size between 0 and 1?" header 
  set verification lput "dynamic-check" verification 
  set function lput "update-appearance" function
  set boolean lput ( not any? anima1z with [ size > 1 or size < 0 ] ) boolean  
  
  ;--------------------------------------------------------------------------------------------------------------------
  ; GET-SHAPE
  ;--------------------------------------------------------------------------------------------------------------------
  
  set header lput "All feamle agents are circle shaped?" header 
  set verification lput "dynamic-check" verification 
  set function lput "get-shape" function
  set boolean lput ( not any? anima1z with [ biological.sex = "female" and not member? "circle" shape ] ) boolean   
  
  set header lput "All male agents are triangle shaped?" header 
  set verification lput "dynamic-check" verification 
  set function lput "get-shape" function
  set boolean lput ( not any? anima1z with [ age.in.ticks > 0 and biological.sex = "male" and not member? "triangle" shape ] ) boolean   
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; CONSIDER-ENVIRONMENT
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Agent calls to consider-environment same number as agent count?" header
  set verification lput "runtime-boundaries" verification 
  set function lput "consider-environment" function
  set boolean lput ( profiler:calls "consider-environment" = count-alive-agents ) boolean
  
  set header lput "The environment of agents does not contain turtles breed?" header 
  set verification lput "dynamic-check" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1z with [ length decision.vectors > 0 and not member? anima1z [breed] of my-targets ] ) boolean
  
  set header lput "Not any agents with no day.perception who can see their environment during the day?" header 
  set verification lput "dynamic-check" verification 
  set function lput "consider-environment" function
  set boolean lput ( ifelse-value ( solar-status = "DAY" ) [ not any? anima1z with [ life.history != "gestatee" and day.perception = 0 and is-list? my.environment and length my.environment > 1 ] ] [ true ] ) boolean
  
  set header lput "Not any agents with no night.perception who can see their environment during the night?" header
  set verification lput "dynamic-check" verification 
  set function lput "consider-environment" function
  set boolean lput ( ifelse-value ( solar-status = "NIGHT" ) [ not any? anima1z with [ life.history != "gestatee" and night.perception = 0 and is-list? my.environment and length my.environment > 1 ] ] [ true ] ) boolean
  
  set header lput "Not any agents with no visual.range who can see their environment?" header 
  set verification lput "dynamic-check" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1z with [ life.history != "gestatee" and visual.range = 0 and is-list? my.environment and length my.environment > 1 ] ) boolean
  
  set header lput "Not any agents with no visual.anle who can see their environment?" header 
  set verification lput "dynamic-check" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1z with [ life.history != "gestatee" and visual.angle = 0 and is-list? my.environment and length my.environment > 1 ] ) boolean

  set header lput "Gestatees can always see their living mothers?" header 
  set verification lput "dynamic-check" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my.mother != nobody and [is.alive] of my.mother = true and not member? my.mother my.environment ] ) boolean
  
  set header lput "Agents who are alive can see their carried offpsring?" header 
  set verification lput "dynamic-check" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1z with [ is.alive and any? my-offspring with [ member? self [carried.items] of myself and not member? self [my.environment] of myself ] ] ) boolean
  
  set header lput "There are no duplicates in my.environment?" header 
  set verification lput "dynamic-check" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1z with [ length remove-duplicates my.environment < length my.environment ] ) boolean
  
  set header lput "Dead agents do not have anything in environment?" header 
  set verification lput "dynamic-check" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1z with [ not is.alive and length my.environment > 0 ] ) boolean
  
  set header lput "Not any fully decayed individuals in someone's environment?" header 
  set verification lput "dynamic-check" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1s with [ fully.decayed and member? self [my.environment] of anima1z ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; MAKE-DECISIONS
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Every living agent has decision.vectors?" header
  set verification lput "dynamic-check" verification 
  set function lput "make-decisions" function
  set boolean lput ( not any? anima1z with [ is.alive and ( decision.vectors = [] or decision.vectors = 0 ) ] ) boolean     
  
  set header lput "Dead agents not not have any decision.vectors?" header 
  set verification lput "dynamic-check" verification 
  set function lput "make-decisions" function
  set boolean lput ( not any? anima1z with [ not is.alive and is-list? decision.vectors and length decision.vectors > 0 ] ) boolean
  
  set header lput "Gestatees do not target non-maternal others?" header
  set verification lput "dynamic-check" verification 
  set function lput "make-decisions" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and any? my-targets with [ self != myself and self != [my.mother] of myself ] ] ) boolean
  
  set header lput "No male agents can target a gestatee?" header
  set verification lput "dynamic-check" verification 
  set function lput "make-decisions" function
  set boolean lput ( not any? anima1z with [ biological.sex = "male" and any? my-targets with [ life.history = "gestatee" and self != myself ]] ) boolean
  
  set header lput "No female agents can target a gestatee that isn't their own offspring?" header
  set verification lput "dynamic-check" verification 
  set function lput "make-decisions" function
  set boolean lput ( not any? anima1z with [ life.history = "female" and any? my-targets with [ life.history = "gestatee" and my.mother != myself ]] ) boolean
  
  set header lput "All decision.vectors are unique in their combination of non-numeric values?" header
  set verification lput "dynamic-check" verification 
  set function lput "make-decisions" function
  let decisions-list map [ i -> but-first but-last i ] recent-decisions-made
  set boolean lput ( length remove-duplicates decisions-list = length remove-duplicates decisions-list ) boolean

  ; --------------------------------------------------------------------------------------------------------------------
  ; DO-ACTIONS
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Agent calls to do-actions same number as agent count?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "do-actions" function
  set boolean lput ( profiler:calls "do-actions" = count-alive-agents ) boolean 
  
  set header lput "No one is doing an action with energy of 0?" header
  set verification lput "dynamic-check" verification 
  set function lput "do-actions" function
  set boolean lput ( not any? anima1z with [ length actions.completed > 0 and energy.supply = 0 ] ) boolean ; might return false if agent just completed an action that took their energy down to 0
  
  set header lput "There are no actions that can be completed with 0 cost?" header
  set verification lput "dynamic-check" verification 
  set function lput "do-actions" function
  set boolean lput ( length ( filter [ i -> i = 0 ] map [ j -> last j ] recent-actions-completed ) > 0 ) boolean 

  set header lput "Dead agents have not completed any actions?" header
  set verification lput "dynamic-check" verification 
  set function lput "do-actions" function
  set boolean lput ( not any? anima1z with [ not is.alive and length actions.completed > 0 ] ) boolean
  
  set header lput "Not any agents that have a higher energy cost than their energy gains?" header
  set verification lput "dynamic-check" verification 
  set function lput "do-actions" function
  set boolean lput ( not any? anima1z with [ generation.number > 0 and total.energy.gains < total.energy.cost ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; SUVIVAL-CHANCE
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to survival-chance less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "survival-chance" function
  set boolean lput ( profiler:calls "survival-chance" <= decision-count-for "survival-chance" ) boolean
  
  set header lput "Calls to survival-chance equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "survival-chance" function
  set boolean lput ( profiler:calls "survival-chance" = action-count-for "survival-chance" ) boolean
  
  set header lput "All agents have a survival.chance between zero and one?" header 
  set verification lput "variable-boundaries" verification 
  set function lput "survival-chance" function
  set boolean lput ( not any? anima1z with [ survival.chance < 0 or survival.chance > 1 ] ) boolean

  set header lput "There are not any individuals who have a low survival.chance and are alive?" header 
  set verification lput "dynamic-check" verification 
  set function lput "survival-chance" function
  set boolean lput ( not any? anima1z with [ survival.chance < 0.95 and is.alive = true ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; BODY-SIZE
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to body-size less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "body-size" function
  set boolean lput ( profiler:calls "body-size" <= decision-count-for "body-size" ) boolean
  
  set header lput "Calls to body-size equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "body-size" function
  set boolean lput ( profiler:calls "body-size" = action-count-for "body-size" ) boolean
  
  set header lput "All agents have a body.size is between zero and one?" header 
  set verification lput "variable-boundaries" verification 
  set function lput "body-size" function
  set boolean lput ( not any? anima1z with [ body.size < 0 or body.size > 1 ] ) boolean

  set header lput "Infants are generally larger than gestatees?" header 
  set verification lput "dynamic-check" verification 
  set function lput "body-size" function
  set boolean lput ( (ifelse-value ( any? anima1z with [ life.history = "infant" ] ) [ mean [body.size] of anima1z with [ life.history = "infant" ]] [1] ) >= (ifelse-value ( any? anima1z with [ life.history = "gestatee" ] ) [ mean [body.size] of anima1z with [ life.history = "gestatee"]] [0] )) boolean
  
  set header lput "Juveniles are generally larger than infants?" header 
  set verification lput "dynamic-check" verification 
  set function lput "body-size" function
  set boolean lput ( ( ifelse-value ( any? anima1z with [ life.history = "juvenile" ] ) [ mean [body.size] of anima1z with [ life.history = "juvenile" ]] [1]) >= (ifelse-value ( any? anima1z with [ life.history = "infant" ] ) [mean [body.size] of anima1z with [ life.history = "infant"]] [0] )) boolean
  
  set header lput "Adults are generally larger than juveniles?" header 
  set verification lput "dynamic-check" verification 
  set function lput "body-size" function
  set boolean lput ( ( ifelse-value ( any? anima1z with [ life.history = "adult" ] ) [ mean [body.size] of anima1z with [ life.history = "adult" ]][1]) >= ( ifelse-value ( any? anima1z with [ life.history = "juvenile" ] ) [mean [body.size] of anima1z with [ life.history = "juvenile"]] [0] )) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; BODY-SHADE
  ; -------------------------------------------------------------------------------------------------------------------- 
  
  set header lput "Calls to body-shade less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "body-shade" function
  set boolean lput ( profiler:calls "body-shade" <= decision-count-for "body-shade" ) boolean
  
  set header lput "Calls to body-shade equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "body-shade" function
  set boolean lput ( profiler:calls "body-shade" = action-count-for "body-shade" ) boolean
  
  set header lput "All agents have a body.shade between zero and one? " header 
  set verification lput "variable-boundaries" verification 
  set function lput "body-shade" function
  set boolean lput ( not any? anima1z with [ body.shade < 0 or body.shade > 1 ] ) boolean
  ; --------------------------------------------------------------------------------------------------------------------
  ; VISUAL-RANGE
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to visual-range less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "visual-range" function
  set boolean lput ( profiler:calls "visual-range" <= decision-count-for "visual-range" ) boolean
  
  set header lput "Calls to visual-range equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "visual-range" function
  set boolean lput ( profiler:calls "visual-range" = action-count-for "visual-range" ) boolean
  
  set header lput "All agents have a visual.range between zero and one? " header 
  set verification lput "variable-boundaries" verification 
  set function lput "visual-range" function
  set boolean lput ( not any? anima1z with [ visual.range < 0 or visual.range > 1 ] ) boolean

  set header lput "Adults have a higher visual.range than younger individuals?" header 
  set verification lput "dynamic-check" verification 
  set function lput "visual-range" function
  set boolean lput ( ( ifelse-value ( any? anima1z with [ life.history = "adult" ]) [mean [visual.range] of anima1z with [ life.history = "adult" ]][0]) >= ( ifelse-value ( any? anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee" ] ) [mean [visual.range] of anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee"]] [0] )) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; VISUAL-ANGLE
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to visual-angle less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "visual-angle" function
  set boolean lput ( profiler:calls "visual-angle" <= decision-count-for "visual-angle" ) boolean
  
  set header lput "Calls to visual-angle equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "visual-angle" function
  set boolean lput ( profiler:calls "visual-angle" = action-count-for "visual-angle" ) boolean
  
  set header lput "All agents have a visual.angle between zero and one?" header 
  set verification lput "variable-boundaries" verification 
  set function lput "visual-angle" function
  set boolean lput ( not any? anima1z with [ visual.angle < 0 or visual.angle > 1 ] ) boolean

  set header lput "Adults have a higher visual.angle than younger individuals?" header 
  set verification lput "dynamic-check" verification 
  set function lput "visual-angle" function
  set boolean lput ( ( ifelse-value ( any? anima1z with [ life.history = "adult" ]) [mean [visual.angle] of anima1z with [ life.history = "adult" ]][0]) >= ( ifelse-value ( any? anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee" ] ) [mean [visual.angle] of anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee"]] [0] )) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; DAY-PERCEPTION
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to day-perception less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "day-perception" function
  set boolean lput ( profiler:calls "day-perception" <= decision-count-for "day-perception" ) boolean
  
  set header lput "Calls to day-perception equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "day-perception" function
  set boolean lput ( profiler:calls "day-perception" = action-count-for "day-perception" ) boolean
  
  set header lput "All agents have a day.perception between zero and one?" header 
  set verification lput "variable-boundaries" verification 
  set function lput "day-perception" function
  set boolean lput ( not any? anima1z with [ day.perception < 0 or day.perception > 1 ] ) boolean

  set header lput "Adults are generally more day perceptive than younger individuals?" header 
  set verification lput "dynamic-check" verification 
  set function lput "day-perception" function
  set boolean lput ( ( ifelse-value ( any? anima1z with [ life.history = "adult" ]) [mean [day.perception] of anima1z with [ life.history = "adult" ]][0]) >= ( ifelse-value ( any? anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee" ] ) [mean [day.perception] of anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee"]] [0] )) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; NIGHT-PERCEPTION
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to night-perception less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "night-perception" function
  set boolean lput ( profiler:calls "night-perception" <= decision-count-for "night-perception" ) boolean
  
  set header lput "Calls to night-perception equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "night-perception" function
  set boolean lput ( profiler:calls "night-perception" = action-count-for "night-perception" ) boolean
  
  set header lput "All agents have a night.perception between zero and one?" header 
  set verification lput "variable-boundaries" verification 
  set function lput "night-perception" function
  set boolean lput ( not any? anima1z with [ night.perception < 0 or night.perception > 1 ] ) boolean

  set header lput "Adults are generally more night perceptive than younger individuals?" header 
  set verification lput "dynamic-check" verification 
  set function lput "night-perception" function
  set boolean lput ( ( ifelse-value ( any? anima1z with [ life.history = "adult" ]) [mean [night.perception] of anima1z with [ life.history = "adult" ]][0]) >= ( ifelse-value ( any? anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee" ] ) [mean [night.perception] of anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee"]] [0] )) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; CONCEPTION-CHANCE
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to conception-chance less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "conception-chance" function
  set boolean lput ( profiler:calls "conception-chance" <= decision-count-for "conception-chance" ) boolean
  
  set header lput "Calls to conception-chance equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "conception-chance" function
  set boolean lput ( profiler:calls "conception-chance" = action-count-for "conception-chance" ) boolean
  
  set header lput "All agents have a conception.chance between zero and one? " header 
  set verification lput "variable-boundaries" verification 
  set function lput "conception-chance" function
  set boolean lput ( not any? anima1z with [ conception.chance < 0 or conception.chance > 1 ] ) boolean

  set header lput "Adults generally have higher conception.chance than non-adults?" header 
  set verification lput "dynamic-check" verification 
  set function lput "conception-chance" function
  set boolean lput ( ( ifelse-value ( any? anima1z with [ life.history = "adult" ] ) [mean [conception.chance] of anima1z with [ life.history = "adult" ]][0] ) > ( ifelse-value ( any? anima1z with [ life.history = "juvenile" ] ) [mean [conception.chance] of anima1z with [ life.history = "juvenile"]] [0] )) boolean
  
  set header lput "Adults with offspring have non-zero conception.chance?" header 
  set verification lput "dynamic-check" verification 
  set function lput "conception-chance" function
  set boolean lput ( not any? anima1z with [ count my-offspring > 0 and conception.chance = 0 ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; BITE-CAPACITY
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to bite-capacity less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "bite-capacity" function
  set boolean lput ( profiler:calls "bite-capacity" <= decision-count-for "bite-capacity" ) boolean
  
  set header lput "Calls to bite-capacity equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "bite-capacity" function
  set boolean lput ( profiler:calls "bite-capacity" = action-count-for "bite-capacity" ) boolean
  
  set header lput "All agents have a bite.capacity between zero and one? " header 
  set verification lput "variable-boundaries" verification 
  set function lput "bite-capacity" function
  set boolean lput ( not any? anima1z with [ bite.capacity < 0 or bite.capacity > 1 ] ) boolean

  set header lput "Juveniles and adults have a non-zero bite-capacity? " header 
  set verification lput "dynamic-check" verification 
  set function lput "bite-capacity" function
  set boolean lput ( not any? anima1z with [ ( life.history = "juvenile" or life.history = "adult" ) and bite.capacity = 0 ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; MUTATION-CHANCE
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to mutation-chance less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "mutation-chance" function
  set boolean lput ( profiler:calls "mutation-chance" <= decision-count-for "mutation-chance" ) boolean
  
  set header lput "Calls to mutation-chance equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "mutation-chance" function
  set boolean lput ( profiler:calls "mutation-chance" = action-count-for "mutation-chance" ) boolean
  
  set header lput "All agents have a mutation.chance between zero and one? " header 
  set verification lput "variable-boundaries" verification 
  set function lput "mutation-chance" function
  set boolean lput ( not any? anima1z with [ mutation.chance < 0 or mutation.chance > 1 ] ) boolean

  ; --------------------------------------------------------------------------------------------------------------------
  ; SEX-RATIO
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to sex-ratio less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "sex-ratio" function
  set boolean lput ( profiler:calls "sex-ratio" <= decision-count-for "sex-ratio" ) boolean
  
  set header lput "Calls to sex-ratio equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "sex-ratio" function
  set boolean lput ( profiler:calls "sex-ratio" = action-count-for "sex-ratio" ) boolean
  
  set header lput "All agents have a sex.ratio preferrence between zero and one? " header 
  set verification lput "variable-boundaries" verification 
  set function lput "sex-ratio" function
  set boolean lput ( not any? anima1z with [ sex.ratio < 0 or sex.ratio > 1 ] ) boolean

  set header lput "There are some female agents?" header 
  set verification lput "dynamic-check" verification 
  set function lput "sex-ratio" function
  set boolean lput ( any? anima1z with [ biological.sex = "female" ] ) boolean
  
  set header lput "There are some ale agents?" header 
  set verification lput "dynamic-check" verification 
  set function lput "sex-ratio" function
  set boolean lput ( any? anima1z with [ biological.sex = "male" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; LITTER-SIZE
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to litter-size less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "litter-size" function
  set boolean lput ( profiler:calls "litter-size" <= decision-count-for "litter-size" ) boolean
  
  set header lput "Calls to litter-size equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "litter-size" function
  set boolean lput ( profiler:calls "litter-size" = action-count-for "litter-size" ) boolean
  
  set header lput "All agents have a litter.size index between zero and one? " header 
  set verification lput "variable-boundaries" verification 
  set function lput "litter-size" function
  set boolean lput ( not any? anima1z with [ litter.size < 0 or litter.size > 1 ] ) boolean    

  ; --------------------------------------------------------------------------------------------------------------------
  ; MOVE-TOWARD
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to move-toward less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "move-toward" function
  set boolean lput ( profiler:calls "move-toward" <= ( decision-count-for "move-toward" + decision-count-for "move-away-from" ) ) boolean
  
  set header lput "Calls to move-toward equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "move-toward" function
  set boolean lput ( profiler:calls "move-toward" = action-count-for "move-toward" ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; TURN-RIGHT
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to turn-right less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "turn-right" function
  set boolean lput ( profiler:calls "turn-right" <= decision-count-for "turn-right" ) boolean
  
  set header lput "Calls to turn-right equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "turn-right" function
  set boolean lput ( profiler:calls "turn-right" = action-count-for "turn-right" ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; GO-FORWARD
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to go-forward less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "go-forward" function
  set boolean lput ( profiler:calls "go-forward" <= decision-count-for "go-forward" ) boolean
  
  set header lput "Calls to go-forward equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "go-forward" function
  set boolean lput ( profiler:calls "go-forward" = action-count-for "go-forward" ) boolean
  
  set header lput "Gestatees do not move forward?" header 
  set verification lput "dynamic-check" verification 
  set function lput "go-forward" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "went-forward" ] ) boolean

  set header lput "Agents generally travel more as they get older?" header 
  set verification lput "dynamic-check" verification 
  set function lput "go-forward" function
  let mean-infant-travel-distance (ifelse-value ( any? anima1z with [ life.history = "infant" ]) [ mean [distance.traveled] of anima1z with [ life.history = "infant" ]] [0])
  let mean-juvenile-travel-distance (ifelse-value ( any? anima1z with [ life.history = "juvenile" ]) [ mean [distance.traveled] of anima1z with [ life.history = "juvenile" ]] [0] )
  let mean-adult-travel-distance (ifelse-value ( any? anima1z with [ life.history = "adult" ]) [ mean [distance.traveled] of anima1z with [ life.history = "adult" ]] [0] )
  set boolean lput ( mean-infant-travel-distance <= mean-juvenile-travel-distance and mean-juvenile-travel-distance <= mean-adult-travel-distance ) boolean
  
  set header lput "Agents who have traveled forward have travel distance greater than 0?" header
  set verification lput "dynamic-check" verification 
  set function lput "go-forward" function
  set boolean lput ( not any? anima1z with [ distance.traveled = 0 and my-actions-include "went-forward" ] ) boolean 
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; HIDE
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to hide less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "hide" function
  set boolean lput ( profiler:calls "hide" <= decision-count-for "hide" ) boolean
  
  set header lput "Calls to hide equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "hide" function
  set boolean lput ( profiler:calls "hide" = action-count-for "hide" ) boolean 
  
  set header lput "Agents who are hidden arenât in any other agent's my.environment?" header ; doesn't apply to gestatees who are in mother's environment
  set verification lput "dynamic-check" verification 
  set function lput "hide" function
  set boolean lput ( not any? anima1z with [ life.history != "gestatee" and hidden? and member? self ( reduce sentence [my.environment] of other anima1z ) ] ) boolean 
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; REST
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to rest less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "rest" function
  set boolean lput ( profiler:calls "rest" <= decision-count-for "rest" ) boolean
  
  set header lput "Calls to rest equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "rest" function
  set boolean lput ( profiler:calls "rest" = action-count-for "rest" ) boolean
  
  set header lput "No one is resting and performing actions that are only done when not resting?" header
  set verification lput "dynamic-check" verification 
  set function lput "rest" function
  set boolean lput ( not any? anima1z with [ is.resting and not last-actions-include "rest" 
    and ( last-actions-include "move-toward" or last-actions-include "move-away-from" or last-actions-include "turn-right" 
      or last-actions-include "turn-left" or last-actions-include "go-forward" or last-actions-include "set-heading" 
      or last-actions-include "set-heading-random" or last-actions-include "hide" or last-actions-include "supply-to" 
      or last-actions-include "demand-from" or last-actions-include "eat" or last-actions-include "join" 
      or last-actions-include "leave" or last-actions-include "recruit" or last-actions-include "expel" 
      or last-actions-include "pick-up" or last-actions-include "put-down" or last-actions-include "cling-to" 
      or last-actions-include "squirm-from" or last-actions-include "help" or last-actions-include "hurt" or last-actions-include "mate-with" ) ] ) boolean 
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; SIGNALING
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to yellow-signal less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "yellow-signal" function
  set boolean lput ( profiler:calls "yellow-signal" <= decision-count-for "yellow-signal" ) boolean
  
  set header lput "Calls to yellow-signal equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "yellow-signal" function
  set boolean lput ( profiler:calls "yellow-signal" = action-count-for "yellow-signal" ) boolean
  
  set header lput "Calls to red-signal less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "red-signal" function
  set boolean lput ( profiler:calls "red-signal" <= decision-count-for "red-signal" ) boolean
  
  set header lput "Calls to red-signal equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "red-signal" function
  set boolean lput ( profiler:calls "red-signal" = action-count-for "red-signal" ) boolean
  
  set header lput "Calls to blue-signal less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "blue-signal" function
  set boolean lput ( profiler:calls "blue-signal" <= decision-count-for "blue-signal" ) boolean
  
  set header lput "Calls to blue-signal equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "blue-signal" function
  set boolean lput ( profiler:calls "blue-signal" = action-count-for "blue-signal" ) boolean
  
  set header lput "All agents have a yellow.chance between zero and one? " header 
  set verification lput "variable-boundaries" verification 
  set function lput "yellow-signal" function
  set boolean lput ( not any? anima1z with [ yellow.chance < 0 or yellow.chance > 1 ] ) boolean
  
  set header lput "All agents have a red.chance between zero and one? " header 
  set verification lput "variable-boundaries" verification 
  set function lput "red-signal" function
  set boolean lput ( not any? anima1z with [ red.chance < 0 or red.chance > 1 ] ) boolean
  
  set header lput "All agents have a blue.chance between zero and one? " header 
  set verification lput "variable-boundaries" verification 
  set function lput "blue-signal" function
  set boolean lput ( not any? anima1z with [ blue.chance < 0 or blue.chance > 1 ] ) boolean

  ; --------------------------------------------------------------------------------------------------------------------
  ; CHECK-INFANCY
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to check-infancy less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "check-infancy" function
  set boolean lput ( profiler:calls "check-infancy" <= decision-count-for "check-infancy" ) boolean
  
  set header lput "Calls to check-infancy equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "check-infancy" function
  set boolean lput ( profiler:calls "check-infancy" = action-count-for "check-infancy" ) boolean
  
  set header lput "All agents have infancy.chance between zero and one?" header
  set verification lput "variable-boundaries" verification 
  set function lput "check-infancy" function
  set boolean lput ( not any? anima1z with [ infancy.chance < 0 or infancy.chance > 1 ] ) boolean    
  
  set header lput "Other agents generally have higher infancy.chance than gestatees?" header 
  set verification lput "dynamic-check" verification 
  set function lput "check-infancy" function
  set boolean lput ( (ifelse-value ( any? anima1z with [ life.history != "gestatee" ] ) [ mean [infancy.chance] of anima1z with [ life.history != "gestatee" ]] [0] ) > (ifelse-value ( any? anima1z with [ life.history = "gestatee" ] ) [ mean [infancy.chance] of anima1z with [ life.history = "gestatee"]] [0] )) boolean

;  set header lput "Infants do not check-infancy?" header 
;  set verification lput "dynamic-check" verification 
;  set function lput "check-infancy" function
;  set boolean lput ( not any? anima1z with [ life.history = "infant" and my-actions-include "check-infancy" and ticks.at.birth <= ( ticks - how-many-ticks? ) ] ) boolean
;  
;  set header lput "Juveniles do not check-infancy?" header 
;  set verification lput "dynamic-check" verification 
;  set function lput "check-infancy" function
;  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my-actions-include "check-infancy" ] ) boolean
;  
;  set header lput "Adults do not check-infancy?" header 
;  set verification lput "dynamic-check" verification 
;  set function lput "check-infancy" function
;  set boolean lput ( not any? anima1z with [ life.history = "adult" and my-actions-include "check-infancy" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; CHECK-BIRTH
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to check-birth less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "check-birth" function
  set boolean lput ( profiler:calls "check-birth" <= decision-count-for "check-birth" ) boolean
  
  set header lput "Calls to check-birth equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "check-birth" function
  set boolean lput ( profiler:calls "check-birth" = action-count-for "check-birth" ) boolean
  
  set header lput "All agents have a birthing chance between zero and one? " header 
  set verification lput "dynamic-check" verification 
  set function lput "check-birth" function
  set boolean lput ( not any? anima1z with [ birthing.chance < 0 or birthing.chance > 1 ] ) boolean    
  
  set header lput "Pregnant agents generally have higher birthing.chance than non-pregnant agents?" header 
  set verification lput "dynamic-check" verification 
  set function lput "check-birth" function
  set boolean lput ( (ifelse-value ( any? anima1z with [ fertility.status = "pregnant" ] ) [ mean [birthing.chance] of anima1z with [ fertility.status = "pregnant" ]] [0] ) >= (ifelse-value ( any? anima1z with [ fertility.status != "pregnant" ] ) [ mean [birthing.chance] of anima1z with [ fertility.status != "pregnant" ]] [0] )) boolean

  set header lput "There is at least one pregnant agent?" header 
  set verification lput "dynamic-check" verification 
  set function lput "check-birth" function
  set boolean lput ( count anima1z with [ fertility.status = "pregnant" ] > 0 ) boolean
  
  set header lput "Infants do not check-birth?" header 
  set verification lput "dynamic-check" verification 
  set function lput "check-birth" function
  set boolean lput ( not any? anima1z with [ life.history = "infant" and my-actions-include "check-birth" ] ) boolean
  
  set header lput "Juveniles do not check-birth?" header 
  set verification lput "dynamic-check" verification 
  set function lput "check-birth" function
  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my-actions-include "check-birth" ] ) boolean
  
  set header lput "Adult males do not check-birth?" header 
  set verification lput "dynamic-check" verification 
  set function lput "check-birth" function
  set boolean lput ( not any? anima1z with [ life.history = "adult" and biological.sex = "male" and my-actions-include "check-birth" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; GIVE-BIRTH
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to give-birth are equal to call to update-to-infant?" header
  set verification lput "runtime-boundaries" verification 
  set function lput "give-birth" function
  set boolean lput ( profiler:calls "give-birth" = profiler:calls "update-to-infant" ) boolean
  
  set header lput "All agents who are not pregnant do not give birth?" header 
  set verification lput "dynamic-check" verification 
  set function lput "check-birth" function
  set boolean lput ( not any? anima1z with [ fertility.status != "pregnant" and my-actions-include "give-birth" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; UPDATE-TO-INFANT
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "There is at least one infant agent?" header 
  set verification lput "dynamic-check" verification 
  set function lput "update-to-infant" function
  set boolean lput ( count anima1z with [ life.history = "infant" ] > 0 ) boolean
  
  set header lput "Infants have a timestamp for infancy?" header 
  set verification lput "always-true" verification 
  set function lput "update-to-infant" function
  set boolean lput ( not any? anima1z with [ generation.number > 0 and ticks.at.birth = 0 and life.history = "infant" ] ) boolean
  
  set header lput "Agents signal when they turned from gestatee to infant?" header 
  set verification lput "always-true" verification 
  set function lput "update-to-infant" function
  set boolean lput ( not any? anima1z with [ label = "i" and ( ticks.at.birth - ticks.at.conception != age.in.ticks ) ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; CHECK-JUVENILITY
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to check-juvenility less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "check-juvenility" function
  set boolean lput ( profiler:calls "check-juvenility" <= decision-count-for "check-juvenility" ) boolean
  
  set header lput "Calls to check-juvenility equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "check-juvenility" function
  set boolean lput ( profiler:calls "check-juvenility" = action-count-for "check-juvenility" ) boolean
  
  set header lput "Agents have a juvenility chance between zero and one? " header 
  set verification lput "dynamic-check" verification 
  set function lput "check-juvenility" function
  set boolean lput ( not any? anima1z with [ juvenility.chance < 0 or juvenility.chance > 1 ] ) boolean
  
  set header lput "Adults and juveniles generally have higher juvenility.chance than infants or gestatees?" header 
  set verification lput "dynamic-check" verification 
  set function lput "check-juvenility" function
  set boolean lput ( (ifelse-value ( any? anima1z with [ life.history != "adult" or life.history != "juvenile" ] ) [ mean [juvenility.chance] of anima1z with [ life.history != "adult" or life.history != "juvenile" ]] [0] ) >= (ifelse-value ( any? anima1z with [ life.history = "gestatee" or life.history = "infant" ] ) [ mean [juvenility.chance] of anima1z with [ life.history = "gestatee" or life.history = "infant" ]] [0] )) boolean
  
;  set header lput "Juveniles do not check-juvenility?" header 
;  set verification lput "dynamic-check" verification 
;  set function lput "check-juvenility" function
;  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my-actions-include "check-juvenility" and ticks.at.weaning <= ( ticks - how-many-ticks? )] ) boolean
;  
;  set header lput "Adults do not check-juvenility?" header 
;  set verification lput "dynamic-check" verification 
;  set function lput "check-juvenility" function
;  set boolean lput ( not any? anima1z with [ life.history = "adult" and my-actions-include "check-juvenility" ] ) boolean
;  
;  set header lput "Adult females do not check-juvenility?" header 
;  set verification lput "dynamic-check" verification 
;  set function lput "check-juvenility" function
;  set boolean lput ( not any? anima1z with [ life.history = "adult" and biological.sex = "female" and my-actions-include "check-juvenility" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; CHECK-WEANING
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to check-weaning less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "check-weaning" function
  set boolean lput ( profiler:calls "check-weaning" <= decision-count-for "check-weaning" ) boolean
  
  set header lput "Calls to check-weaning equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "check-weaning" function
  set boolean lput ( profiler:calls "check-weaning" = action-count-for "check-weaning" ) boolean
  
  set header lput "There is at least one lactating female?" header
  set verification lput "dynamic-check" verification 
  set function lput "check-weaning" function
  let any-lactating-females any? anima1z with [ fertility.status = "lactating" ]
  set boolean lput ( any-lactating-females ) boolean   
  
  set header lput "All agents have a weaning chance between zero and one?" header
  set verification lput "dynamic-check" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ weaning.chance < 0 or weaning.chance > 1 ] ) boolean  
  
;  set header lput "All lactating females have infant offspring?" header 
;  set verification lput "dynamic-check" verification 
;  set function lput "check-weaning" function
;  set boolean lput ( ifelse-value any-lactating-females [ not any? anima1z with [ fertility.status = "lactating" and not any? my-offspring with [ life.history = "infant" ]] ] [ true ] ) boolean
  
  ; all lactating females do not have gestatee?
  
  set header lput "All mothers of infants are lactating?" header 
  set verification lput "dynamic-check" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ fertility.status != "lactating" and any? anima1z with [ life.history = "infant" and my.mother = myself ] ] ) boolean
  
  set header lput "There are no gestatees with mothers who are not pregnant?" header 
  set verification lput "dynamic-check" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my.mother != nobody and [fertility.status] of my.mother != "pregnant" ]) boolean
  
  set header lput "Only adult females are lactating?" header 
  set verification lput "dynamic-check" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ fertility.status = "lactating" and ( life.history != "adult" or biological.sex = "male" ) ] ) boolean
  
  set header lput "Lactating agents generally have higher weaning chance than non-lactating agents?" header
  set verification lput "dynamic-check" verification 
  set function lput "check-weaning" function
  set boolean lput ( (ifelse-value ( any? anima1z with [ fertility.status = "lactating" ] ) [ mean [weaning.chance] of anima1z with [ fertility.status = "lactating" ]] [0] ) >= (ifelse-value ( any? anima1z with [ fertility.status != "lactating" ] ) [ mean [weaning.chance] of anima1z with [ fertility.status != "lactating" ]] [0] )) boolean
  
;  set header lput "Not any agents who are not lactating and check weaning?" header 
;  set verification lput "dynamic-check" verification 
;  set function lput "check-weaning" function
;  set boolean lput ( not any? anima1z with [ fertility.status != "lactating" and my-actions-include "check-weaning" ] ) boolean

  set header lput "Infants do not check-weaning?" header 
  set verification lput "dynamic-check" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ life.history = "infant" and my-actions-include "check-weaning" ] ) boolean
  
  set header lput "Juveniles do not check-weaning?" header 
  set verification lput "dynamic-check" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my-actions-include "check-weaning" ] ) boolean
  
;  set header lput "Adult males do not check-weaning?" header 
;  set verification lput "dynamic-check" verification 
;  set function lput "check-weaning" function
;  set boolean lput ( not any? anima1z with [ life.history = "adult" and biological.sex = "male" and my-actions-include "check-weaning" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; WEAN-OFFSPRING
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to wean-offspring are equal to call to update-to-juvenile?" header
  set verification lput "runtime-boundaries" verification 
  set function lput "wean-offspring" function
  set boolean lput ( profiler:calls "wean-offspring" = profiler:calls "update-to-juvenile" ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; UPDATE-TO-JUVENILE
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "There is at least one juvenile agent?" header 
  set verification lput "dynamic-check" verification 
  set function lput "update-to-juvenile" function
  set boolean lput ( count anima1z with [ life.history = "juvenile" ] > 0 ) boolean
  
  set header lput "juveniles have a timestamp for juvenility?" header 
  set verification lput "" verification 
  set function lput "update-to-juvenile" function
  set boolean lput ( not any? anima1z with [ generation.number > 0 and ticks.at.weaning = 0 and life.history = "juvenile" ] ) boolean
  
  set header lput "Agents signal when they turned from infant to juvenile?" header 
  set verification lput "always-true" verification 
  set function lput "update-to-juvenile" function
  set boolean lput ( not any? anima1z with [ label = "j" and ( ticks.at.weaning - ticks.at.conception != age.in.ticks ) ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; CHECK-ADULTHODD
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to check-adulthood less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "check-adulthood" function
  set boolean lput ( profiler:calls "check-adulthood" <= decision-count-for "check-adulthood" ) boolean
  
  set header lput "Calls to check-adulthood equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "check-adulthood" function
  set boolean lput ( profiler:calls "check-adulthood" = action-count-for "check-adulthood" ) boolean
  
  set header lput "All agents have an adulthood chance is between zero and one? " header 
  set verification lput "dynamic-check" verification 
  set function lput "check-adulthood" function
  set boolean lput ( not any? anima1z with [ adulthood.chance < 0 or adulthood.chance > 1 ] ) boolean
  
  set header lput "Adults generally have higher adulthood chance than juveniles, infants or gestatees?" header 
  set verification lput "dynamic-check" verification 
  set function lput "check-adulthood" function
  set boolean lput ( (ifelse-value ( any? anima1z with [ life.history = "adult" ] ) [ mean [adulthood.chance] of anima1z with [ life.history = "adult" ]] [0] ) > (ifelse-value ( any? anima1z with [ life.history = "gestatee" or life.history = "infant" or life.history = "juvenile" ] ) [ mean [adulthood.chance] of anima1z with [ life.history = "gestatee" or life.history = "infant" or life.history = "juvenile"]] [0] )) boolean
  
;  set header lput "All agents who are older than juvenile do not check adulthood?" header 
;  set verification lput "dynamic-check" verification 
;  set function lput "check-adulthood" function
;  set boolean lput ( not any? anima1z with [ life.history = "adult" and my-actions-include "check-adulthood" and ticks.at.sexual.maturity <= ( ticks - how-many-ticks? )] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; UPDATE-TO-ADULT
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "There are some adult agents?" header 
  set verification lput "dynamic-check" verification 
  set function lput "update-to-adult" function
  set boolean lput ( count anima1z with [ life.history = "adult" ] > 0 ) boolean
  
  set header lput "All adult females have one of fertility options?" header 
  set verification lput "dynamic-check" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ life.history = "adult" and biological.sex = "female" and (fertility.status != "cycling" and fertility.status != "pregnant" and fertility.status != "lactating") ] ) boolean
  
  set header lput "There are no agents who have a fertility status who are not adult females?" header 
  set verification lput "dynamic-check" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ biological.sex = "female" and life.history = "adult" and fertility.status = " " ] ) boolean
  
  set header lput "Only adult females can be cycling?" header 
  set verification lput "dynamic-check" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ ( life.history != "adult" or biological.sex = "male" ) and fertility.status = "cycling" ] ) boolean
  
  set header lput "Cycling females do not have any infants?" header
  set verification lput "dynamic-check" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ fertility.status = "cycling" and any? anima1z with [ life.history = "infant" and my.mother = myself ]]  ) boolean
  
  set header lput "Cycling females do not have any gestatees? " header 
  set verification lput "dynamic-check" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ fertility.status = "cycling" and any? anima1z with [ life.history = "gestatee" and my.mother = myself ]] ) boolean
  
  set header lput "Adults have a timestamp for adulthood?" header 
  set verification lput "" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ generation.number > 0 and ticks.at.sexual.maturity = 0 and life.history = "adult" ] ) boolean
  
  set header lput "Agents signal when they turned from juvenile to adult?" header 
  set verification lput "always-true" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ label = "a" and ( ticks.at.sexual.maturity - ticks.at.conception != age.in.ticks ) ] ) boolean
  
  set header lput "Only adult agents have non-zero values for adult tracking variables? " header 
  set verification lput "dynamic-check" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ 
    ( life.history = "gestatee" or life.history = "infant" or life.history = "juvenile" ) 
    and ( adult.survival.chance > 0 or adult.body.size > 0 or adult.body.shade > 0 or adult.energy.supply > 0
      or adult.bite.capacity > 0 or adult.mutation.chance > 0 or adult.sex.ratio > 0 or adult.litter.size > 0 
      or adult.conception.chance > 0 or adult.visual.range > 0 or adult.visual.angle > 0 
      or adult.day.perception > 0 or adult.night.perception > 0 
      or adult.yellow.chance > 0 or adult.red.chance > 0 or adult.blue.chance > 0 )]) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; SUPPLY-TO
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to supply-to less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "supply-to" function
  set boolean lput ( profiler:calls "supply-to" <= decision-count-for "supply-to" ) boolean
  
  set header lput "Calls to supply-to equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "supply-to" function
  set boolean lput ( profiler:calls "supply-to" = action-count-for "supply-to" ) boolean
  
  set header lput "All agents who are not pregnant or lactating do not supply to other agents?" header 
  set verification lput "dynamic-check" verification 
  set function lput "supply-to" function
  set boolean lput ( not any? anima1z with [ ( fertility.status != "pregnant" and fertility.status != "lactating" ) and my-actions-include "supply-to" ] ) boolean

  set header lput "Infants do not supply-to?" header 
  set verification lput "dynamic-check" verification 
  set function lput "supply-to" function
  set boolean lput ( not any? anima1z with [ life.history = "infant" and my-actions-include "supply-to" ] ) boolean
  
  set header lput "Juveniles do not supply-to?" header 
  set verification lput "dynamic-check" verification 
  set function lput "supply-to" function
  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my-actions-include "supply-to" ] ) boolean
  
  set header lput "Adult males do not supply-to?" header 
  set verification lput "dynamic-check" verification 
  set function lput "supply-to" function
  set boolean lput ( not any? anima1z with [ life.history = "adult" and biological.sex = "male" and my-actions-include "supply-to" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; DEMAND-FROM 
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to demand-from less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "demand-from" function
  set boolean lput ( profiler:calls "demand-from" <= decision-count-for "demand-from" ) boolean
  
  set header lput "Calls to demand-from equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "demand-from" function
  set boolean lput ( profiler:calls "demand-from" = action-count-for "demand-from" ) boolean

  set header lput "All agents who are not gestatee or infant do not demand from other agents?" header 
  set verification lput "dynamic-check" verification 
  set function lput "demand-from" function
  set boolean lput ( not any? anima1z with [ ( life.history != "gestatee" and life.history != "infant" ) and my-actions-include "demand-from" ] ) boolean

  set header lput "Juveniles do not demand-from?" header 
  set verification lput "dynamic-check" verification 
  set function lput "demand-from" function
  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my-actions-include "demand-from" ] ) boolean
  
  set header lput "Adults do not demand-from?" header 
  set verification lput "dynamic-check" verification 
  set function lput "demand-from" function
  set boolean lput ( not any? anima1z with [ life.history = "adult" and my-actions-include "demand-from" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; EAT
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to eat less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "eat" function
  set boolean lput ( profiler:calls "eat" <= decision-count-for "eat" ) boolean
  
  set header lput "Calls to eat equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "eat" function
  set boolean lput ( profiler:calls "eat" = action-count-for "eat" ) boolean
  
  set header lput "All agents have positive non-zero energy supply?" header 
  set verification lput "dynamic-check" verification 
  set function lput "eat" function
  set boolean lput ( not any? anima1z with [ energy.supply < 0 ] ) boolean
  
  set header lput "All agents who are younger than juvenile do not eat?" header 
  set verification lput "dynamic-check" verification 
  set function lput "eat" function
  set boolean lput ( not any? anima1z with [ ( life.history = "gestatee" or life.history = "infant" ) and my-actions-include "eat" ] ) boolean

  set header lput "Agents generally gain more from foraging as they get older?" header 
  set verification lput "dynamic-check" verification 
  set function lput "eat" function
  let gestatee-foraging-gains ( ifelse-value ( any? anima1z with [ life.history = "gestatee" ] ) [ mean [foraging.gains] of anima1z with [ life.history = "gestatee" ]] [0] )
  let infant-foraging-gains ( ifelse-value ( any? anima1z with [ life.history = "infant" ] ) [ mean [foraging.gains] of anima1z with [ life.history = "infant" ]] [0] )
  let juvenile-foraging-gains ( ifelse-value ( any? anima1z with [ life.history = "juvenile" ] ) [ mean [foraging.gains] of anima1z with [ life.history = "juvenile" ] ] [0] )
  let adult-foraging-gains ( ifelse-value ( any? anima1z with [ life.history = "adult" ] ) [ mean [foraging.gains] of anima1z with [ life.history = "adult" ] ] [0] )
  set boolean lput ( gestatee-foraging-gains <= infant-foraging-gains and infant-foraging-gains <= juvenile-foraging-gains and juvenile-foraging-gains <= adult-foraging-gains  ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; RECEIVE-FROM
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to receive-from equal to number of action vectors?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "receive-from" function
  set boolean lput ( profiler:calls "receive-from" = action-count-for "receive-from" ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; JOIN
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to join less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "join" function
  set boolean lput ( profiler:calls "join" <= decision-count-for "join" ) boolean
  
  set header lput "Calls to join less than or equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "join" function
  set boolean lput ( profiler:calls "join" <= action-count-for "join" ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; LEAVE 
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to leave less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "leave" function
  set boolean lput ( profiler:calls "leave" <= decision-count-for "leave" ) boolean
  
  set header lput "Calls to leave less than or equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "leave" function
  set boolean lput ( profiler:calls "leave" <= action-count-for "leave" ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; RECRUIT 
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to recruit less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "recruit" function
  set boolean lput ( profiler:calls "recruit" <= decision-count-for "recruit" ) boolean
  
  set header lput "Calls to recruit less than or equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "recruit" function
  set boolean lput ( profiler:calls "recruit" <= action-count-for "recruit" ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; EXPEL
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to expel less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "expel" function
  set boolean lput ( profiler:calls "expel" <= decision-count-for "expel" ) boolean
  
  set header lput "Calls to expel less than or equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "expel" function
  set boolean lput ( profiler:calls "expel" <= action-count-for "expel" ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; JOIN-GROUP 
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to join-group equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "join-group" function
  set boolean lput ( profiler:calls "join-group" = action-count-for "join-group" ) boolean
  
  set header lput "Gestatees do not join groups?" header 
  set verification lput "dynamic-check" verification 
  set function lput "join-group" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "join-group" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; LEAVE-GROUP
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to leave-group equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "leave-group" function
  set boolean lput ( profiler:calls "leave-group" = action-count-for "leave-group" ) boolean
  
  set header lput "Gestatees do not leave groups?" header 
  set verification lput "dynamic-check" verification 
  set function lput "leave-group" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "leave-group" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; PICK-UP 
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to pick-up less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "pick-up" function
  set boolean lput ( profiler:calls "pick-up" <= decision-count-for "pick-up" ) boolean
  
  set header lput "Calls to pick-up less than or equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "pick-up" function
  set boolean lput ( profiler:calls "pick-up" <= action-count-for "pick-up" ) boolean
  
  set header lput "Gestatees do not pick-up?" header 
  set verification lput "dynamic-check" verification 
  set function lput "pick-up" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "pick-up" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; PUT-DOWN 
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to put-down less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "put-down" function
  set boolean lput ( profiler:calls "put-down" <= decision-count-for "put-down" ) boolean
  
  set header lput "Calls to put-down less than or equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "put-down" function
  set boolean lput ( profiler:calls "put-down" <= action-count-for "put-down" ) boolean
  
  set header lput "Gestatees do not put-down?" header 
  set verification lput "dynamic-check" verification 
  set function lput "put-down" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "put-down" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; CLING-TO
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to cling-to less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "cling-to" function
  set boolean lput ( profiler:calls "cling-to" <= decision-count-for "cling-to" ) boolean
  
  set header lput "Calls to cling-to less than or equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "cling-to" function
  set boolean lput ( profiler:calls "cling-to" <= action-count-for "cling-to" ) boolean
  
  set header lput "Gestatees do not cling-to?" header 
  set verification lput "dynamic-check" verification 
  set function lput "cling-to" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "cling-to" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; SQUIRM-FROM
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to squirm-from less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "squirm-from" function
  set boolean lput ( profiler:calls "squirm-from" <= decision-count-for "squirm-from" ) boolean
  
  set header lput "Calls to squirm-from less than or equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "squirm-from" function
  set boolean lput ( profiler:calls "squirm-from" <= action-count-for "squirm-from" ) boolean
  
  set header lput "Gestatees do not squirm-from?" header 
  set verification lput "dynamic-check" verification 
  set function lput "squirm-from" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "squirm-from" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; CARRY
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to carry equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "carry" function
  set boolean lput ( profiler:calls "carry" = action-count-for "carry" ) boolean
  
  set header lput "Pregnant females carry their gestatees?" header 
  set verification lput "dynamic-check" verification 
  set function lput "carry" function
  set boolean lput ( not any? anima1z with [ fertility.status = "pregnant" and any? my-offspring with [ life.history = "gestatee" and not member? self [carried.items] of myself ] ] ) boolean
  
  set header lput "Lactating females carry their infants?" header 
  set verification lput "dynamic-check" verification 
  set function lput "carry" function
  set boolean lput ( not any? anima1z with [ fertility.status = "lactating" and any? my-offspring with [ life.history = "infant" and not member? self [carried.items] of myself ] ] ) boolean
  
;  set header lput "All gestatees are carried by their mothers?" header 
;  set verification lput "dynamic-check" verification 
;  set function lput "carry" function
;  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my.mother != nobody and not member? self [carried.items] of my.mother ] ) boolean
;  
  set header lput "All infants are carried by someone?" header 
  set verification lput "dynamic-check" verification 
  set function lput "carry" function
  set boolean lput ( not any? anima1z with [ life.history = "infant" and my.mother != nobody and not member? self [carried.items] of my.mother ] ) boolean
  
  set header lput "Agents are not carrying nobody items?" header 
  set verification lput "dynamic-check" verification 
  set function lput "carry" function
  set boolean lput ( not any? anima1z with [ member? nobody carried.items ] ) boolean
  
  set header lput "Agent not in multiple inventories carried.items?" header
  set verification lput "dynamic-check" verification 
  set function lput "carry" function
  set boolean lput ( not any? anima1z with [ count anima1z with [ member? myself carried.items ] > 1 ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; DROP
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Juveniles are not still being carried?" header 
  set verification lput "dynamic-check" verification 
  set function lput "drop" function
  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my.mother != nobody and member? self [carried.items] of my.mother ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; HURT
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to hurt less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "hurt" function
  set boolean lput ( profiler:calls "hurt" <= decision-count-for "hurt" ) boolean
  
  set header lput "Calls to hurt less than or equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "hurt" function
  set boolean lput ( profiler:calls "hurt" <= action-count-for "hurt" ) boolean
  
  set header lput "Gestatees do not hurt?" header 
  set verification lput "dynamic-check" verification 
  set function lput "hurt" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "hurt" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; HARM
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to hurt greater than or equal to calls to harm?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "harm" function
  set boolean lput ( profiler:calls "hurt" >= profiler:calls "harm" ) boolean
  
  set header lput "Number of actions for hurt greater than or equal to number of actions for harm?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "harm" function
  set boolean lput ( action-count-for "hurt" >= action-count-for "harm" ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; HELP
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to help less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "help" function
  set boolean lput ( profiler:calls "help" <= decision-count-for "help" ) boolean
  
  set header lput "Calls to help less than or equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "help" function
  set boolean lput ( profiler:calls "help" <= action-count-for "help" ) boolean
  
  set header lput "Gestatees do not help?" header 
  set verification lput "dynamic-check" verification 
  set function lput "help" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "help" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; AID
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to help greater than or equal to calls to aid?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "aid" function
  set boolean lput ( profiler:calls "aid" >= profiler:calls "aid" ) boolean
  
  set header lput "Number of actions for help greater than or equal to number of actions for aid?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "aid" function
  set boolean lput ( action-count-for "aid" >= action-count-for "aid" ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; MATE-WITH
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to mate-with less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "mate-with" function
  set boolean lput ( profiler:calls "mate-with" <= decision-count-for "mate-with" ) boolean
  
  set header lput "Calls to mate-with less than or equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "mate-with" function
  set boolean lput ( profiler:calls "mate-with" <= action-count-for "mate-with" ) boolean
  
  set header lput "Calls to mate-with non-zero if agent born during verification?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "mate-with" function
  set boolean lput ( ifelse-value ( any? anima1z with [ life.history = "gestatee" and age.in.ticks <= how-many-ticks? ] ) [ profiler:calls "mate-with" > 0 ] [ true ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; CONCEIVE-WITH
  ; --------------------------------------------------------------------------------------------------------------------

  set header lput "Calls to mate-with less than or equal to number of decisions?" header 
  set verification lput "runtime-boundaries" verification 
  set function lput "conceive-with" function
  set boolean lput ( profiler:calls "conceive-with" <= decision-count-for "conceive-with" ) boolean
  
  set header lput "Calls to conceive-with equal to number of actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "conceive-with" function
  set boolean lput ( profiler:calls "conceive-with" = action-count-for "conceive-with" ) boolean
  
  set header lput "No gestatees, infants, or juveniles have offspring? " header 
  set verification lput "dynamic-check" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ ( life.history = "gestatee" or life.history = "infant" or life.history = "juvenile" ) and any? my-offspring ]) boolean
  
  set header lput "There are a nonzero number of agents?" header 
  set verification lput "dynamic-check" verification 
  set function lput "conceive-with" function
  set boolean lput ( count anima1z > 0 ) boolean
  
  set header lput "There is at least one gestatee agent?" header 
  set verification lput "dynamic-check" verification 
  set function lput "conceive-with" function
  set boolean lput ( count anima1z with [ life.history = "gestatee" ] > 0 ) boolean
  
  set header lput "All pregnant females have a gestatee offspring? " header 
  set verification lput "dynamic-check" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ fertility.status = "pregnant" and not any? my-offspring with [ life.history = "gestatee" ] ] ) boolean
  
  set header lput "All living mothers of gestatees are pregnant? " header 
  set verification lput "dynamic-check" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my.mother != nobody and [fertility.status] of my.mother != "pregnant" ]  ) boolean
  
  set header lput "Only adult females can be pregnant? " header 
  set verification lput "dynamic-check" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ not ( life.history = "adult" and biological.sex = "female" ) and fertility.status = "pregnant" ] ) boolean
  
  set header lput "The only males who can conceive-with are adults?" header 
  set verification lput "dynamic-check" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ biological.sex = "male" and life.history != "adult" and my-actions-include "conceive-with" ] ) boolean
  
  set header lput "Gestatees do not conceive-with?" header 
  set verification lput "dynamic-check" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "conceive-with" ] ) boolean
  
  set header lput "Infants do not conceive-with?" header 
  set verification lput "dynamic-check" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ life.history = "infant" and my-actions-include "conceive-with" ] ) boolean
  
  set header lput "Juveniles do not conceive-with?" header 
  set verification lput "dynamic-check" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my-actions-include "conceive-with" ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; INITIALIZE-FROM-PARENTS
  ; --------------------------------------------------------------------------------------------------------------------

  set header lput "Calls to initialize-from-parents equal to number of conceive-with actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "initialize-from-parents" function
  set boolean lput ( profiler:calls "initialize-from-parents" = action-count-for "conceive-with" ) boolean
  
  set header lput "All agents have an identity?" header 
  set verification lput "dynamic-check" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ not is-number? my.identity or my.identity = 0 ] ) boolean
  
  set header lput "All gestatees are hidden?" header 
  set verification lput "dynamic-check" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and hidden? = false ] ) boolean
  
  set header lput "New gestatees are not dead?" header 
  set verification lput "dynamic-check" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ age.in.ticks = 0 and is.alive = false ] ) boolean
  
  set header lput "All agents are either male or female?" header 
  set verification lput "dynamic-check" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ biological.sex != "male" and biological.sex != "female" ] ) boolean
  
  set header lput "Agents have a non-negative generation number?" header 
  set verification lput "dynamic-check" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ generation.number < 0 ] ) boolean
  
  set header lput "Agents have a generation number one more than their mother?" header 
  set verification lput "dynamic-check" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ generation.number > 0 and my.mother != nobody and generation.number != [generation.number] of my.mother + 1 ] ) boolean
  
  set header lput "All gestatees have mother initiated birth set to true?" header 
  set verification lput "dynamic-check" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and mother.initiated.birth = "false" ] ) boolean
  
  set header lput "All infants have mother initiated weaning set to true?" header 
  set verification lput "dynamic-check" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ life.history = "infant" and mother.initiated.weaning = "false" ] ) boolean
  
  set header lput "All agents have a natal group size two or greater?" header 
  set verification lput "dynamic-check" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ generation.number > 0 and natal.group.size <= 1 ] ) boolean  
  
  set header lput "Gestatees do not have adult tracking values yet?" header 
  set verification lput "dynamic-check" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and 
    ( ticks.at.birth > 0 or ticks.at.weaning > 0 
      or ticks.at.sexual.maturity > 0 or ticks.at.death > 0 
      or adult.body.size > 0 or adult.body.shade > 0 
      or adult.visual.range > 0 or adult.mutation.chance > 0 
      or adult.sex.ratio > 0 or adult.litter.size > 0 
      or adult.conception.chance > 0 ) ] ) boolean
  
  set header lput "Every agent has a group.identity?" header
  set verification lput "dynamic-check" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ not is-number? group.identity or group.identity = 0 ] ) boolean 
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; SETUP-CHROMOSOMES-FROM
  ; --------------------------------------------------------------------------------------------------------------------

  set header lput "Calls to setup-chromosomes-from equal to number of conceive-with actions?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "setup-chromosomes-from" function
  set boolean lput ( ifelse-value ( not member? "no-evolution" model-structure  ) [ profiler:calls "setup-chromosomes-from" = action-count-for "conceive-with" ] [ true ] ) boolean
  
  set header lput "Agents are roughly half related to their mother?" header 
  set verification lput "dynamic-check" verification 
  set function lput "setup-chromosomes-from" function
  set boolean lput ( not any? anima1z with [ my.mother != nobody and ( relatedness-with my.mother < 0.4 or relatedness-with my.mother > 0.6 ) ] ) boolean
  
  set header lput "Agents are roughly one fourth related to their grandmother?" header 
  set verification lput "dynamic-check" verification 
  set function lput "setup-chromosomes-from" function
  set boolean lput ( not any? anima1z with [ my.mother != nobody and [my.mother] of my.mother != nobody and ( relatedness-with [my.mother] of my.mother < 0.35 or relatedness-with [my.mother] of my.mother > 0.15 ) ] ) boolean
  
  set header lput "Agents are roughly one eighth related to their great grandmother?" header 
  set verification lput "dynamic-check" verification 
  set function lput "setup-chromosomes-from" function
  set boolean lput ( not any? anima1z with [ my.mother != nobody and [my.mother] of my.mother != nobody and [my.mother] of [my.mother] of my.mother != nobody and ( relatedness-with [my.mother] of [my.mother] of my.mother < 0.15 or relatedness-with [my.mother] of [my.mother] of my.mother > 0.05 ) ] ) boolean
  
  ; --------------------------------------------------------------------------------------------------------------------
  ; MUTATE-CHROMOSOMES
  ; --------------------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to mutate-chromosome equal to double the number of calls to setup chromosome?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "mutate-chromosome" function
  set boolean lput ( profiler:calls "mutate-chromosome" = 2 * profiler:calls "setup-chromosomes-from" ) boolean
  
  
  set verification-results ( sentence verification-results boolean )
  
  report (list header verification function boolean )
  profiler:stop 
  
end

to-report my-actions-include [ input ]
  report length filter [ vector -> item 1 vector = self and item 3 vector = input ] recent-actions-completed > 0 
end

to-report last-actions-include [ input ]
  report length filter [ vector -> item 2 vector = input ] actions.completed > 0 
end

to-report decision-count-for [ input ]
  report length filter [ vector -> item 3 vector = input ] recent-decisions-made
end

to-report action-count-for [ input ]
  report length filter [ vector -> item 3 vector = input ] recent-actions-completed
end

to-report updated-value-check [ saved-value random-value new-value ]
  report true
end

to-report my-targets
  let my-decisions filter [ vector -> item 1 vector = self ] recent-decisions-made
  let my-targets-list remove-duplicates map [ i -> item 2 i ] my-decisions
  let targets anima1z with [ member? self my-targets-list ]
  report targets
end


