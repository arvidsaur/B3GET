; =================================================================================================================== ;
;                                                                 
;  dP     dP  88888888b  888888ba  dP  88888888b dP  a88888b.  .d888888  d888888P dP  .88888.  888888ba  
;  88     88  88         88    `8b 88  88        88 d8'   `88 d8'    88     88    88 d8'   `8b 88    `8b 
;  88    .8P a88aaaa    a88aaaa8P' 88 a88aaaa    88 88        88aaaaa88a    88    88 88     88 88     88 
;  88    d8'  88         88   `8b. 88  88        88 88        88     88     88    88 88     88 88     88 
;  88  .d8P   88         88     88 88  88        88 Y8.   .88 88     88     88    88 Y8.   .8P 88     88 
;  888888'    88888888P  dP     dP dP  dP        dP  Y88888P' 88     88     dP    dP  `8888P'  dP     dP 
;                                                                                                      
;
; This extension contains all functions related to verifying B3GET's code during simulations.    
;
; Â© 2022 K N Crouse  
; =================================================================================================================== ;
;
; GENERATE RECORD OF MOST RECENT DYNAMIC VERIFICATION ASSESSMENT
;
; Generates a "tape" of all verification measurements. This subroutine requires profiler to be running or 
; it may not return accurate results. It also assumes that a simulation is currently operating. During 
; the assessment, this subroutine performs a series of assertion checks to determine if a condition is met 
; in the current state. These assurtions are assumed to be true in the program. The external file looks 
; something like this where each row respresents a tape:
;
; DATE-AND-TIME  MODEL-VERSION  SIMULATION-ID  TICKS    ASSERTION_1     ASSERTION_2     ASSERTION_3   ....
;  - - - - -      - - - - - -    - - - - - -    - -    subroutine_1    subroutine_2    subroutine_3    ....
;  - - - - -      - - - - - -    - - - - - -    - -     2021-01-01      2021-01-01      2021-01-01    ....
; date-and-time  model-version  simulation-id  ticks   true / false    true / false    true / false   ....
; date-and-time  model-version  simulation-id  ticks   true / false    true / false    true / false   ....
; date-and-time  model-version  simulation-id  ticks   true / false    true / false    true / false   ....
; date-and-time  model-version  simulation-id  ticks   true / false    true / false    true / false   ....
;
; Each assertion is a statement that is either true or false about the current state of the simulation.
; The expectation is that the assertion is true because these assertions represent explicit assumptions
; made about the structure and behavior of the program. For each assertion, the program determines
; whether or not it is true for the current simulation state and records that assesment to an external
; file. These assertions are listed below and grouped by the associated subroutine. The assertion is 
; written out in English and in code to faciliate maintenance and transparency of these assertions.
;
; ENTRY: There is a simulation currently in operation and there are anima1s present.
;
; EXIT: Reports the summary information about the recent dynamic verification assessment.
;
; ------------------------------------------------------------------------------------------------------------------- ;   

to-report generate-verification-tape

  let header (list "date-and-time" "model-version" "simulation-id" "ticks" )
  let verification (list "" "" "" "" )
  let function (list "" "" "" "" )
  let boolean (list date-and-time model-version simulation-id ticks ) 
  
  ;---------------------------------------------------------------------------------------------------------
  ; GO
  ;---------------------------------------------------------------------------------------------------------
  
  set header lput "All individuals are either a gestatee, infant, juvenile or adult?" header
  set verification lput "2022-09-15" verification
  set function lput "go" function
  set boolean lput ( not any? anima1z with [ life.history != "gestatee" and 
    life.history != "infant" and life.history != "juvenile" and life.history != "adult" ] ) boolean
  
  ;---------------------------------------------------------------------------------------------------------
  ; --- MODEL STRUCTURE
  ;---------------------------------------------------------------------------------------------------------
  
;  set header lput "No individuals can see beyond the maximum visual range?" header 
;  set verification lput "2022-09-15" verification 
;  set function lput "go" function
;  set boolean lput ( not any? anima1z with [ ( max [distance myself] of my.environment ) > visual.range ]) boolean
  
  set header lput "Not any individuals with a negative energy supply?" header 
  set verification lput "2022-09-15" verification 
  set function lput "go" function
  set boolean lput ( not any? anima1z with [ energy.supply < 0 ] ) boolean 
  
  set header lput "There is population level variation in body size?" header 
  set verification lput "2022-09-15" verification 
  set function lput "go" function
  set boolean lput ( standard-deviation [body.size] of anima1z > 0 ) boolean 
  
  ;---------------------------------------------------------------------------------------------------------
  ; PLANTS-UPDATE
  ;---------------------------------------------------------------------------------------------------------
  
  set header lput "Plants are only updated once a timestep?" header 
  set verification lput "2022-09-15" verification 
  set function lput "plants-update" function
  set boolean lput ( profiler:calls "plants-update" = 1 ) boolean   
  
  set header lput "No plants have an energy supply that exceeds the maximum allowed?" header 
  set verification lput "2022-09-15" verification 
  set function lput "plants-update" function
  set boolean lput ( not any? patches with [ penergy.supply > pterminal.energy ] ) boolean   
  
  ;---------------------------------------------------------------------------------------------------------
  ; DETERIORATE 
  ;---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to deteriorate are the same as non-decayed individuals?" header 
  set verification lput "2021-06-06" verification 
  set function lput "deteriorate" function
  set boolean lput ( profiler:calls "deteriorate" = ( count anima1s with [ not fully.decayed ] + count anima1s with [ ticks.at.death = ticks ] ) ) boolean

  ;---------------------------------------------------------------------------------------------------------
  ; UPDATE-APPEARANCE
  ;---------------------------------------------------------------------------------------------------------

  set header lput "All individuals have a body size between 0 and 1?" header 
  set verification lput "2021-06-06" verification 
  set function lput "update-appearance" function
  set boolean lput ( not any? anima1z with [ size > 1 or size < 0 ] ) boolean  
  
  ;---------------------------------------------------------------------------------------------------------
  ; GET-SHAPE
  ;---------------------------------------------------------------------------------------------------------
  
  set header lput "All female individuals are circle shaped?" header 
  set verification lput "2021-06-06" verification 
  set function lput "get-shape" function
  set boolean lput ( not any? anima1z with [ age.in.ticks > 0 and biological.sex = "female" and not member? "circle" shape ] ) boolean   
  
  set header lput "All male individuals are triangle shaped?" header 
  set verification lput "2021-06-06" verification 
  set function lput "get-shape" function
  set boolean lput ( not any? anima1z with [ age.in.ticks > 0 and biological.sex = "male" and not member? "triangle" shape ] ) boolean   
  
  ; ---------------------------------------------------------------------------------------------------------
  ; CONSIDER-ENVIRONMENT
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Individual calls to consider-environment same number as living individuals?" header
  set verification lput "2021-06-06" verification 
  set function lput "consider-environment" function
  set boolean lput ( profiler:calls "consider-environment" = count anima1z ) boolean
  
  set header lput "There are not any individuals who are not also anima1s?" header 
  set verification lput "2021-06-06" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? turtles with [ breed != anima1s ]) boolean

  set header lput "Not any individuals with no day.perception who can see their environment during the day?" header 
  set verification lput "2021-06-06" verification 
  set function lput "consider-environment" function
  set boolean lput ( ifelse-value ( solar-status = "DAY" ) [ not any? anima1z with [ day.perception = 0 and is-list? my.environment and length my.environment > 2 ] ] [ true ] ) boolean

  set header lput "Not any individuals with no night.perception who can see their environment during the night?" header
  set verification lput "2021-06-06" verification 
  set function lput "consider-environment" function
  set boolean lput ( ifelse-value ( solar-status = "NIGHT" ) [ not any? anima1z with [ night.perception = 0 and is-list? my.environment and length my.environment > 2 ] ] [ true ] ) boolean

  set header lput "Not any individuals with no visual.range who can see their environment?" header 
  set verification lput "2021-06-06" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1z with [ visual.range = 0 and is-list? my.environment and length my.environment > 2 ] ) boolean

  set header lput "Not any individuals with no visual.angle who can see their environment?" header 
  set verification lput "2021-06-06" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1z with [ visual.angle = 0 and is-list? my.environment and length my.environment > 2 ] ) boolean

  set header lput "Gestatees can always see their living mothers?" header 
  set verification lput "2021-06-06" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my.mother != nobody and [is.alive] of my.mother = true and not member? my.mother my.environment ] ) boolean

  set header lput "Individuals who are alive can see their carried offpsring?" header 
  set verification lput "2021-06-06" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1z with [ is.alive and any? my-offspring with [ member? self [carried.items] of myself and not member? self [my.environment] of myself ] ] ) boolean
  
  set header lput "There are no duplicates in my.environment?" header 
  set verification lput "2021-06-06" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1z with [ length remove-duplicates my.environment < length my.environment ] ) boolean
  
  set header lput "Dead individuals do not have anything in my.environment?" header 
  set verification lput "2021-06-06" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1z with [ not is.alive and length my.environment > 0 ] ) boolean
  
  set header lput "Not any fully decayed individuals in someone's my.environment?" header 
  set verification lput "2021-06-06" verification 
  set function lput "consider-environment" function
  set boolean lput ( not any? anima1s with [ fully.decayed and member? self [my.environment] of anima1z ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; MAKE-DECISIONS
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Every individuals who is alive has decision.vectors?" header
  set verification lput "2021-06-06" verification ; there could be bad (but legitimate) mutations that cause this to not be true for some
  set function lput "make-decisions" function
  set boolean lput ( not any? anima1z with [ decision.vectors = [] or decision.vectors = 0 ] ) boolean     
  
  set header lput "Dead individuals do not have any decision.vectors?" header 
  set verification lput "2021-06-06" verification 
  set function lput "make-decisions" function
  set boolean lput ( not any? anima1z with [ not is.alive and is-list? decision.vectors and length decision.vectors > 0 ] ) boolean
  
  set header lput "Gestatees do not target non-maternal others?" header
  set verification lput "2021-06-06" verification 
  set function lput "make-decisions" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and any? my-targets with [ self != myself and self != [my.mother] of myself ] ] ) boolean
  
  set header lput "No male individuals can 'see' a gestatee?" header
  set verification lput "2021-06-06" verification 
  set function lput "make-decisions" function
  set boolean lput ( not any? anima1z with [ biological.sex = "male" and any? my-targets with [ life.history = "gestatee" and self != myself ]] ) boolean
  
  set header lput "No female individuals can 'see' a gestatee that isn't their own offspring?" header
  set verification lput "2021-06-06" verification 
  set function lput "make-decisions" function
  set boolean lput ( not any? anima1z with [ life.history = "female" and any? my-targets with [ life.history = "gestatee" and my.mother != myself ]] ) boolean

  ; ---------------------------------------------------------------------------------------------------------
  ; DO-ACTIONS
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to do-actions same as number of living individuals?" header 
  set verification lput "2021-06-06" verification 
  set function lput "do-actions" function
  set boolean lput ( profiler:calls "do-actions" = count anima1z ) boolean 

  set header lput "Individuals do not have completed actions with energy of 0?" header
  set verification lput "2021-06-06" verification 
  set function lput "do-actions" function
  set boolean lput ( not any? anima1z with [ length actions.completed > 0 and energy.supply = 0 ] ) boolean 
  ; Might return false if agent just completed an action that took their energy down to 0
  
  set header lput "There are no actions that can be completed with 0 cost?" header ;;;
  set verification lput "2021-06-06" verification 
  set function lput "do-actions" function
  set boolean lput ( length ( filter [ i -> i = 0 ] map [ j -> last j ] actions-completed-this-timestep ) > 0 ) boolean 

  set header lput "Dead individuals have not completed any actions?" header
  set verification lput "2021-06-06" verification 
  set function lput "do-actions" function
  set boolean lput ( not any? anima1z with [ not is.alive and length actions.completed > 0 ] ) boolean
  
  set header lput "Not any living individuals that have a higher energy cost than their energy gains?" header
  set verification lput "2021-06-06" verification 
  set function lput "do-actions" function
  set boolean lput ( not any? anima1z with [ generation.number > 0 and ( precision total.energy.gains 5 < precision total.energy.cost 5 )] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; SUVIVAL-CHANCE
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to survival-chance less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "survival-chance" function
  set boolean lput ( profiler:calls "survival-chance" <= decision-count-for "survival-chance" ) boolean
  
  set header lput "Calls to survival-chance equal to number of actions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "survival-chance" function
  set boolean lput ( profiler:calls "survival-chance" = action-count-for "survival-chance" ) boolean
  
  set header lput "All individuals have a survival.chance between zero and one?" header 
  set verification lput "2021-06-06" verification 
  set function lput "survival-chance" function
  set boolean lput ( not any? anima1z with [ survival.chance < 0 or survival.chance > 1 ] ) boolean

  set header lput "There are not any individuals who have a low survival.chance and are alive?" header 
  set verification lput "2021-06-06" verification 
  set function lput "survival-chance" function
  set boolean lput ( not any? anima1s with [ survival.chance < 0.95 and is.alive = true ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; BODY-SIZE
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to body-size less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "body-size" function
  set boolean lput ( profiler:calls "body-size" <= decision-count-for "body-size" ) boolean
  
  set header lput "Calls to body-size equal to number of actions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "body-size" function
  set boolean lput ( profiler:calls "body-size" = action-count-for "body-size" ) boolean
  
  set header lput "All individuals have a body.size is between zero and one?" header 
  set verification lput "2021-06-06" verification 
  set function lput "body-size" function
  set boolean lput ( not any? anima1z with [ body.size < 0 or body.size > 1 ] ) boolean

  set header lput "Infants are generally larger than gestatees?" header 
  set verification lput "2021-06-06" verification 
  set function lput "body-size" function
  set boolean lput ( (ifelse-value ( any? anima1z with [ life.history = "infant" ] ) 
    [ mean [body.size] of anima1z with [ life.history = "infant" ]] [1] ) >= 
    (ifelse-value ( any? anima1z with [ life.history = "gestatee" ] ) 
      [ mean [body.size] of anima1z with [ life.history = "gestatee"]] [0] )) boolean
  
  set header lput "Juveniles are generally larger than infants?" header 
  set verification lput "2021-06-06" verification 
  set function lput "body-size" function
  set boolean lput ( ( ifelse-value ( any? anima1z with [ life.history = "juvenile" ] ) 
    [ mean [body.size] of anima1z with [ life.history = "juvenile" ]] [1]) >= 
    (ifelse-value ( any? anima1z with [ life.history = "infant" ] ) 
      [mean [body.size] of anima1z with [ life.history = "infant"]] [0] )) boolean
  
  set header lput "Adults are generally larger than juveniles?" header 
  set verification lput "2021-06-06" verification 
  set function lput "body-size" function
  set boolean lput ( ( ifelse-value ( any? anima1z with [ life.history = "adult" ] ) 
    [ mean [body.size] of anima1z with [ life.history = "adult" ]][1]) >= 
    ( ifelse-value ( any? anima1z with [ life.history = "juvenile" ] ) 
      [mean [body.size] of anima1z with [ life.history = "juvenile"]] [0] )) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; BODY-SHADE
  ; --------------------------------------------------------------------------------------------------------- 
  
  set header lput "Calls to body-shade less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "body-shade" function
  set boolean lput ( profiler:calls "body-shade" <= decision-count-for "body-shade" ) boolean
  
  set header lput "Calls to body-shade equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "body-shade" function
  set boolean lput ( profiler:calls "body-shade" = action-count-for "body-shade" ) boolean
  
  set header lput "All individuals have a body.shade between zero and one? " header 
  set verification lput "2021-06-06" verification 
  set function lput "body-shade" function
  set boolean lput ( not any? anima1z with [ body.shade < 0 or body.shade > 1 ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; VISUAL-RANGE
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to visual-range less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "visual-range" function
  set boolean lput ( profiler:calls "visual-range" <= decision-count-for "visual-range" ) boolean
  
  set header lput "Calls to visual-range equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "visual-range" function
  set boolean lput ( profiler:calls "visual-range" = action-count-for "visual-range" ) boolean
  
  set header lput "All agents have a visual.range between zero and one? " header 
  set verification lput "2021-06-06" verification 
  set function lput "visual-range" function
  set boolean lput ( not any? anima1z with [ visual.range < 0 or visual.range > 1 ] ) boolean

  set header lput "Adults have a higher visual.range than younger individuals?" header 
  set verification lput "2021-06-06" verification 
  set function lput "visual-range" function
  set boolean lput ( ( ifelse-value ( any? anima1z with [ life.history = "adult" ]) 
    [mean [visual.range] of anima1z with [ life.history = "adult" ]][0]) >= 
    ( ifelse-value ( any? anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee" ] ) 
      [mean [visual.range] of anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee"]] [0] )) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; VISUAL-ANGLE
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to visual-angle less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "visual-angle" function
  set boolean lput ( profiler:calls "visual-angle" <= decision-count-for "visual-angle" ) boolean
  
  set header lput "Calls to visual-angle equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "visual-angle" function
  set boolean lput ( profiler:calls "visual-angle" = action-count-for "visual-angle" ) boolean
  
  set header lput "All individuals have a visual.angle between zero and one?" header 
  set verification lput "2021-06-06" verification 
  set function lput "visual-angle" function
  set boolean lput ( not any? anima1z with [ visual.angle < 0 or visual.angle > 1 ] ) boolean

  set header lput "Adults have a higher visual.angle than younger individuals?" header 
  set verification lput "2021-06-06" verification 
  set function lput "visual-angle" function
  set boolean lput ( ( ifelse-value ( any? anima1z with [ life.history = "adult" ]) 
    [mean [visual.angle] of anima1z with [ life.history = "adult" ]][0]) >= 
    ( ifelse-value ( any? anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee" ] )
      [mean [visual.angle] of anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee"]] [0] )) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; DAY-PERCEPTION
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to day-perception less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "day-perception" function
  set boolean lput ( profiler:calls "day-perception" <= decision-count-for "day-perception" ) boolean
  
  set header lput "Calls to day-perception equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "day-perception" function
  set boolean lput ( profiler:calls "day-perception" = action-count-for "day-perception" ) boolean
  
  set header lput "All individuals have a day.perception between zero and one?" header 
  set verification lput "2021-06-06" verification 
  set function lput "day-perception" function
  set boolean lput ( not any? anima1z with [ day.perception < 0 or day.perception > 1 ] ) boolean

  set header lput "Adults are generally more day perceptive than younger individuals?" header 
  set verification lput "2021-06-06" verification 
  set function lput "day-perception" function
  set boolean lput ( ( ifelse-value ( any? anima1z with [ life.history = "adult" ]) 
    [mean [day.perception] of anima1z with [ life.history = "adult" ]][0]) >= 
    ( ifelse-value ( any? anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee" ] ) 
      [mean [day.perception] of anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee"]] [0] )) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; NIGHT-PERCEPTION
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to night-perception less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "night-perception" function
  set boolean lput ( profiler:calls "night-perception" <= decision-count-for "night-perception" ) boolean
  
  set header lput "Calls to night-perception equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "night-perception" function
  set boolean lput ( profiler:calls "night-perception" = action-count-for "night-perception" ) boolean
  
  set header lput "All agents have a night.perception between zero and one?" header 
  set verification lput "2021-06-06" verification 
  set function lput "night-perception" function
  set boolean lput ( not any? anima1z with [ night.perception < 0 or night.perception > 1 ] ) boolean

  set header lput "Adults are generally more night perceptive than younger individuals?" header 
  set verification lput "2021-06-06" verification 
  set function lput "night-perception" function
  set boolean lput ( ( ifelse-value ( any? anima1z with [ life.history = "adult" ]) 
    [mean [night.perception] of anima1z with [ life.history = "adult" ]][0]) >= 
    ( ifelse-value ( any? anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee" ] ) 
      [mean [night.perception] of anima1z with [ life.history = "juvenile" or life.history = "infant" or life.history = "gestatee"]] [0] )) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; CONCEPTION-CHANCE
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to conception-chance less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "conception-chance" function
  set boolean lput ( profiler:calls "conception-chance" <= decision-count-for "conception-chance" ) boolean
  
  set header lput "Calls to conception-chance equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "conception-chance" function
  set boolean lput ( profiler:calls "conception-chance" = action-count-for "conception-chance" ) boolean
  
  set header lput "All individuals have a conception.chance between zero and one? " header 
  set verification lput "2021-06-06" verification 
  set function lput "conception-chance" function
  set boolean lput ( not any? anima1z with [ conception.chance < 0 or conception.chance > 1 ] ) boolean

  set header lput "Adults generally have higher conception.chance than non-adults?" header 
  set verification lput "2021-06-06" verification 
  set function lput "conception-chance" function
  set boolean lput ( ( ifelse-value ( any? anima1z with [ life.history = "adult" ] ) 
    [mean [conception.chance] of anima1z with [ life.history = "adult" ]][0] ) > ( ifelse-value ( any? anima1z with [ life.history = "juvenile" ] ) 
    [mean [conception.chance] of anima1z with [ life.history = "juvenile"]] [0] )) boolean
  
  set header lput "Adults with offspring have non-zero conception.chance?" header 
  set verification lput "2021-06-06" verification 
  set function lput "conception-chance" function
  set boolean lput ( not any? anima1z with [ count my-offspring > 0 and conception.chance = 0 ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; BITE-CAPACITY
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to bite-capacity less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "bite-capacity" function
  set boolean lput ( profiler:calls "bite-capacity" <= decision-count-for "bite-capacity" ) boolean
  
  set header lput "Calls to bite-capacity equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "bite-capacity" function
  set boolean lput ( profiler:calls "bite-capacity" = action-count-for "bite-capacity" ) boolean
  
  set header lput "All individuals have a bite.capacity between zero and one? " header 
  set verification lput "2021-06-06" verification 
  set function lput "bite-capacity" function
  set boolean lput ( not any? anima1z with [ bite.capacity < 0 or bite.capacity > 1 ] ) boolean

  set header lput "Juveniles and adults have a non-zero bite-capacity? " header 
  set verification lput "2021-06-06" verification 
  set function lput "bite-capacity" function
  set boolean lput ( not any? anima1z with [ ( life.history = "juvenile" or life.history = "adult" ) and bite.capacity = 0 ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; MUTATION-CHANCE
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to mutation-chance less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "mutation-chance" function
  set boolean lput ( profiler:calls "mutation-chance" <= decision-count-for "mutation-chance" ) boolean
  
  set header lput "Calls to mutation-chance equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "mutation-chance" function
  set boolean lput ( profiler:calls "mutation-chance" = action-count-for "mutation-chance" ) boolean
  
  set header lput "All individuals have a mutation.chance between zero and one? " header 
  set verification lput "2021-06-06" verification 
  set function lput "mutation-chance" function
  set boolean lput ( not any? anima1z with [ mutation.chance < 0 or mutation.chance > 1 ] ) boolean

  ; ---------------------------------------------------------------------------------------------------------
  ; SEX-RATIO
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to sex-ratio less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "sex-ratio" function
  set boolean lput ( profiler:calls "sex-ratio" <= decision-count-for "sex-ratio" ) boolean
  
  set header lput "Calls to sex-ratio equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "sex-ratio" function
  set boolean lput ( profiler:calls "sex-ratio" = action-count-for "sex-ratio" ) boolean
  
  set header lput "All individuals have a sex.ratio preference between zero and one? " header 
  set verification lput "2021-06-06" verification 
  set function lput "sex-ratio" function
  set boolean lput ( not any? anima1z with [ sex.ratio < 0 or sex.ratio > 1 ] ) boolean

  set header lput "There are some female individuals?" header 
  set verification lput "2021-06-06" verification 
  set function lput "sex-ratio" function
  set boolean lput ( any? anima1z with [ biological.sex = "female" ] ) boolean
  
  set header lput "There are some male individuals?" header 
  set verification lput "2021-06-06" verification 
  set function lput "sex-ratio" function
  set boolean lput ( any? anima1z with [ biological.sex = "male" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; LITTER-SIZE
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to litter-size less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "litter-size" function
  set boolean lput ( profiler:calls "litter-size" <= decision-count-for "litter-size" ) boolean
  
  set header lput "Calls to litter-size equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "litter-size" function
  set boolean lput ( profiler:calls "litter-size" = action-count-for "litter-size" ) boolean
  
  set header lput "All individuals have a litter.size index between zero and one? " header 
  set verification lput "2021-06-06" verification 
  set function lput "litter-size" function
  set boolean lput ( not any? anima1z with [ litter.size < 0 or litter.size > 1 ] ) boolean    

  ; ---------------------------------------------------------------------------------------------------------
  ; MOVE-TOWARD
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to move-toward less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "move-toward" function
  set boolean lput ( profiler:calls "move-toward" <= ( decision-count-for "move-toward" + decision-count-for "move-away-from" ) ) boolean
  
  set header lput "Calls to move-toward equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "move-toward" function
  set boolean lput ( profiler:calls "move-toward" = action-count-for "move-toward" ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; TURN-RIGHT
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to turn-right less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "turn-right" function
  set boolean lput ( profiler:calls "turn-right" <= decision-count-for "turn-right" ) boolean
  
  set header lput "Calls to turn-right equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "turn-right" function
  set boolean lput ( profiler:calls "turn-right" = action-count-for "turn-right" ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; GO-FORWARD
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to go-forward less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "go-forward" function
  set boolean lput ( profiler:calls "go-forward" <= decision-count-for "go-forward" ) boolean
  
  set header lput "Calls to go-forward equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "go-forward" function
  set boolean lput ( profiler:calls "go-forward" = action-count-for "go-forward" ) boolean
  
  set header lput "Gestatees do not move forward?" header 
  set verification lput "2021-06-06" verification 
  set function lput "go-forward" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "went-forward" ] ) boolean

  set header lput "Individuals generally travel more as they get older?" header 
  set verification lput "2021-06-06" verification 
  set function lput "go-forward" function
  let mean-infant-travel-distance (ifelse-value ( any? anima1z with [ life.history = "infant" ]) [ mean [distance.traveled] of anima1z with [ life.history = "infant" ]] [0])
  let mean-juvenile-travel-distance (ifelse-value ( any? anima1z with [ life.history = "juvenile" ]) [ mean [distance.traveled] of anima1z with [ life.history = "juvenile" ]] [0] )
  let mean-adult-travel-distance (ifelse-value ( any? anima1z with [ life.history = "adult" ]) [ mean [distance.traveled] of anima1z with [ life.history = "adult" ]] [0] )
  set boolean lput ( mean-infant-travel-distance <= mean-juvenile-travel-distance and mean-juvenile-travel-distance <= mean-adult-travel-distance ) boolean
  
  set header lput "Individuals who have traveled forward have travel distance greater than 0?" header
  set verification lput "2021-06-06" verification 
  set function lput "go-forward" function
  set boolean lput ( not any? anima1z with [ distance.traveled = 0 and my-actions-include "went-forward" ] ) boolean 
  
  ; ---------------------------------------------------------------------------------------------------------
  ; HIDE
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to hide less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "hide" function
  set boolean lput ( profiler:calls "hide" <= decision-count-for "hide" ) boolean
  
  set header lput "Calls to hide equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "hide" function
  set boolean lput ( profiler:calls "hide" = action-count-for "hide" ) boolean 
  
  set header lput "Individuals who are hidden are not 'seen' by others?" header ; doesn't apply to gestatees who are in mother's environment
  set verification lput "2021-06-06" verification 
  set function lput "hide" function
  set boolean lput ( not any? anima1z with [ life.history != "gestatee" and hidden? and member? self ( reduce sentence [my.environment] of other anima1z ) ] ) boolean 
  
  ; ---------------------------------------------------------------------------------------------------------
  ; REST
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to rest less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "rest" function
  set boolean lput ( profiler:calls "rest" <= decision-count-for "rest" ) boolean
  
  set header lput "Calls to rest equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "rest" function
  set boolean lput ( profiler:calls "rest" = action-count-for "rest" ) boolean
  
  set header lput "No one is resting and performing actions that are only done when not resting?" header
  set verification lput "2021-06-06" verification 
  set function lput "rest" function
  set boolean lput ( not any? anima1z with [ is.resting and not last-actions-include "rest" 
    and ( last-actions-include "move-toward" or last-actions-include "move-away-from" or last-actions-include "turn-right" 
      or last-actions-include "turn-left" or last-actions-include "go-forward" or last-actions-include "set-heading" 
      or last-actions-include "set-heading-random" or last-actions-include "hide" or last-actions-include "supply-to" 
      or last-actions-include "demand-from" or last-actions-include "eat" or last-actions-include "join" 
      or last-actions-include "leave" or last-actions-include "recruit" or last-actions-include "expel" 
      or last-actions-include "pick-up" or last-actions-include "put-down" or last-actions-include "cling-to" 
      or last-actions-include "squirm-from" or last-actions-include "help" or last-actions-include "hurt" or last-actions-include "mate-with" ) ] ) boolean 
  
  ; ---------------------------------------------------------------------------------------------------------
  ; SIGNALING
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to yellow-signal less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "yellow-signal" function
  set boolean lput ( profiler:calls "yellow-signal" <= decision-count-for "yellow-signal" ) boolean
  
  set header lput "Calls to yellow-signal equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "yellow-signal" function
  set boolean lput ( profiler:calls "yellow-signal" = action-count-for "yellow-signal" ) boolean
  
  set header lput "Calls to red-signal less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "red-signal" function
  set boolean lput ( profiler:calls "red-signal" <= decision-count-for "red-signal" ) boolean
  
  set header lput "Calls to red-signal equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "red-signal" function
  set boolean lput ( profiler:calls "red-signal" = action-count-for "red-signal" ) boolean
  
  set header lput "Calls to blue-signal less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "blue-signal" function
  set boolean lput ( profiler:calls "blue-signal" <= decision-count-for "blue-signal" ) boolean
  
  set header lput "Calls to blue-signal equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "blue-signal" function
  set boolean lput ( profiler:calls "blue-signal" = action-count-for "blue-signal" ) boolean
  
  set header lput "All individuals have a yellow.chance between zero and one? " header 
  set verification lput "2021-06-06" verification 
  set function lput "yellow-signal" function
  set boolean lput ( not any? anima1z with [ yellow.chance < 0 or yellow.chance > 1 ] ) boolean
  
  set header lput "All individuals have a red.chance between zero and one? " header 
  set verification lput "2021-06-06" verification 
  set function lput "red-signal" function
  set boolean lput ( not any? anima1z with [ red.chance < 0 or red.chance > 1 ] ) boolean
  
  set header lput "All individuals have a blue.chance between zero and one? " header 
  set verification lput "2021-06-06" verification 
  set function lput "blue-signal" function
  set boolean lput ( not any? anima1z with [ blue.chance < 0 or blue.chance > 1 ] ) boolean

  ; ---------------------------------------------------------------------------------------------------------
  ; CHECK-INFANCY
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to check-infancy less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-infancy" function
  set boolean lput ( profiler:calls "check-infancy" <= decision-count-for "check-infancy" ) boolean
  
  set header lput "Calls to check-infancy equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "check-infancy" function
  set boolean lput ( profiler:calls "check-infancy" = action-count-for "check-infancy" ) boolean
  
  set header lput "All individuals have infancy.chance between zero and one?" header
  set verification lput "2021-06-06" verification 
  set function lput "check-infancy" function
  set boolean lput ( not any? anima1z with [ infancy.chance < 0 or infancy.chance > 1 ] ) boolean    
  
  set header lput "Other individuals generally have higher infancy.chance than gestatees?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-infancy" function
  set boolean lput ( (ifelse-value ( any? anima1z with [ life.history != "gestatee" ] ) 
    [ mean [infancy.chance] of anima1z with [ life.history != "gestatee" ]] [0] ) > 
    (ifelse-value ( any? anima1z with [ life.history = "gestatee" ] ) [ mean [infancy.chance] of anima1z with [ life.history = "gestatee"]] [0] )) boolean

  set header lput "Infants do not check-infancy?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-infancy" function
  set boolean lput ( not any? anima1z with [ life.history = "infant" and my-actions-include "check-infancy" and label != "i" ] ) boolean
  
  set header lput "Juveniles do not check-infancy?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-infancy" function
  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my-actions-include "check-infancy" ] ) boolean
  
  set header lput "Adults do not check-infancy?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-infancy" function
  set boolean lput ( not any? anima1z with [ life.history = "adult" and my-actions-include "check-infancy" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; CHECK-BIRTH
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to check-birth less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-birth" function
  set boolean lput ( profiler:calls "check-birth" <= decision-count-for "check-birth" ) boolean
  
  set header lput "Calls to check-birth equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "check-birth" function
  set boolean lput ( profiler:calls "check-birth" = action-count-for "check-birth" ) boolean
  
  set header lput "All individuals have a birthing chance between zero and one? " header 
  set verification lput "2021-06-06" verification 
  set function lput "check-birth" function
  set boolean lput ( not any? anima1z with [ birthing.chance < 0 or birthing.chance > 1 ] ) boolean    
  
  set header lput "Pregnant individuals generally have higher birthing.chance than non-pregnant individuals?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-birth" function
  set boolean lput ( (ifelse-value ( any? anima1z with [ fertility.status = "pregnant" ] ) 
    [ mean [birthing.chance] of anima1z with [ fertility.status = "pregnant" ]] [0] ) >= 
    (ifelse-value ( any? anima1z with [ fertility.status != "pregnant" ] ) 
      [ mean [birthing.chance] of anima1z with [ fertility.status != "pregnant" ]] [0] )) boolean

  set header lput "There is at least one pregnant individual?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-birth" function
  set boolean lput ( count anima1z with [ fertility.status = "pregnant" ] > 0 ) boolean
  
  set header lput "Infants do not check-birth?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-birth" function
  set boolean lput ( not any? anima1z with [ life.history = "infant" and my-actions-include "check-birth" ] ) boolean
  
  set header lput "Juveniles do not check-birth?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-birth" function
  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my-actions-include "check-birth" ] ) boolean
  
  set header lput "Adult males do not check-birth?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-birth" function
  set boolean lput ( not any? anima1z with [ life.history = "adult" and biological.sex = "male" and my-actions-include "check-birth" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; GIVE-BIRTH
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to give-birth are equal to calls to update-to-infant?" header
  set verification lput "2021-06-06" verification 
  set function lput "give-birth" function
  set boolean lput ( profiler:calls "give-birth" = profiler:calls "update-to-infant" ) boolean
  
  set header lput "Not any individuals who are not adult females and give birth?" header
  set verification lput "2021-06-06" verification 
  set function lput "check-birth" function
  set boolean lput ( not any? anima1z with [ my-actions-include "give-birth" and biological.sex != "female" and life.history != "adult" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; UPDATE-TO-INFANT
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "There is at least one infant?" header 
  set verification lput "2021-06-06" verification 
  set function lput "update-to-infant" function
  set boolean lput ( count anima1z with [ life.history = "infant" ] > 0 ) boolean
  
  set header lput "Infants have a timestamp for infancy?" header 
  set verification lput "2021-06-06" verification 
  set function lput "update-to-infant" function
  set boolean lput ( not any? anima1z with [ generation.number > 0 and ticks.at.birth = 0 and life.history = "infant" ] ) boolean
  
  set header lput "Individuals signal when they turned from gestatee to infant?" header 
  set verification lput "2021-06-06" verification 
  set function lput "update-to-infant" function
  set boolean lput ( not any? anima1z with [ label = "i" and ( ticks.at.birth - ticks.at.conception != age.in.ticks ) ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; CHECK-JUVENILITY
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to check-juvenility less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-juvenility" function
  set boolean lput ( profiler:calls "check-juvenility" <= decision-count-for "check-juvenility" ) boolean
  
  set header lput "Calls to check-juvenility equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "check-juvenility" function
  set boolean lput ( profiler:calls "check-juvenility" = action-count-for "check-juvenility" ) boolean
  
  set header lput "Individuals have a juvenility chance between zero and one? " header 
  set verification lput "2021-06-06" verification 
  set function lput "check-juvenility" function
  set boolean lput ( not any? anima1z with [ juvenility.chance < 0 or juvenility.chance > 1 ] ) boolean
  
  set header lput "Adults and juveniles generally have higher juvenility.chance than infants or gestatees?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-juvenility" function
  set boolean lput ( (ifelse-value ( any? anima1z with [ life.history != "adult" or life.history != "juvenile" ] ) 
    [ mean [juvenility.chance] of anima1z with [ life.history != "adult" or life.history != "juvenile" ]] [0] ) >= 
    (ifelse-value ( any? anima1z with [ life.history = "gestatee" or life.history = "infant" ] ) 
      [ mean [juvenility.chance] of anima1z with [ life.history = "gestatee" or life.history = "infant" ]] [0] )) boolean
  
  set header lput "Juveniles do not check-juvenility?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-juvenility" function
  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my-actions-include "check-juvenility" and label != "j" ] ) boolean
  
  set header lput "Adults do not check-juvenility?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-juvenility" function
  set boolean lput ( not any? anima1z with [ life.history = "adult" and my-actions-include "check-juvenility" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; CHECK-WEANING
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to check-weaning less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-weaning" function
  set boolean lput ( profiler:calls "check-weaning" <= decision-count-for "check-weaning" ) boolean
  
  set header lput "Calls to check-weaning equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "check-weaning" function
  set boolean lput ( profiler:calls "check-weaning" = action-count-for "check-weaning" ) boolean
  
  set header lput "There is at least one lactating female?" header
  set verification lput "2021-06-06" verification 
  set function lput "check-weaning" function
  let any-lactating-females any? anima1z with [ fertility.status = "lactating" ]
  set boolean lput ( any-lactating-females ) boolean   
  
  set header lput "All individuals have a weaning chance between zero and one?" header
  set verification lput "2021-06-06" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ weaning.chance < 0 or weaning.chance > 1 ] ) boolean  
  
  set header lput "There are no gestatees with a lactating mother?" header
  set verification lput "2021-06-06" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and [fertility.status] of my.mother = "lactating" ] ) boolean  
  
  set header lput "All mothers of infants are lactating?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ fertility.status != "lactating" and any? anima1z with [ life.history = "infant" and my.mother = myself ] ] ) boolean
  
  set header lput "There are no gestatees with mothers who are not pregnant?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my.mother != nobody and [fertility.status] of my.mother != "pregnant" ]) boolean
  
  set header lput "Only adult females are lactating?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ fertility.status = "lactating" and ( life.history != "adult" or biological.sex = "male" ) ] ) boolean
  
  set header lput "Lactating individuals generally have higher weaning chance than non-lactating agents?" header
  set verification lput "2021-06-06" verification 
  set function lput "check-weaning" function
  set boolean lput ( (ifelse-value ( any? anima1z with [ fertility.status = "lactating" ] ) [ mean [weaning.chance] of anima1z with [ fertility.status = "lactating" ]] [0] ) >= 
    (ifelse-value ( any? anima1z with [ fertility.status != "lactating" ] ) [ mean [weaning.chance] of anima1z with [ fertility.status != "lactating" ]] [0] )) boolean
  
  set header lput "Individuals who are not lactating do not check weaning?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ fertility.status != "lactating" and my-actions-include "check-weaning" ] ) boolean

  set header lput "Infants do not check-weaning?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ life.history = "infant" and my-actions-include "check-weaning" ] ) boolean
  
  set header lput "Juveniles do not check-weaning?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my-actions-include "check-weaning" ] ) boolean
  
  set header lput "Adult males do not check-weaning?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-weaning" function
  set boolean lput ( not any? anima1z with [ life.history = "adult" and biological.sex = "male" and my-actions-include "check-weaning" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; WEAN-OFFSPRING
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to wean-offspring are equal to call to update-to-juvenile?" header
  set verification lput "2021-06-06" verification 
  set function lput "wean-offspring" function
  set boolean lput ( profiler:calls "wean-offspring" = profiler:calls "update-to-juvenile" ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; UPDATE-TO-JUVENILE
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "There is at least one juvenile?" header 
  set verification lput "2021-06-06" verification 
  set function lput "update-to-juvenile" function
  set boolean lput ( count anima1z with [ life.history = "juvenile" ] > 0 ) boolean
  
  set header lput "Juveniles have a timestamp for juvenility?" header 
  set verification lput "2021-06-06" verification 
  set function lput "update-to-juvenile" function
  set boolean lput ( not any? anima1z with [ generation.number > 0 and ticks.at.weaning = 0 and life.history = "juvenile" ] ) boolean
  
  set header lput "Individuals signal when they turned from infant to juvenile?" header 
  set verification lput "2021-06-06" verification 
  set function lput "update-to-juvenile" function
  set boolean lput ( not any? anima1z with [ label = "j" and ( ticks.at.weaning - ticks.at.conception != age.in.ticks ) ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; CHECK-ADULTHODD
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to check-adulthood less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-adulthood" function
  set boolean lput ( profiler:calls "check-adulthood" <= decision-count-for "check-adulthood" ) boolean
  
  set header lput "Calls to check-adulthood equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "check-adulthood" function
  set boolean lput ( profiler:calls "check-adulthood" = action-count-for "check-adulthood" ) boolean
  
  set header lput "All individuals have an adulthood chance is between zero and one? " header 
  set verification lput "2021-06-06" verification 
  set function lput "check-adulthood" function
  set boolean lput ( not any? anima1z with [ adulthood.chance < 0 or adulthood.chance > 1 ] ) boolean
  
  set header lput "Adults generally have higher adulthood chance than juveniles, infants or gestatees?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-adulthood" function
  set boolean lput ( 
    (ifelse-value ( any? anima1z with [ life.history = "adult" ] ) [ mean [adulthood.chance] of anima1z with [ life.history = "adult" ]] [0] ) > 
    (ifelse-value ( any? anima1z with [ life.history = "gestatee" or life.history = "infant" or life.history = "juvenile" ] ) 
      [ mean [adulthood.chance] of anima1z with [ life.history = "gestatee" or life.history = "infant" or life.history = "juvenile"]] [0] )) boolean
  
  set header lput "All individuals who are older than juvenile do not check adulthood?" header 
  set verification lput "2021-06-06" verification 
  set function lput "check-adulthood" function
  set boolean lput ( not any? anima1z with [ life.history = "adult" and my-actions-include "check-adulthood" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; UPDATE-TO-ADULT
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "There is at least one adult?" header 
  set verification lput "2021-06-06" verification 
  set function lput "update-to-adult" function
  set boolean lput ( count anima1z with [ life.history = "adult" ] > 0 ) boolean
  
  set header lput "All adult females have one of fertility options?" header 
  set verification lput "2021-06-06" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ life.history = "adult" and biological.sex = "female" and 
    (fertility.status != "cycling" and fertility.status != "pregnant" and fertility.status != "lactating") ] ) boolean
  
  set header lput "There are no individuals who have a fertility status who are not adult females?" header 
  set verification lput "2021-06-06" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ biological.sex = "female" and life.history = "adult" and fertility.status = " " ] ) boolean
  
  set header lput "Only adult females can be cycling?" header 
  set verification lput "2021-06-06" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ ( life.history != "adult" or biological.sex = "male" ) and fertility.status = "cycling" ] ) boolean
  
  set header lput "Cycling females do not have any infants?" header
  set verification lput "2021-06-06" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ fertility.status = "cycling" and any? anima1z with [ life.history = "infant" and my.mother = myself ]]  ) boolean
  
  set header lput "Cycling females do not have any gestatees? " header 
  set verification lput "2021-06-06" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ fertility.status = "cycling" and any? anima1z with [ life.history = "gestatee" and my.mother = myself ]] ) boolean
  
  set header lput "Adults have a timestamp for adulthood?" header 
  set verification lput "2021-06-06" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ generation.number > 0 and ticks.at.sexual.maturity = 0 and life.history = "adult" ] ) boolean
  
  set header lput "Individuals signal when they turned from juvenile to adult?" header 
  set verification lput "2021-06-06" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ label = "a" and ( ticks.at.sexual.maturity - ticks.at.conception != age.in.ticks ) ] ) boolean
  
  set header lput "Only adults have non-zero values for adult tracking variables? " header 
  set verification lput "2021-06-06" verification 
  set function lput "update-to-adult" function
  set boolean lput ( not any? anima1z with [ 
    ( life.history = "gestatee" or life.history = "infant" or life.history = "juvenile" ) 
    and ( adult.survival.chance > 0 or adult.body.size > 0 or adult.body.shade > 0 or adult.energy.supply > 0
      or adult.bite.capacity > 0 or adult.mutation.chance > 0 or adult.sex.ratio > 0 or adult.litter.size > 0 
      or adult.conception.chance > 0 or adult.visual.range > 0 or adult.visual.angle > 0 
      or adult.day.perception > 0 or adult.night.perception > 0 
      or adult.yellow.chance > 0 or adult.red.chance > 0 or adult.blue.chance > 0 )]) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; SUPPLY-TO
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to supply-to less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "supply-to" function
  set boolean lput ( profiler:calls "supply-to" <= decision-count-for "supply-to" ) boolean
  
  set header lput "Calls to supply-to equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "supply-to" function
  set boolean lput ( profiler:calls "supply-to" = action-count-for "supply-to" ) boolean
  
  set header lput "Individuals who are not pregnant or lactating do not supply to other agents?" header 
  set verification lput "2021-06-06" verification 
  set function lput "supply-to" function
  set boolean lput ( not any? anima1z with [ ( fertility.status != "pregnant" and fertility.status != "lactating" ) and my-actions-include "supply-to" ] ) boolean

  set header lput "Infants do not supply-to?" header 
  set verification lput "2021-06-06" verification 
  set function lput "supply-to" function
  set boolean lput ( not any? anima1z with [ life.history = "infant" and my-actions-include "supply-to" ] ) boolean
  
  set header lput "Juveniles do not supply-to?" header 
  set verification lput "2021-06-06" verification 
  set function lput "supply-to" function
  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my-actions-include "supply-to" ] ) boolean
  
  set header lput "Adult males do not supply-to?" header 
  set verification lput "2021-06-06" verification 
  set function lput "supply-to" function
  set boolean lput ( not any? anima1z with [ life.history = "adult" and biological.sex = "male" and my-actions-include "supply-to" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; DEMAND-FROM 
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to demand-from less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "demand-from" function
  set boolean lput ( profiler:calls "demand-from" <= decision-count-for "demand-from" ) boolean
  
  set header lput "Calls to demand-from equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "demand-from" function
  set boolean lput ( profiler:calls "demand-from" = action-count-for "demand-from" ) boolean

  set header lput "Individuals who are not gestatee or infant do not demand from other individuals?" header 
  set verification lput "2021-06-06" verification 
  set function lput "demand-from" function
  set boolean lput ( not any? anima1z with [ ( life.history != "gestatee" and life.history != "infant" ) and my-actions-include "demand-from" ] ) boolean

  set header lput "Juveniles do not demand-from?" header 
  set verification lput "2021-06-06" verification 
  set function lput "demand-from" function
  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my-actions-include "demand-from" ] ) boolean
  
  set header lput "Adults do not demand-from?" header 
  set verification lput "2021-06-06" verification 
  set function lput "demand-from" function
  set boolean lput ( not any? anima1z with [ life.history = "adult" and my-actions-include "demand-from" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; EAT
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to eat less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "eat" function
  set boolean lput ( profiler:calls "eat" <= decision-count-for "eat" ) boolean
  
  set header lput "Calls to eat equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "eat" function
  set boolean lput ( profiler:calls "eat" = action-count-for "eat" ) boolean
  
  set header lput "All individuals have positive non-zero energy supply?" header 
  set verification lput "2021-06-06" verification 
  set function lput "eat" function
  set boolean lput ( not any? anima1z with [ energy.supply < 0 ] ) boolean
  
  set header lput "All individuals who are younger than juvenile do not eat?" header 
  set verification lput "2021-06-06" verification 
  set function lput "eat" function
  set boolean lput ( not any? anima1z with [ ( life.history = "gestatee" or life.history = "infant" ) and my-actions-include "eat" ] ) boolean

  set header lput "Individuals generally gain more from foraging as they get older?" header 
  set verification lput "2021-06-06" verification 
  set function lput "eat" function
  let gestatee-foraging-gains ( ifelse-value ( any? anima1z with [ life.history = "gestatee" ] ) [ mean [foraging.gains] of anima1z with [ life.history = "gestatee" ]] [0] )
  let infant-foraging-gains ( ifelse-value ( any? anima1z with [ life.history = "infant" ] ) [ mean [foraging.gains] of anima1z with [ life.history = "infant" ]] [0] )
  let juvenile-foraging-gains ( ifelse-value ( any? anima1z with [ life.history = "juvenile" ] ) [ mean [foraging.gains] of anima1z with [ life.history = "juvenile" ] ] [0] )
  let adult-foraging-gains ( ifelse-value ( any? anima1z with [ life.history = "adult" ] ) [ mean [foraging.gains] of anima1z with [ life.history = "adult" ] ] [0] )
  set boolean lput ( gestatee-foraging-gains <= infant-foraging-gains and infant-foraging-gains <= juvenile-foraging-gains and juvenile-foraging-gains <= adult-foraging-gains  ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; RECEIVE-FROM
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to receive-from equal to number of action vectors?" header 
  set verification lput "2021-06-06" verification
  set function lput "receive-from" function
  set boolean lput ( profiler:calls "receive-from" = action-count-for "receive-from" ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; JOIN
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to join less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "join" function
  set boolean lput ( profiler:calls "join" <= decision-count-for "join" ) boolean
  
  set header lput "Calls to join equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "join" function
  set boolean lput ( profiler:calls "join" = action-count-for "join" ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; LEAVE 
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to leave less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "leave" function
  set boolean lput ( profiler:calls "leave" <= decision-count-for "leave" ) boolean
  
  set header lput "Calls to leave equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "leave" function
  set boolean lput ( profiler:calls "leave" = action-count-for "leave" ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; RECRUIT 
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to recruit less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "recruit" function
  set boolean lput ( profiler:calls "recruit" <= decision-count-for "recruit" ) boolean
  
  set header lput "Calls to recruit equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "recruit" function
  set boolean lput ( profiler:calls "recruit" = action-count-for "recruit" ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; EXPEL
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to expel less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "expel" function
  set boolean lput ( profiler:calls "expel" <= decision-count-for "expel" ) boolean
  
  set header lput "Calls to expel equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "expel" function
  set boolean lput ( profiler:calls "expel" = action-count-for "expel" ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; JOIN-GROUP 
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to join-group less than or equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "join-group" function
  set boolean lput ( profiler:calls "join-group" <= action-count-for "join-group" ) boolean
  
  set header lput "Gestatees do not join groups?" header 
  set verification lput "2021-06-06" verification 
  set function lput "join-group" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "join-group" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; LEAVE-GROUP
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to leave-group less than or equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "leave-group" function
  set boolean lput ( profiler:calls "leave-group" <= action-count-for "leave-group" ) boolean
  
  set header lput "Gestatees do not leave groups?" header 
  set verification lput "2021-06-06" verification 
  set function lput "leave-group" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "leave-group" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; PICK-UP 
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to pick-up less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "pick-up" function
  set boolean lput ( profiler:calls "pick-up" <= decision-count-for "pick-up" ) boolean
  
  set header lput "Calls to pick-up equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "pick-up" function
  set boolean lput ( profiler:calls "pick-up" = action-count-for "pick-up" ) boolean
  
  set header lput "Gestatees do not pick-up?" header 
  set verification lput "2021-06-06" verification 
  set function lput "pick-up" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "pick-up" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; PUT-DOWN 
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to put-down less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "put-down" function
  set boolean lput ( profiler:calls "put-down" <= decision-count-for "put-down" ) boolean
  
  set header lput "Calls to put-down 0equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "put-down" function
  set boolean lput ( profiler:calls "put-down" = action-count-for "put-down" ) boolean
  
  set header lput "Gestatees do not put-down?" header 
  set verification lput "2021-06-06" verification 
  set function lput "put-down" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "put-down" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; CLING-TO
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to cling-to less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "cling-to" function
  set boolean lput ( profiler:calls "cling-to" <= decision-count-for "cling-to" ) boolean
  
  set header lput "Calls to cling-to equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "cling-to" function
  set boolean lput ( profiler:calls "cling-to" = action-count-for "cling-to" ) boolean
  
  set header lput "Gestatees do not cling-to?" header 
  set verification lput "2021-06-06" verification 
  set function lput "cling-to" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "cling-to" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; SQUIRM-FROM
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to squirm-from less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "squirm-from" function
  set boolean lput ( profiler:calls "squirm-from" <= decision-count-for "squirm-from" ) boolean
  
  set header lput "Calls to squirm-from equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "squirm-from" function
  set boolean lput ( profiler:calls "squirm-from" = action-count-for "squirm-from" ) boolean
  
  set header lput "Gestatees do not squirm-from?" header 
  set verification lput "2021-06-06" verification 
  set function lput "squirm-from" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "squirm-from" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; CARRY
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to carry equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "carry" function
  set boolean lput ( profiler:calls "carry" = action-count-for "carry" ) boolean
  
  set header lput "Pregnant females always carry their gestatees?" header ; check this one
  set verification lput "2021-06-06" verification 
  set function lput "carry" function
  set boolean lput ( not any? anima1z with [ fertility.status = "pregnant" and 
    any? my-offspring with [ is.alive and life.history = "gestatee" and not member? self [carried.items] of myself ] ] ) boolean
  
  set header lput "Lactating females always carry their infants?" header ; check this one
  set verification lput "2021-06-06" verification 
  set function lput "carry" function
  set boolean lput ( not any? anima1z with [ fertility.status = "lactating" and 
    any? my-offspring with [ is.alive and life.history = "infant" and not member? self [carried.items] of myself ] ] ) boolean

  set header lput "All infants are carried by someone?" header 
  set verification lput "2021-06-06" verification 
  set function lput "carry" function
  set boolean lput ( not any? anima1z with [ life.history = "infant" and 
    my.mother != nobody and [is.alive] of my.mother and not member? self [carried.items] of my.mother ] ) boolean
  
  set header lput "Individuals are not carrying 'nobody' items?" header 
  set verification lput "2021-06-06" verification 
  set function lput "carry" function
  set boolean lput ( not any? anima1z with [ member? nobody carried.items ] ) boolean
  
  set header lput "Not any individuals in multiple carried.items inventories?" header
  set verification lput "2021-06-06" verification 
  set function lput "carry" function
  set boolean lput ( not any? anima1z with [ count anima1z with [ member? myself carried.items ] > 1 ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; DROP
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Adults are not still being carried?" header 
  set verification lput "2021-06-06" verification 
  set function lput "drop" function
  set boolean lput ( not any? anima1z with [ life.history = "adult" and my.mother != nobody and member? self [carried.items] of my.mother ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; ATTACK
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to attack less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "attack" function
  set boolean lput ( profiler:calls "attack" <= decision-count-for "attack" ) boolean
  
  set header lput "Calls to attack equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "attack" function
  set boolean lput ( profiler:calls "attack" = action-count-for "attack" ) boolean
  
  set header lput "Gestatees do not attack?" header 
  set verification lput "2021-06-06" verification 
  set function lput "attack" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "attack" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; HARM
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to attack greater than or equal to calls to harm?" header 
  set verification lput "2021-06-06" verification
  set function lput "harm" function
  set boolean lput ( profiler:calls "attack" >= profiler:calls "harm" ) boolean
  
  set header lput "Number of actions for attack greater than or equal to number of actions for harm?" header 
  set verification lput "2021-06-06" verification
  set function lput "harm" function
  set boolean lput ( action-count-for "attack" >= action-count-for "harm" ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; HELP
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to help less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "help" function
  set boolean lput ( profiler:calls "help" <= decision-count-for "help" ) boolean
  
  set header lput "Calls to help equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "help" function
  set boolean lput ( profiler:calls "help" = action-count-for "help" ) boolean
  
  set header lput "Gestatees do not help?" header 
  set verification lput "2021-06-06" verification 
  set function lput "help" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "help" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; AID
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to help greater than or equal to calls to aid?" header 
  set verification lput "2021-06-06" verification
  set function lput "aid" function
  set boolean lput ( profiler:calls "help" >= profiler:calls "aid" ) boolean
  
  set header lput "Number of actions for help greater than or equal to number of actions for aid?" header 
  set verification lput "2021-06-06" verification
  set function lput "aid" function
  set boolean lput ( action-count-for "help" >= action-count-for "aid" ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; MATE-WITH
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to mate-with less than or equal to number of decisions?" header 
  set verification lput "2021-06-06" verification 
  set function lput "mate-with" function
  set boolean lput ( profiler:calls "mate-with" <= decision-count-for "mate-with" ) boolean
  
  set header lput "Calls to mate-with equal to number of actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "mate-with" function
  set boolean lput ( profiler:calls "mate-with" = action-count-for "mate-with" ) boolean
  
  set header lput "Calls to mate-with non-zero if individual born this timestep?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "mate-with" function
  set boolean lput ( ifelse-value ( any? anima1z with [ life.history = "gestatee" and age.in.ticks = 0 ] ) [ profiler:calls "mate-with" > 0 ] [ true ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; CONCEIVE-WITH
  ; ---------------------------------------------------------------------------------------------------------

  set header lput "Calls to conceive-with less than or equal to calls to mate-with?" header 
  set verification lput "runtime-boundaries" verification
  set function lput "conceive-with" function
  set boolean lput ( profiler:calls "conceive-with" <= profiler:calls "mate-with" ) boolean
  
  set header lput "No gestatees, infants, or juveniles have offspring? " header 
  set verification lput "2021-06-06" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ ( life.history = "gestatee" or life.history = "infant" or life.history = "juvenile" ) and any? my-offspring ]) boolean
  
  set header lput "There are a nonzero number of individuals?" header 
  set verification lput "2021-06-06" verification 
  set function lput "conceive-with" function
  set boolean lput ( count anima1z > 0 ) boolean
  
  set header lput "There is at least one gestatee?" header 
  set verification lput "2021-06-06" verification 
  set function lput "conceive-with" function
  set boolean lput ( count anima1z with [ life.history = "gestatee" ] > 0 ) boolean
  
  set header lput "All pregnant females have a gestatee offspring? " header 
  set verification lput "2021-06-06" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ fertility.status = "pregnant" and not any? my-offspring with [ life.history = "gestatee" ] ] ) boolean
  
  set header lput "All living mothers of gestatees are pregnant? " header 
  set verification lput "2021-06-06" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my.mother != nobody and [fertility.status] of my.mother != "pregnant" ]  ) boolean
  
  set header lput "Only adult females can be pregnant? " header 
  set verification lput "2021-06-06" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ not ( life.history = "adult" and biological.sex = "female" ) and fertility.status = "pregnant" ] ) boolean
  
  set header lput "The only males who can conceive-with are adults?" header 
  set verification lput "2021-06-06" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ biological.sex = "male" and life.history != "adult" and my-actions-include "conceive-with" ] ) boolean
  
  set header lput "Gestatees do not conceive-with?" header 
  set verification lput "2021-06-06" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and my-actions-include "conceive-with" ] ) boolean
  
  set header lput "Infants do not conceive-with?" header 
  set verification lput "2021-06-06" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ life.history = "infant" and my-actions-include "conceive-with" ] ) boolean
  
  set header lput "Juveniles do not conceive-with?" header
  set verification lput "2021-06-06" verification 
  set function lput "conceive-with" function
  set boolean lput ( not any? anima1z with [ life.history = "juvenile" and my-actions-include "conceive-with" ] ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; INITIALIZE-FROM-PARENTS
  ; ---------------------------------------------------------------------------------------------------------

  set header lput "Calls to initialize-from-parents less than or equal to number of conceive-with actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "initialize-from-parents" function
  set boolean lput ( profiler:calls "initialize-from-parents" <= action-count-for "conceive-with" ) boolean
  
  set header lput "All individuals have an identity number?" header 
  set verification lput "2021-06-06" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ not is-number? my.identity or my.identity = 0 ] ) boolean
  
  set header lput "All gestatees are hidden?" header 
  set verification lput "2021-06-06" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and hidden? = false ] ) boolean
  
  set header lput "New gestatees are not dead?" header 
  set verification lput "2021-06-06" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ age.in.ticks = 0 and is.alive = false ] ) boolean
  
  set header lput "All individuals are either male or female?" header 
  set verification lput "2021-06-06" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ biological.sex != "male" and biological.sex != "female" ] ) boolean
  
  set header lput "Individuals have a non-negative generation number?" header 
  set verification lput "2021-06-06" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ generation.number < 0 ] ) boolean
  
  set header lput "Individuals have a generation number one more than their mother?" header 
  set verification lput "2021-06-06" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ generation.number > 0 and my.mother != nobody and generation.number != [generation.number] of my.mother + 1 ] ) boolean
  
  set header lput "All gestatees have mother initiated birth set to true?" header 
  set verification lput "2021-06-06" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and mother.initiated.birth = "false" ] ) boolean
  
  set header lput "All infants have mother initiated weaning set to true?" header 
  set verification lput "2021-06-06" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ life.history = "infant" and mother.initiated.weaning = "false" ] ) boolean
  
  set header lput "All individuals have a natal group size two or greater?" header 
  set verification lput "2021-06-06" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ generation.number > 0 and natal.group.size <= 1 ] ) boolean  
  
  set header lput "Gestatees do not have adult tracking values yet?" header 
  set verification lput "2021-06-06" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ life.history = "gestatee" and 
    ( ticks.at.birth > 0 or ticks.at.weaning > 0 
      or ticks.at.sexual.maturity > 0 or ticks.at.death > 0 
      or adult.body.size > 0 or adult.body.shade > 0 
      or adult.visual.range > 0 or adult.mutation.chance > 0 
      or adult.sex.ratio > 0 or adult.litter.size > 0 
      or adult.conception.chance > 0 ) ] ) boolean
  
  set header lput "Every individuals has a group.identity?" header
  set verification lput "2021-06-06" verification 
  set function lput "initialize-from-parents" function
  set boolean lput ( not any? anima1z with [ not is-number? group.identity or group.identity = 0 ] ) boolean 
  
  ; ---------------------------------------------------------------------------------------------------------
  ; SETUP-CHROMOSOMES-FROM
  ; ---------------------------------------------------------------------------------------------------------

  set header lput "Calls to setup-chromosomes-from less than or equal to number of conceive-with actions?" header 
  set verification lput "2021-06-06" verification
  set function lput "setup-chromosomes-from" function
  set boolean lput ( ifelse-value ( not member? "no-evolution" model-structure  ) [ profiler:calls "setup-chromosomes-from" <= action-count-for "conceive-with" ] [ true ] ) boolean
  
  set header lput "Individuals are roughly half related to their mother?" header 
  set verification lput "2021-06-06" verification 
  set function lput "setup-chromosomes-from" function
  let mean-mother-relatedness mean [ relatedness-with my.mother ] of anima1z with [ my.mother != nobody ]
  set boolean lput ( mean-mother-relatedness > 0.4 and mean-mother-relatedness < 0.6 ) boolean
  
  ; ---------------------------------------------------------------------------------------------------------
  ; MUTATE-CHROMOSOMES
  ; ---------------------------------------------------------------------------------------------------------
  
  set header lput "Calls to mutate-chromosome equal to double the number of calls to setup chromosome?" header 
  set verification lput "2021-06-06" verification
  set function lput "mutate-chromosome" function
  set boolean lput ( profiler:calls "mutate-chromosome" = 2 * profiler:calls "setup-chromosomes-from" ) boolean
  
  
  set verification-results ( sentence verification-results boolean )
  
  report (list header verification function boolean )

end

; ------------------------------------------------------------------------------------------------------------------- ;   
; DETERMINE IF ACTIONS INCLUDE SPECIFIED TYPE
; ------------------------------------------------------------------------------------------------------------------- ;   

to-report my-actions-include [ input ]
  report length filter [ vector -> item 0 vector = self and item 2 vector = input ] (reduce sentence [actions.completed] of anima1z) > 0 
end

; ------------------------------------------------------------------------------------------------------------------- ;   
; DETERMINE IF MOST RECENTLY COMPLETED ACTIONS INCLUDE INPUT
; ------------------------------------------------------------------------------------------------------------------- ;   

to-report last-actions-include [ input ]
  report length filter [ vector -> item 2 vector = input ] actions.completed > 0 
end

; ------------------------------------------------------------------------------------------------------------------- ;   
; RETURNS NUMBER OF DECISIONS FROM INPUT TYPE
; ------------------------------------------------------------------------------------------------------------------- ;   

to-report decision-count-for [ input ]
  report length filter [ vector -> item 2 vector = input ] (reduce sentence [decision.vectors] of anima1z)
end

; ------------------------------------------------------------------------------------------------------------------- ;   
; RETURNS NUMBER OF ACTIONS FROM INPUT TYPE
; ------------------------------------------------------------------------------------------------------------------- ;   

to-report action-count-for [ input ]
  report length filter [ vector -> item 2 vector = input ] (reduce sentence [actions.completed] of anima1z)
end

; ------------------------------------------------------------------------------------------------------------------- ;   
; RETURNS A LIST OF CURRENT TARGETS OF AN INDIVIDUAL
; ------------------------------------------------------------------------------------------------------------------- ;   

to-report my-targets
  let my-targets-list remove-duplicates map [ i -> item 1 i ] decision.vectors
  let targets anima1z with [ member? self my-targets-list ]
  report targets
end

; ------------------------------------------------------------------------------------------------------------------- ;   
; RETURN AN AGENTSET OF LIVING ANIMA1S
; ------------------------------------------------------------------------------------------------------------------- ;   

to-report anima1z 
  report anima1s with [ is.alive ]
end



