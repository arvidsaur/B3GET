;----------------------------------------------------------------------------------------------
;
;                     dP   d8888b.          
;                     88       `88          
; .d8888b. .d8888b. d8888P  aaad8' .d8888b. 
; 88'  `88 88'  `88   88       `88 Y8ooooo. 
; 88.  .88 88.  .88   88       .88       88 
; `8888P88 `88888P8   dP   d88888P `88888P' 
;      .88                                  
;  d8888P                                                                             
; 
; Â© 2021 K N Crouse   
;----------------------------------------------------------------------------------------------
; 
; This extension contains all functions that allow anima1s to make decisions from their 
; genotypes.
;
; List of all genotype cod0ns:
; 
; CODE  MAINTENANCE  DESCRIPTION                
;
; TRU   2019-09-XX   true
; FAL   2019-09-XX   false 
; XXX   2019-09-XX   ""
; YXX   2019-09-XX   "Y" 
; YRX   2019-09-XX   "YR" 
; YRB   2019-09-XX   "YRB" 
; XRX   2019-09-XX   "R" 
; XRB   2019-09-XX   "RB" 
; XXB   2019-09-XX   "B" 
; YXB   2019-09-XX   "YB" 
; FEM   2019-09-XX   female 
; MAL   2019-09-XX   male 
; GES   2019-09-XX   "gestatee" 
; INF   2019-09-XX   "infant" 
; JUV   2019-09-XX   "juvenile" 
; ADT   2019-09-XX   "adult" 
; OVU   not done     "ovulating"   ; to do
; CYC   2019-09-XX   "cycling"
; PRG   2019-09-XX   "pregnant" 
; LAC   2019-09-XX   "lactating" 
; RNM   2019-09-XX   random floating number from 0 to 1
; RNB   2019-09-XX   random boolean (true or false)
; DAY   XXXX-XX-XX   is day?
; NGT   XXXX-XX-XX   is night?
;
; NOT   not done     logical NOT ___
; AND   not done     ___ logical AND ___
; ORR   not done     ___ logical OR ___
; EQL   2019-09-XX   ___ is equal to ___
; NQL   2019-09-XX   ___ is not equal to ___
; GRT   2019-09-XX   ___ is greater than ___
; LST   2019-09-XX   ___ is less than ___
; SDO   2019-09-XX   ___ is same color shade as ___
; UUU   2019-09-XX   ___ set union ___
; NNN   2019-09-XX   ___ set intersection ___
; ANY   2019-09-XX   any targets with ___
; ONE   2019-09-XX   one-of targets with ___
; MEE   2019-09-XX   I am one of targets with ___
; ALL   2019-09-XX   all targets
;
; MID   2019-09-XX   target's meta-id   
; SIZ   2019-09-XX   target's size
; COL   2019-09-XX   target's color
; HDG   XXXX-XX-XX   target's heading
; IRG   XXXX-XX-XX   target is resting?
; SEX   2019-09-XX   target's sex
; SHD   2019-09-XX   target's body.shade
; LFH   2019-09-XX   target's life.history
; FER   2019-09-XX   target's fertility
; GRP   2019-09-XX   target's group.identity
; YON   2019-09-XX   target's yellow signal is on?
; RON   2019-09-XX   target's red signal is on?
; BON   2019-09-XX   target's blue signal is on?
; SIG   2019-09-XX   target's current signal state ( i.e. "abc" or "a" or "bc" )
; EGO   2019-09-XX   target is ego?
; DSE   2019-09-XX   target's distance to myself
; ISA   2019-09-XX   target is an anima1?
; ISP   2019-09-XX   target is a plant?
; ALV   2019-09-XX   target is alive?
; CRD   2019-09-XX   target is carried by me?
; CRG   2019-09-XX   target is carrying me?
; MYO   2019-09-XX   target is one of my-offspring? (female only)
; MOM   2019-09-XX   target is my mother? 
; REL   XXXX-XX-XX   target's relatedness to self
;
; EMI   2019-09-XX   ego's meta-id
; EAG   not done     ego's age
; ESZ   2019-09-XX   ego's size
; ECL   2019-09-XX   ego's color
; EHD   XXXX-XX-XX   ego's heading
; ESX   2019-09-XX   ego's biological.sex
; ESD   2019-09-XX   ego's body.shade
; ELH   2019-09-XX   ego's life.history
; EFR   2019-09-XX   ego's female.fertility
; EGP   2019-09-XX   ego's group.identity
; EYW   2019-09-XX   ego's yellow signal is on?
; ERD   2019-09-XX   ego's red signal is on?
; EBL   2019-09-XX   ego's blue signal is on?
; ERG   XXXX-XX-XX   ego is resting
; EHC   XXXX-XX-XX   ego's hidden chance
; ENG   2019-09-XX   ego's energy.supply
; EBS   2019-09-XX   ego's body.size
; ESR   2019-09-XX   ego's sex.ratio
; ELS   2019-09-XX   ego's litter.size
; ECC   2019-09-XX   ego's conception.chance
; EBY   2019-09-XX   ego's bite.capacity
; EMC   2019-09-XX   ego's mutation.chance
; EVR   2019-09-XX   ego's visual.range
; EVA   2019-09-XX   ego's visual angle
; EDP   2019-09-XX   ego's day.perception
; ENP   2019-09-XX   ego's night.perception
; EBC   2019-09-XX   ego's birthing.chance
; EWC   2019-09-XX   ego's weaning.chance
; EIC   2019-09-XX   ego's infancy.chance
; EJC   2019-09-XX   ego's juvenility.chance
; EAC   2019-09-XX   ego's adulthood.chance
; ELC   2019-09-XX   ego's survival.chance
; EYC   2019-09-XX   ego's yellow.chance
; ERC   2019-09-XX   ego's red.chance
; EBC   2019-09-XX   ego's blue.chance
; EXC   XXXX-XX-XX   ego's X coordinate
; EYC   XXXX-XX-XX   ego's Y coordinate
;
; THN   2019-09-XX   if [TRUE] --> 
; TNT   2019-09-XX   if [FALSE] -->
;        
; SVC   2019-08-26   --> survival-chance
; BDS   2019-08-26   --> body-size                 
; BSD   2019-08-26   --> body-shade              
; VSR   2019-08-26   --> visual-range   
; VSA   2019-08-26   --> visual-angle
; DPR   2019-08-26   --> day-perception        
; NPR   2019-08-26   --> night-perception
; CNC   2019-08-26   --> conception-chance
; BTC   2020-04-XX   --> bite-capacity
; MTC   2019-08-26   --> mutation-chance            
; SXR   2019-08-26   --> sex-ratio               
; LTS   2019-08-26   --> litter-size               
; TRT   2019-08-26   --> turn-right               
; TLF   2019-08-26   --> turn-left                 
; GFD   2019-08-26   --> go-forward      
; STH   2020-XX-XX   --> set-heading 
; SHR   2020-XX-XX   --> set-heading-random 
; HID   2020-XX-XX   --> hide  
; YWS   2019-08-26   --> yellow-signal             
; RDS   2019-08-26   --> red-signal              
; BLS   2019-08-26   --> blue-signal             
; CKI   2019-08-26   --> check-infancy             
; CKB   2019-08-26   --> check-birth               
; CKJ   2019-08-26   --> check-juvenility         
; CKW   2019-08-26   --> check-weaning              
; CKA   2019-08-26   --> check-adulthood           

; MOV   2020-04-01   --> move-toward
; MAF   2020-04-01   --> move-away-from
; SPT   2019-10-16   --> supply-to 
; DMF   2019-10-16   --> demand-from
; EAT   2019-10-16   --> eat
; JON   2019-09-XX   --> join
; LEV   2019-08-26   --> leave
; RCT   2019-09-XX   --> recruit
; EXP   2019-08-26   --> expel
; PKU   2019-09-XX   --> pick-up
; PDN   2019-10-16   --> put-down
; CLG   2020-04-XX   --> cling-to
; SQM   2020-04-XX   --> squirm-from
; HLP   2019-09-XX   --> help
; ATK   2019-09-XX   --> attack 
; MTW   2019-10-16   --> mate-with
; RST   XXXX-XX-XX   --> rest
; 
;----------------------------------------------------------------------------------------------


;----------------------------------------------------------------------------------------------
; GET-DECISIONS
;
; Reporter that returns a list of decision vectors generated from genotype.
;
; Caller: anima1
; ENVIRONMENT: list of turtles (both plants and anima1s) observed by the caller.
;----------------------------------------------------------------------------------------------

to-report gat3s-get-decisions [ environment ]
  report get-iterative-decisions self environment [] true ( sentence chromosome.I chromosome.II ) [] []
end

;---------------------------------------------------------------------------------------------- 
; INTERATIVE 'HELPER' FUNCTION 
;----------------------------------------------------------------------------------------------

to-report get-iterative-decisions [ me old-environment old-gates old-boolean old-feed old-targets old-vectors ]
  
  let meself self
  let decision-vectors []
  
  if ( self = subject ) [ print (word "GID: environment - " old-environment "  gates - " old-gates "  boolean - " old-boolean "  feed - "  length old-feed "  targets - " old-targets " vectors - " old-vectors )]

  if ( length old-feed > 0 ) [
    
    let allele first old-feed
    
    if ( length allele > 0 and is-boolean? first allele ) [ set allele but-first allele ] ; fix to accomodate [1], [2] etc.
    
    if ( self = subject ) [ print old-feed ]
    if ( self = subject ) [ print allele ]
    
    ;---------------------------------------------------------------------------------------------- 
    ; ALLELE CODE IS EMPTY ---> CREATE DECISION VECTORS 
    ;----------------------------------------------------------------------------------------------
    
    ifelse ( length allele = 0 ) [ ; end of allele, so generate decision-vectors from gathered information
      set decision-vectors ( sentence decision-vectors generate-decision-vectors old-targets old-vectors )
    ]
    
    ;---------------------------------------------------------------------------------------------- 
    ; ALLELE CODE IS NOT EMPTY ---> (READ CODE)
    ;----------------------------------------------------------------------------------------------
    
    [ ; READ THE NEXT CHUNK OF CODE of AN ALLELE
      
      ; get new chunk:
      let split break-apart-allele allele
      let section-of-code first split
      let remaining-allele last split
      
      let first-clip first section-of-code
      
      ; settings for continuing iteration 
      let new-feed replace-item 0 old-feed remaining-allele
      let new-gates [] ;--->
      let new-boolean old-boolean
      let new-targets old-targets
      let new-vectors old-vectors
      
      ;---------------------------------------------------------------------------------------------- 
      ; (READ CODE) ---> CODE is a "LOGIC GATE" ---> SAVE LOGIC GATE and MOVE ON
      ;----------------------------------------------------------------------------------------------
      
      ifelse ( member? first section-of-code gate-codons ) [

        (ifelse 
          
          ( first-clip = "THN" ) [
            set new-boolean old-boolean ]
          
          ( first-clip = "TNT" ) [
            set new-boolean not old-boolean ]
          
          [ set new-gates lput first-clip old-gates ]) ;<----
        
      ][
        
        ;---------------------------------------------------------------------------------------------- 
        ; (READ CODE) ---> CODE is a "DECISION" ---> SAVE DECISION and MOVE ON
        ;----------------------------------------------------------------------------------------------
        
        ifelse ( member? first-clip action-codons ) [ ; this halts if code that is action is not in action-codons

          if ( old-boolean ) [
            let new-action item 0 section-of-code
            let new-weight item 1 section-of-code
 
            set decision-vectors ( sentence decision-vectors ( get-iterative-decisions me old-environment [] old-boolean (list first new-feed ) old-targets (lput (list new-action new-weight ) old-vectors))) ; continues with just remaining bit of allele, if any
          ]
          ; settings for continuing iteration 
          set new-boolean true ; really?
          set new-feed ( but-first new-feed ) ; rest of interative decisions starts with rest of feed ---,,,?>
          set new-targets []
          set new-vectors []
        ]
        
        ;---------------------------------------------------------------------------------------------- 
        ; (READ CODE) ---> CODE is an "ENVIRONMENT FILTER" ---> FILTER AGENTS and MOVE ON
        ;----------------------------------------------------------------------------------------------
        
        [
          set new-targets []
          foreach old-environment [ obj ->
            let bool-result read-section section-of-code obj
            if ( bool-result ) [ set new-targets lput obj new-targets ]
          ]

          foreach old-gates [ gate ->
            
            if ( gate = "ANY" ) [ set new-targets new-targets ]
            
            if ( gate = "NNN" ) [ 
              let new-new-targets []
              foreach new-targets [ obj ->
                if ( member? obj old-targets ) [
                  set new-new-targets lput obj new-new-targets
                ] 
              ]
              set new-targets new-new-targets
              ;new-targets with [ member? self old-targets ] 
            ]
            
            if ( gate = "UUU" ) [ set new-targets sentence old-targets new-targets ]
            
            if ( gate = "ONE" ) [ set new-targets n-of 1 new-targets ]
            
            if ( gate = "MEE" ) [ set new-targets n-of 1 new-targets with [ self = myself ] ]
            
            if ( gate = "ALL" ) [ set new-targets old-environment ]
            
            set new-boolean not empty? new-targets 
          
          ]
          
      ]]
      
      set decision-vectors ( sentence decision-vectors ( get-iterative-decisions me old-environment new-gates new-boolean new-feed new-targets new-vectors ) ) ;<?'''----

  ]]
  
  report decision-vectors
  
end

to-report generate-decision-vectors [ old-targets old-vectors ]; Make each combination of vectors and targets to create decision-vector
  let decs []
  foreach old-targets [ new-target ->
    foreach old-vectors [ v ->
      let new-action g8tes-get-action item 0 v
      let new-weight item 1 v
      set decs lput (list self new-target new-action new-weight ) decs]]
  report decs  
end

to-report break-apart-allele [ allele ] ; SLOW
  let remaining-allele []
  let section-of-code []
  let section-length 0
  let part-of-chunk true
  ; separate allele into next chunk and remaining allele
  foreach allele [ c ->
    ifelse ( not part-of-chunk ) [
      set remaining-allele lput c remaining-allele
    ][
      ifelse ( member? c gate-codons ) [
        
        ifelse ( section-length > 0 ) [
          set remaining-allele lput c []
        ][
          set section-of-code lput c []
          set section-length 1
        ]
        set part-of-chunk false 
      ][
        set section-of-code lput c section-of-code 
        set section-length section-length + 1
  ]]]
  report (list section-of-code remaining-allele)
end

to-report g8tes-get-action [ action-code ]
  
  report
  (ifelse-value
    
    ( action-code = "MOV" ) [ "move-toward" ]
    ( action-code = "MAF" ) [ "move-away-from" ]
    ( action-code = "TRT" ) [ "turn-right" ]
    ( action-code = "TLF" ) [ "turn-left" ]
    ( action-code = "GFD" ) [ "go-forward" ]
    ( action-code = "STH" ) [ "set-heading" ]
    ( action-code = "SHR" ) [ "set-heading-random" ]
    ( action-code = "HID" ) [ "hide" ]
    ( action-code = "EAT" ) [ "eat" ]
    ( action-code = "JON" ) [ "join" ]
    ( action-code = "LEV" ) [ "leave" ]
    ( action-code = "RCT" ) [ "recruit" ]
    ( action-code = "EXP" ) [ "expel" ]
    ( action-code = "PKU" ) [ "pick-up" ]
    ( action-code = "PDN" ) [ "put-down" ]
    ( action-code = "CLG" ) [ "cling-to" ]
    ( action-code = "SQM" ) [ "squirm-from" ]
    ( action-code = "HLP" ) [ "help" ]
    ( action-code = "ATK" ) [ "hurt" ] ; change to HRT??
    ( action-code = "MTW" ) [ "mate-with" ]
    
    ( action-code = "RST" ) [ "rest" ]
    ( action-code = "SVC" ) [ "survival-chance" ]
    ( action-code = "BDS" ) [ "body-size" ]
    ( action-code = "BSD" ) [ "body-shade" ]
    ( action-code = "VSR" ) [ "visual-range" ] 
    ( action-code = "VSA" ) [ "visual-angle" ]
    ( action-code = "DPR" ) [ "day-perception" ]
    ( action-code = "NPR" ) [ "night-perception" ]
    ( action-code = "CNC" ) [ "conception-chance" ]
    ( action-code = "BTC" ) [ "bite-capacity" ] 
    ( action-code = "MTC" ) [ "mutation-chance" ]
    ( action-code = "SXR" ) [ "sex-ratio" ]
    ( action-code = "LTS" ) [ "litter-size" ]
    ( action-code = "YWS" ) [ "yellow-signal" ]
    ( action-code = "RDS" ) [ "red-signal" ] 
    ( action-code = "BLS" ) [ "blue-signal" ]
    ( action-code = "CKI" ) [ "check-infancy" ]
    ( action-code = "CKB" ) [ "check-birth" ]
    ( action-code = "CKJ" ) [ "check-juvenility" ]
    ( action-code = "CKW" ) [ "check-weaning" ]
    ( action-code = "CKA" ) [ "check-adulthood" ]
    ( action-code = "SPT" ) [ "supply-to" ]
    ( action-code = "DMF" ) [ "demand-from" ]

    [ "" ])
  
end

to-report read-section [ section target ] ; make it so can only pass sections of 3, then don't need to calculate length as much
                                          ;  let operator ifelse-value ( length section = 3 ) [ item 1 section ] [ "" ]
                                          ;
                                          ;  let left-value read-code ( ifelse-value ( length section = 3 ) [ item 0 section ] [ "" ] ) target
                                          ;  let right-value read-code ( ifelse-value ( length section = 3 ) [ item 2 section ] [ "" ] ) target
  
  let operator item 1 section
  
  let left-value read-code item 0 section target
  let right-value read-code item 2 section target
  
  ; do I need this code below??
  ;if ( not ( is-number? left-value or is-boolean? left-value ) ) [ set left-value false ] 
  ;if ( not ( is-number? right-value or is-boolean? right-value ) ) [ set right-value false ] 
  
  report (ifelse-value
    ( operator = "EQL" ) [ left-value = right-value ]
    ( operator = "NQL" ) [ left-value != right-value ]
    ( operator = "GRT" ) [ left-value > right-value ]
    ( operator = "LST" ) [ left-value < right-value ]
    ( operator = "SDO" ) [ shade-of? left-value right-value ]
    [ false ])
end

to-report read-code [ code target ]
  report (ifelse-value
    
    ( is-number? code ) [ code ]
    ( is-boolean? code ) [ code ]
    
    ; what EGO can see about ANYONE
    ( code = "EGO" ) [ target = self ] 
    ( code = "ISA" ) [ is-anima1? target ]
    ( code = "ISP" ) [ is-patch? target ]
    ( code = "MID" and is-anima1? target ) [ [meta.id] of target ]
    ( code = "SEX" and is-anima1? target ) [ [biological.sex] of target ]
    ( code = "LFH" and is-anima1? target ) [ [life.history] of target ] 
    ( code = "FER" and is-anima1? target ) [ [female.fertility] of target ]  
    ( code = "GRP" and is-anima1? target ) [ [group.identity] of target ]  
    ( code = "ALV" and is-anima1? target ) [ [is.alive] of target ] 
    ( code = "YON" and is-anima1? target ) [ [yellow.signal] of target ] 
    ( code = "RON" and is-anima1? target ) [ [red.signal] of target ]
    ( code = "BON" and is-anima1? target ) [ [blue.signal] of target ]
    ( code = "SIG" and is-anima1? target ) [ (word ifelse-value ( [yellow.signal] of target ) [ "Y" ] [ "" ] ifelse-value ( [red.signal] of target ) [ "R" ] [ "" ] ifelse-value ( [blue.signal] of target ) [ "B" ] [ "" ]) ]
    ( code = "SIZ" and is-anima1? target ) [ [size] of target ]
    ( code = "SHD" and is-anima1? target ) [ [body.shade] of target ]
    ( code = "COL" and is-anima1? target ) [ [round color] of target ] ; update to plants
    ( code = "HDG" and is-anima1? target ) [ [heading] of target ] 
    ( code = "IRG" and is-anima1? target ) [ [is.resting] of target ]
    ( code = "DSE" ) [ distance target ]
    ( code = "CRD" and is-anima1? target ) [ member? target [carried.items] of self ]
    ( code = "CRG" and is-anima1? target ) [ member? self [ carried.items ] of target ]
    ( code = "MYO" and is-anima1? target and biological.sex = "female" ) [ member? target [my-offspring] of self ]
    ( code = "MOM" and is-anima1? target ) [ [my.mother] of self = target ]
    ( code = "REL" and is-anima1? target ) [ relatedness-with target ]

    ; what only EGO can see about ITSELF
    ; It does not matter who the target is
    ( code = "EMI" ) [ meta.id ]
    ( code = "ESX" ) [ biological.sex ]
    ( code = "ELH" ) [ life.history ] 
    ( code = "EFR" ) [ female.fertility ]
    ( code = "EGP" ) [ group.identity ]  
    ( code = "EYW" ) [ yellow.signal ]  
    ( code = "ERD" ) [ red.signal ]  
    ( code = "EBL" ) [ blue.signal ]  
    ( code = "ESZ" ) [ size ]
    ( code = "EBS" ) [ body.size ]
    ( code = "ESD" ) [ body.shade ]
    ( code = "ECL" ) [ round color ]
    ( code = "EHD" ) [ heading ] 
    ( code = "ERG" ) [ is.resting ]
    ( code = "EHC" ) [ hidden.chance ] 
    ( code = "ENG" ) [ energy.supply ]
    ( code = "ESR" ) [ sex.ratio ]
    ( code = "ELS" ) [ litter.size ]
    ( code = "ECC" ) [ conception.chance ]
    ( code = "EBY" ) [ bite.capacity ]
    ( code = "EMC" ) [ mutation.chance ]
    ( code = "EVR" ) [ visual.range ]
    ( code = "EVA" ) [ visual.angle ]
    ( code = "EDP" ) [ day.perception ]
    ( code = "ENP" ) [ night.perception ]
    ( code = "EBC" ) [ birthing.chance ]
    ( code = "EWC" ) [ weaning.chance ]
    ( code = "EIC" ) [ infancy.chance ]
    ( code = "EJC" ) [ juvenility.chance ]
    ( code = "EAC" ) [ adulthood.chance ]
    ( code = "ELC" ) [ survival.chance ]
    ( code = "EYC" ) [ yellow.chance ]
    ( code = "ERC" ) [ red.chance ]
    ( code = "EBC" ) [ blue.chance ]
    ( code = "EXC" ) [ xcor ]
    ( code = "EYC" ) [ ycor ]
    
    ; PRIMITIVES
    ( code = "TRU" ) [ true ]
    ( code = "FAL" ) [ false ]
    ( code = "XXX" ) [ "" ]
    ( code = "YXX" ) [ "Y" ]
    ( code = "YRX" ) [ "YR" ]
    ( code = "YRB" ) [ "YRB" ]
    ( code = "XRX" ) [ "R" ]
    ( code = "XRB" ) [ "RB" ]
    ( code = "XXB" ) [ "B" ]
    ( code = "YXB" ) [ "YB" ]
    ( code = "FEM" ) [ "female" ]
    ( code = "MAL" ) [ "male" ]
    ( code = "GES" ) [ "gestatee" ]
    ( code = "INF" ) [ "infant" ]
    ( code = "JUV" ) [ "juvenile" ]
    ( code = "ADT" ) [ "adult" ]
    ( code = "CYC" ) [ "cycling" ]
    ( code = "PRG" ) [ "pregnant" ]
    ( code = "LAC" ) [ "lactating" ]
    ( code = "RNM" ) [ random-float 1.0 ]
    ( code = "RNB" ) [ one-of [ true false ] ]
    ( code = "DAY" ) [ get-solar-status = "DAY" ] ; runtime
    ( code = "NGT" ) [ get-solar-status = "NIGHT" ] ; runtime
    
    [ false ])
end

;----------------------------------------------------------------------------------------------
; GET-MUTATION
;
; Returns a randomly selected codon to occasionally introduce novel mutations into a population.
;
; CALLER: anima1
;----------------------------------------------------------------------------------------------

to-report g8tes-get-mutation [ original-codon ]
  report one-of (sentence gate-codons action-codons operation-codons reporter-codons )
end

to-report gate-codons
  report [ 
    "ANY" "UUU" "NNN" "ONE" "MEE" 
    "ALL" "THN" "TNT" ] ; "AND" "ORR" "NOT" 
end

to-report action-codons
  report [ 
    "SVC" "BDS" "BSD" "VSR" "DPR" 
    "VSA" "NPR"   
    "CNC" "BTC" "MTC" "SXR" "LTS"
    "TRT" "TLF" "GFD" "STH" "SHR" "HID"
    "YWS" "RDS" "BLS" "CKI" "CKB"
    "CKJ" "CKW" "CKA" "MOV"
    "MAF" "SPT" "DMF" "EAT" "JON"
    "LEV" "RCT" "EXP" "PKU" "PDN"
    "CLG" "SQM" "HLP" "ATK" "MTW" 
    "RST" 
  ]
end

to-report operation-codons 
  report [ "EQL" "NQL" "GRT" "LST" "SDO" ]
end

to-report reporter-codons
  report [
    "TRU" "FAL" "DAY" "NGT" "XXX"
    "YXX" "YRX" "YRB" "XRX" "XRB"
    "XXB" "YXB" "FEM" "MAL" "GES"
    "INF" "JUV" "ADT" 
    "CYC" "PRG" "LAC" "RNM" "RNB" 
    
    "MID" "SIZ" "COL" "HDG" "IRG" "SEX" "SHD"
    "LFH" "FER" "GRP" "YON" "RON"
    "BON" "SIG" "EGO" "DSE" "ISA"
    "ISP" "ALV" "CRD" "MYO" "MOM" "CRG" 
    "REL"
    
    "EMI" "EAG" "ESZ" "ERG" "EHC"
    "ECL" "EHD" "ESX" "ESD" "ELH" "EFR" 
    "EGP" "EXM" "EYM" "ENG" "EBY"
    "EBS" "ESR" "ELS" "ECC" "EBC"
    "EMC" "EVR" "EVA" "EDP" "ENP"
    "ENA" "EAA" "EWC" 
    "EIC" "EJC" "EAC" "ESC" "ELC" 
    "EYC" "ERC" "EBC" "EXC" "EYC"
    "EYW" "ERD" "EBL"
  ]
end

to-report gat3s-codon-exists [ codon ]
  report member? codon (sentence gate-codons action-codons operation-codons reporter-codons )
end