; ========================================================================================================= ;
;
;  .88888.   88888888b 888888ba   .88888.  d888888P dP    dP  888888ba   88888888b 
; d8'   `88  88        88    `8b d8'   `8b    88    Y8.  .8P  88    `8b  88        
; 88        a88aaaa    88     88 88     88    88     Y8aa8P  a88aaaa8P' a88aaaa    
; 88   YP88  88        88     88 88     88    88       88     88         88        
; Y8.   .88  88        88     88 Y8.   .8P    88       88     88         88        
;  `88888'   88888888P dP     dP  `8888P'     dP       dP     dP         88888888P 
;                                                                                 
;                                                                                
; 888888ba   88888888b  .d888888  888888ba   88888888b  888888ba  
;  88    `8b  88        d8'    88  88    `8b  88         88    `8b 
; a88aaaa8P' a88aaaa    88aaaaa88a 88     88 a88aaaa    a88aaaa8P' 
;  88   `8b.  88        88     88  88     88  88         88   `8b. 
;  88     88  88        88     88  88    .8P  88         88     88 
;  dP     dP  88888888P 88     88  8888888P   88888888P  dP     dP                                                                
;             
; ========================================================================================================= ;

; --------------------------------------------------------------------------------------------------------- ;
;
;            dP            d8888b.                   
;            88                `88                   
; .d8888b. d8888P .d8888b. .aaadP' dP    dP .d8888b. 
; Y8ooooo.   88   88'  `88 88'     88    88 Y8ooooo. 
;       88   88   88.  .88 88.     88.  .88       88 
; `88888P'   dP   `88888P8 Y88888P `88888P' `88888P' 
;                                                                  
; --------------------------------------------------------------------------------------------------------- ;
; 
; This extension contains all functions that allow anima1s to make decisions from their 
; genotypes and current environment. 
;
; List of all genotype cod0ns:
; 
; MAINTENANCE  CODE  DESCRIPTION                
;
; 2021-07-06    a    is an adult
; 2021-07-06    b    is bigger than myself
; 2021-07-06    c    is cycling
; 2021-07-06    d    is a plant (not an anima1)
; 2021-07-06    e    is myself
; 2021-07-06    f    is female
; 2021-07-06    g    is a gestatee
; 2021-07-06    h    is healthier than myself
; 2021-07-06    i    is an infant
; 2021-07-06    j    is a juvenile
; 2021-07-06    k    is kin (relatedness > 0.2) ; target is 0.25 or more related
; 2021-07-06    l    is lactating
; 2021-07-06    m    is a male
; 2021-07-06    n    is a group member or location
; 2021-07-06    o    is another (not myself)
; 2021-07-06    p    is pregnant
; 2021-07-06    q    is not kin (relatedness <= 0.2)
; 2021-07-06    r    is smaller than myself
; 2021-07-06    s    is resting
; 2021-07-06    t    is neither carrying or carried by myself
; 2021-07-06    u    is a stranger (none-group member)
; 2021-07-06    v    is alive
; 2021-07-06    w    is dead
; 2021-07-06    x    is sicker than myself
; 2021-07-06    y    is carried by myself
; 2021-07-06    z    is an anima1 (not a plant)
; 2021-07-06    ¥    is carrying myself
; 2021-07-06    α    has yellow signal on
; 2021-07-06    å    has yellow signal off
; 2021-07-06    β    has red signal on
; 2021-07-06    ß    has red signal off
; 2021-07-06    ɣ    has blue signal on
; 2021-07-06    œ    has blue signal off
; 2021-07-06    *    is observed during the day
; 2021-07-06    -    is observed during the night
; 2021-07-06   0-9   displayed color
; 2021-07-06    .    is not resting
; 2021-07-06    <    is within near range
; 2021-07-06    |    is neither too near or far
; 2021-07-06    >    is close to edge of view range
; 2021-07-06    ⋅    is alone
; 2021-07-06    ∴    is not alone
;         
; 2021-07-06   --> survival-chance
; 2021-07-06   --> body-size
; 2021-07-06   --> body-shade
; 2021-07-06   --> visual-angle
; 2021-07-06   --> visual-range
; 2021-07-06   --> day-perception
; 2021-07-06   --> night-perception
; 2021-07-06   --> conception-chance
; 2021-07-06   --> bite-capacity
; 2021-07-06   --> mutation-chance
; 2021-07-06   --> sex-ratio
; 2021-07-06   --> litter-size
; 2021-07-06   --> turn-right
; 2021-07-06   --> turn-left
; 2021-07-06   --> go-forward
; 2021-07-06   --> set-heading 
; 2021-07-06   --> set-heading-random
; 2021-07-06   --> hide
; 2021-07-06   --> rest
; 2021-07-06   --> yellow-signal
; 2021-07-06   --> red-signal
; 2021-07-06   --> blue-signal
; 2021-07-06   --> check-infancy
; 2021-07-06   --> check-birth
; 2021-07-06   --> check-juvenility
; 2021-07-06   --> check-weaning
; 2021-07-06   --> check-adulthood   
;
; 2021-07-06   --> move-toward 
; 2021-07-06   --> move-away-from
; 2021-07-06   --> supply-to 
; 2021-07-06   --> demand-from  
; 2021-07-06   --> eat   
; 2021-07-06   --> join 
; 2021-07-06   --> leave
; 2021-07-06   --> recruit
; 2021-07-06   --> kick-out
; 2021-07-06   --> pick-up  
; 2021-07-06   --> put-down 
; 2021-07-06   --> cling-to  
; 2021-07-06   --> squirm-from 
; 2021-07-06   --> help  
; 2021-07-06   --> attack 
; 2021-07-06   --> mate-with 
; 
; --------------------------------------------------------------------------------------------------------- ;

; --------------------------------------------------------------------------------------------------------- ;
;
; GENERATE A LIST OF DECISIONS VECTORS
;
; Reporter that returns a list of decision vectors generated from genotype and current environment of the
; caller. The environment is a list of turtles (both plants and anima1s) observed by the caller.
;
; ENTRY
;
; EXIT: A list of decision vectors representing the decisions of the caller.
;
; --------------------------------------------------------------------------------------------------------- ;

to-report sta2us-get-decisions [ my-environment ] 
  
  let ego-status status-of self                                ; Keep a record of caller's status.
  let decision-vectors []                                      ; Initialize a list for decision vectors.

  let status-table table:make                                  ; Create a table to temporarily store
  foreach my-environment [ obj ->                              ; the status code of each object
    if ( is-patch? obj ) [                                     ; in the caller's current environment.
      table:put status-table                                   
      ( [pmy.identity] of obj ) 
      ( status-of obj ) ]
    if ( is-anima1? obj ) [ 
      table:put status-table 
      ( [my.identity] of obj ) 
      ( status-of obj ) ] ]
  
  foreach (sentence chromosome.I chromosome.II) [ g ->         ; Proceed through each allele in the 
                                                               ; caller's genotype.
    
    if ( length g = 5 and                                      ; Check that the allele structure
      is-string? item 1 g and                                  ; matches what is expected from the
      is-string? item 2 g and                                  ; sta2us genotype reader.
      is-string? item 3 g and 
      is-number? item 4 g ) [                                  
      
      let gene-ego item 1 g                                    ; Identify each component of the
      let gene-other item 2 g                                  ; current allele.
      let gene-action item 3 g                                 
      let gene-weight item 4 g                                 
      
      if first-string-is-part-of-last?                         ; If the caller's status matches  
      ( gene-ego ) ( ego-status ) [                            ; the first codon...
        
        foreach my-environment [ other-guy ->                  ; Proceed through each object                
          let other-status table:get                           ; in the environment and 
          status-table ifelse-value                            ; identify its status.
          ( is-patch? other-guy ) 
          [ [pmy.identity] of other-guy ] 
          [ [my.identity] of other-guy ]

          if first-string-is-part-of-last?                     ; If the object's status matches the second  
          ( gene-other ) ( other-status ) [                    ; codon then object becomes target.
                                                               
            let distance-to-target distance other-guy          ; Calculate the distance between caller 
            set distance-to-target ifelse-value                ; and target, which is one if the caller
            ( distance-to-target > 1 )                         ; and target are closer than one unit apart.
            [ distance-to-target ] [ 1 ]
            
            set decision-vectors lput (list                    ; Create a new decision vector
              self                                             ; that identifies caller,
              other-guy                                        ; target,
              ( sta2us-get-action gene-action )                ; which action to take,
              precision ( gene-weight /                        ; how much it costs,
                ( distance-to-target ^ 2 )) 10                 ; and that this action 
              false ) decision-vectors                         ; has not yet been performed.

          ]
        ]
      ]
    ]
  ]
  report decision-vectors                                      ; Report the final list of decision vectors.
  
end

; --------------------------------------------------------------------------------------------------------- ;
;
; REPORT UP TO DATE ACTION NAME
;
; This subroutine ensures that outdated action codons can still be linked to updated action names.
;
; ENTRY: action-code is the codon taken from a genotype.
;
; EXIT: Report the up-to-date name of the action.
;
; --------------------------------------------------------------------------------------------------------- ;

to-report sta2us-get-action [ action-code ]

  report
  (ifelse-value
    ( action-code = "MNT" or action-code = "maintain-body" or action-code = "living-chance" or action-code = "survival-chance") [ "survival-chance" ]
    ( action-code = "GRW" or action-code = "body-size" ) [ "body-size" ]
    ( action-code = "BSD" or action-code = "body-shade" ) [ "body-shade" ]
    ( action-code = "DPR" or action-code = "IPR" or action-code = "day-perception-range" or action-code = "visual-range" ) [ "visual-range" ]
    ( action-code = "DPA" or action-code = "day-perception-angle" or action-code = "visual-angle" ) [ "visual-angle" ]
    ( action-code = "NPR" or action-code = "night-perception-range" or action-code = "day-perception" ) [ "day-perception" ]
    ( action-code = "NPA" or action-code = "night-perception-angle" or action-code = "night-perception" ) [ "night-perception" ]
    ( action-code = "APR" or action-code = "audio-perception" or action-code = "audio-perception-range" ) [ "audio-perception-range" ] ; not used
    ( action-code = "APA" or action-code = "audio-perception-angle" ) [ "audio-perception-angle" ] ; not used
    ( action-code = "VCR" or action-code = "vocal-range" ) [ "vocal-range" ] ; not used
    ( action-code = "ICC" or action-code = "conception-chance" ) [ "conception-chance" ]
    ( action-code = "STM" or action-code = "stomach-size" ) [ "bite-capacity" ]   
    ( action-code = "MTR" or action-code = "mutation-rate" or  action-code = "MTC" or action-code = "mutation-chance") [ "mutation-chance" ]
    ( action-code = "SXR" or action-code = "sex-ratio" ) [ "sex-ratio" ]
    ( action-code = "LTS" or action-code = "litter-size" ) [ "litter-size" ]
    ( action-code = "TRT" or action-code = "turn-right" ) [ "turn-right" ]
    ( action-code = "TLF" or action-code = "turn-left" ) [ "turn-left" ]
    ( action-code = "GFD" or action-code = "go-forward" ) [ "go-forward" ]
    ( action-code = "MOV" or action-code = "move-toward" ) [ "move-toward" ]
    ( action-code = "move-away-from" ) [ "move-away-from" ]
    ( action-code = "HED" or action-code = "set-heading" ) [ "set-heading" ]
    ( action-code = "match-heading" ) [ "match-heading" ]
    ( action-code = "set-heading-random" ) [ "set-heading-random" ]
    ( action-code = "HID" or action-code = "hide" ) [ "hide" ]
    ( action-code = "rest" ) [ "rest" ]
    ( action-code = "SAC" or action-code = "signal-a-chance" or action-code = "SAO" or action-code = "signal-a-on" or action-code = "signal-alpha-on" or action-code = "yellow-signal-on" or action-code = "yellow-signal" ) [ "yellow-signal" ]
    ( action-code = "SBC" or action-code = "signal-b-chance" or action-code = "SBO" or action-code = "signal-b-on" or action-code = "signal-beta-on" or action-code = "red-signal-on" or action-code = "red-signal" ) [ "red-signal" ]
    ( action-code = "SCC" or action-code = "signal-c-chance" or action-code = "SCO" or action-code = "signal-c-on" or action-code = "signal-gamma-on" or action-code = "blue-signal-on" or action-code = "blue-signal") [ "blue-signal" ]
    ( action-code = "INC" or action-code = "infancy-chance" or action-code = "CKI" or action-code = "check-infancy" ) [ "check-infancy" ]
    ( action-code = "GVB" or action-code = "birthing-chance" or action-code = "CKB" or action-code = "check-birth" ) [ "check-birth" ]
    ( action-code = "JVC" or action-code = "juvenile-chance" or action-code = "CKJ" or action-code = "check-juvenility" ) [ "check-juvenility" ]
    ( action-code = "WEN" or action-code = "weaning-chance" or action-code = "CKW" or action-code = "check-weaning" ) [ "check-weaning" ]
    ( action-code = "ADC" or action-code = "adult-chance" or action-code = "CKA" or action-code = "check-adulthood" ) [ "check-adulthood" ]
    ( action-code = "SNC" or action-code = "senescent-chance" ) [ "senescent-chance" ] ; not used
    ( action-code = "CKS" or action-code = "check-senescence" ) [ "check-senescence" ] ; not used
    ( action-code = "DSC" or action-code = "digest-stomach" ) [ "digest-stomach" ] ; not used
    ( action-code = "FAT" or action-code = "reserve-energy" ) [ "reserve-energy" ] ; not used
    ( action-code = "BRN" or action-code = "burn-reserves" ) [ "burn-reserves" ] ; not used
    ( action-code = "GFT" or action-code = "supply-to" ) [ "supply-to" ]
    ( action-code = "RFT" or action-code = "demand-from" ) [ "demand-from" ]
    ( action-code = "EAT" or action-code = "eat") [ "eat" ]
    ( action-code = "PKU" or action-code = "pick-up" ) [ "pick-up" ]
    ( action-code = "SQM" or action-code = "squirm-from" ) [ "squirm-from" ]
    ( action-code = "PDN" or action-code = "put-down" ) [ "put-down" ]
    ( action-code = "CLG" or action-code = "cling-to" ) [ "cling-to" ]
    ( action-code = "ATK" or action-code = "attack" ) [ "attack" ]
    ( action-code = "HLP" or action-code = "help") [ "help" ]
    ( action-code = "JNG" or action-code = "join-group-of" or action-code = "join" ) [ "join" ]
    ( action-code = "LEV" or action-code = "leave-group" or action-code = "LEV" or action-code = "leave" ) [ "leave" ]
    ( action-code = "RCT" or action-code = "recruit" ) [ "recruit" ]
    ( action-code = "KCK" or action-code = "kick-out" or action-code = "expel" ) [ "expel" ]
    ( action-code = "MAT" or action-code = "mate-with") [ "mate-with" ]
    ( action-code = "do-nothing") [ "do-nothing" ]
    [ action-code ])
  
end

; --------------------------------------------------------------------------------------------------------- ;
;
; GENERATE A MUTATED VERSION OF THE INPUT CODON
;
; Returns a randomly selected codon to occasionally introduce novel mutations into a population.
;
; CALLER: anima1
;
; --------------------------------------------------------------------------------------------------------- ;

to-report sta2us-get-mutation [ original-codon type-of-mutation ] ; numbers, letters, both
  report ( ifelse-value 
    ( is-number? original-codon and ( type-of-mutation = "numbers" or type-of-mutation = "both" ) ) [ ( one-of [ 1 -1 ] ) * get-updated-value original-codon ( one-of [ 1 -1 ] ) ]
    ( member? original-codon action-code-list and ( type-of-mutation = "letters" or type-of-mutation = "both" ) ) [ one-of action-code-list ]
    [ ifelse-value ( type-of-mutation = "letters" or type-of-mutation = "both" ) [ generate-status ] [ original-codon ]] ) 
end

; --------------------------------------------------------------------------------------------------------- ;
;
; TITLE
;
; This subroutine...
;
; ENTRY: entry 1...
;
; EXIT: exit 1...
;
; --------------------------------------------------------------------------------------------------------- ;

to-report status-of [ target ]
  let status-report ""

  set status-report ( word status-report ifelse-value ( solar-status = "DAY" ) [ "*" ][ "-" ] )
  let distance-to-target distance target
  
  if (is-anima1? target) [ ; ANIMALS
    let target-kind "z"
    let target-self ifelse-value ( target = self ) [ "e" ] [ "o" ]
    let target-alive ifelse-value ( [is.alive] of target ) [ "v" ] [ "w" ]
    let target-sex first [biological.sex] of target
    let target-life-history first [life.history] of target
    let target-fertility first [fertility.status] of target
    let target-size ifelse-value ( [size] of target < size ) [ "r" ] [ "b" ]
    let target-health ( ifelse-value ( [survival.chance] of target > survival.chance + 0.001 ) [ "h" ] ( [survival.chance] of target + 0.001 < survival.chance) [ "x" ] [ "" ] )
    let target-kin ifelse-value ( relatedness-with target > 0.2 ) [ "k" ] [ "q" ]
    let target-group ifelse-value ( [group.identity] of target = group.identity ) [ "n" ] [ "u" ] 
    let target-carry ifelse-value ( member? target carried.items ) [ "y" ] [ ifelse-value ( member? self [carried.items] of target ) [ "¥" ] [ "t" ] ]
    let target-signal (word ifelse-value [yellow.signal] of target [ "α" ][ "å" ] ifelse-value [red.signal] of target [ "β" ][ "ß" ] ifelse-value [blue.signal] of target [ "ɣ" ][ "œ" ] )
    let target-rest ifelse-value ( [is.resting] of target = true ) [ "s" ] [ "." ]
    let target-color (word "" round [color] of target "" ifelse-value ( shade-of? color [color] of target) [ "#" ] [ "" ])
    let target-proximity (ifelse-value ( distance-to-target < 0.5 * size ) [ "<" ] ( distance-to-target > 0.66 * maximum-visual-range * visual.range ) [ ">" ] [ "|" ] )
    let target-alone ifelse-value ( [ solitary? ] of target = false ) [ "∴" ] [ "⋅" ]
    set status-report (word status-report 
      target-kind 
      target-self 
      target-alive 
      target-sex 
      target-life-history
      ifelse-value ( target = self ) [ target-fertility ] [ "" ]
      target-size 
      target-health 
      target-kin 
      target-group 
      target-carry 
      target-signal
      target-rest 
      target-color 
      target-proximity 
      target-alone
  ) ]
    
  if ( is-patch? target ) [ ; PATCHES
    let target-kind "d" 
    let plant-group [pgroup.identity] of target
    let target-group ifelse-value ( plant-group = 0 or plant-group = group.identity ) [ "n" ] [ "u" ] 
    let target-pcolor (word "" round [pcolor] of target "")
    set status-report (word status-report word target-kind target-group target-pcolor )]
  
  report status-report
end

; --------------------------------------------------------------------------------------------------------- ;
;
; TITLE
;
; This subroutine...
;
; ENTRY: entry 1...
;
; EXIT: exit 1...
;
; --------------------------------------------------------------------------------------------------------- ;

to-report first-string-is-part-of-last? [ string1 string2 ]
  let first-is-part-of-last true
  let index 0
  if ( is-string? string1 and is-string? string2 ) [
    let string1-length length string1 ; saves on runtime
    while [ first-is-part-of-last and index < string1-length ] [
      if ( not member? item index string1 string2 ) and ( item index string1 != " " ) [ set first-is-part-of-last false ]
      set index index + 1 ]]
  report first-is-part-of-last
end

; --------------------------------------------------------------------------------------------------------- ;
;
; TITLE
;
; This subroutine...
;
; ENTRY: entry 1...
;
; EXIT: exit 1...
;
; --------------------------------------------------------------------------------------------------------- ;

to-report status-code-list
  report [ 
    "a" "b" "c" "d" "e" "f" "g" 
    "h" "i" "j" "k" "l" "m" "n"
    "o" "p" "q" "r" "s" "t" "u"
    "v" "w" "x" "y" "z" "¥" "α" 
    "å" "β" "ß" "ɣ" "œ" "*" "-" 
    "#" "$" "~" "1" "2" "3" "4" 
    "5" "6" "7" "8" "9" "0" "." 
    "∴" "⋅" "<" ">" "|" ]
end

; --------------------------------------------------------------------------------------------------------- ;
;
; TITLE
;
; This subroutine...
;
; ENTRY: entry 1...
;
; EXIT: exit 1...
;
; --------------------------------------------------------------------------------------------------------- ;

to-report action-code-list
  report [ 
    "survival-chance" 
    "body-size" 
    "body-shade" 
    "day-perception" 
    "night-perception" 
    "visual-angle" 
    "visual-range" 
    "conception-chance" 
    "bite-capacity" 
    "mutation-chance" 
    "sex-ratio" 
    "litter-size" 
    "turn-right" 
    "turn-left" 
    "go-forward" 
    "set-heading" 
    "hide" 
    "rest" 
    "set-heading-random"
    "yellow-signal" 
    "red-signal" 
    "blue-signal" 
    "check-infancy" 
    "check-birth" 
    "check-juvenility" 
    "check-weaning" 
    "check-adulthood" 
    "move-toward" 
    "move-away-from" 
    "supply-to" 
    "demand-from" 
    "eat"
    "join" 
    "leave" 
    "recruit" 
    "kick-out"
    "pick-up" 
    "put-down" 
    "cling-to" 
    "squirm-from"
    "help" 
    "hurt" 
    "mate-with" 
    "do-nothing" ]
end

; --------------------------------------------------------------------------------------------------------- ;
;
; TITLE
;
; This subroutine...
;
; ENTRY: entry 1...
;
; EXIT: exit 1...
;
; --------------------------------------------------------------------------------------------------------- ;

to-report sta2us-codon-exists [ codon ]
  report
  codon != "" and not is-number? codon and not is-boolean? codon and
  ( member? codon action-code-list or first-string-is-part-of-last? codon ( reduce word status-code-list ) ) ; codon is either an action or part of the status codons list
end

; --------------------------------------------------------------------------------------------------------- ;
;
; TITLE
;
; This subroutine...
;
; ENTRY: entry 1...
;
; EXIT: exit 1...
;
; --------------------------------------------------------------------------------------------------------- ;

to-report generate-status
  let new-status one-of status-code-list
  repeat ( random 5 ) [ set new-status ( word new-status one-of status-code-list ) ]
  report new-status
end


