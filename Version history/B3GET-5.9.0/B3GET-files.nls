;----------------------------------------------------------------------------------------------
; 
;  .8888b oo dP                   
;  88   "    88                   
;  88aaa  dP 88 .d8888b. .d8888b. 
;  88     88 88 88ooood8 Y8ooooo. 
;  88     88 88 88.  ...       88 
;  dP     dP dP `88888P' `88888P' 
; 
;----------------------------------------------------------------------------------------------
; 
; This extension contains all functions that allow users to create files for recording
; data related to the simulation.
;
;----------------------------------------------------------------------------------------------

;----------------------------------------------------------------------------------------------
; METAFILE FILES
;----------------------------------------------------------------------------------------------

to-report metafile-exists?
  report file-exists? ( word path-to-experiment "/metafile.csv" )
end

to setup-metafile
  
  if ( not metafile-exists? ) [
    
    file-open (word path-to-experiment "/metafile.csv" )
    csv:to-file (word path-to-experiment "/metafile.csv" ) (list (list
      "date-and-time"
      "file-type"
      "file-name"
      "documentation-notes"
      "model-version"
      "simulation-id"
      "ticks"))
    
    file-close ]
end

to update-metafile [ type-of-file name-of-file ]
  
  ; Save whatever is currently in the METAFILE or create new
  if ( not metafile-exists? ) [ setup-metafile ]
  let old-metafile csv:from-file ( word path-to-experiment "/metafile.csv" )
  
  ; Update METAFILE with a new row of FILE information
  file-open (word path-to-experiment "/metafile.csv" )
  csv:to-file (word path-to-experiment "/metafile.csv" )
  (lput
    (list
      date-and-time
      type-of-file
      name-of-file
      documentation-notes
      model-version
      simulation-id
      ticks)
    
    old-metafile )
  
  set documentation-notes ""
  file-close
end

;----------------------------------------------------------------------------------------------
; SIMULATION FILES
;----------------------------------------------------------------------------------------------

to-report generate-simulation-id
  let alphabet [ "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" ]
  report ( word "s" random 99 one-of alphabet one-of alphabet one-of alphabet )
end

to new-simulation [ sim-id ]
  set simulation-id sim-id
  
  if ( behaviorspace-run-number = 0 and collect-data? ) [
    file-open (word path-to-experiment "/" simulation-id ".csv" )
    csv:to-file (word path-to-experiment "/" simulation-id ".csv" ) (list (list
      "date-and-time"
      "model-version"
      "simulation-id" 
      "world-width" 
      "world-height"
      "documentation-notes"
      "ticks"))
    
    file-close    
  ]
  
  set documentation-notes (word "Simulation " simulation-id " has been created. " documentation-notes )
  update-metafile "simulation" simulation-id 
  
end

to update-simulation
  
  if ( simulation-id = 0 ) [ set simulation-id generate-simulation-id ]
  
  if ( behaviorspace-run-number = 0 and collect-data? ) [
    if ( not file-exists? ( word path-to-experiment "/" simulation-id ".csv" )) [ new-simulation simulation-id ]
    
    file-open ( word path-to-experiment "/" simulation-id ".csv" )
    let old-simfile csv:from-file ( word path-to-experiment "/" simulation-id ".csv" )
    csv:to-file ( word path-to-experiment "/" simulation-id ".csv" )
    (lput
      (list
        date-and-time
        model-version
        simulation-id
        world-height
        world-width
        documentation-notes
        ticks)
      old-simfile )
    
    file-close
  ]
  
  set documentation-notes (word "Saving " simulation-id ". " documentation-notes )
  update-metafile "simulation" simulation-id 
  set documentation-notes ""
  
end

;----------------------------------------------------------------------------------------------
; POPULATION FILES
;----------------------------------------------------------------------------------------------

to-report generate-population-id
  let alphabet [ "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" ]
  report ( word "p" random 99 one-of alphabet one-of alphabet one-of alphabet )
end

to-report population-file-exists?
  report file-exists? ( word path-to-experiment "/" population ".csv" )
end

to import-population [ path ]
  
  import-turtles-from path
  
  ask anima1s [
    
    set carried.items []
    set group-transfers-list []
    set matings-list []
    set conceptions-list []
    set cells-occupied []
    set infanticide-list []
    set decision.vectors []
  ]
  
  set documentation-notes (word "Imported population " ( remove ".csv" remove ( word path-to-experiment "/") path ) ". " documentation-notes )
  update-metafile "population" remove ( word path-to-experiment "/") path
  
end

to save-population [ path ]
  
  ifelse ( file-exists? path )
  [ 
    let answer user-yes-or-no? 
    (word "The population " remove ".csv" remove ( word path-to-experiment "/") path " already exists. "
      "Would you like to: [ YES ] overwrite the existing file with current population, "
      "[ NO ] save current population to a different generated file name, "
      "or [ HALT ] forget the whole darn thing?" )
    ifelse ( answer ) [ file-delete path save-population path ] [ save-population generate-population-id ]
    
  ][
    
    let selected-groups []
    
    let group-list ( list "breed" "meta-id"
      "color" "heading" "xcor" "ycor"
      "shape" "label" "label-color" "hidden?" "size" 
      "pen-size" "pen-mode" )
    
    let turtle-list (list "breed" "meta-id"
      "color" "heading" "xcor" "ycor" "label" "label-color"
      "shape" "hidden?" "size" "pen-size" "pen-mode"
      "biological.sex" "life.history" "female.fertility" "energy.supply" 
      "group.identity" "is.dead" "alpha.signal" "beta.signal" "gamma.signal"
      "chromosome.I" "chromosome.II"
      "living.chance" "body.size" "body.shade" "mutation.chance"
      "sex.ratio" "litter.size" "conception.chance"
      "day.perception.angle" "night.perception.angle" "audio.perception.angle"
      "day.perception.range" "night.perception.range" "audio.perception.range"
      "vocal.range" "alpha.chance" "beta.chance" "gamma.chance"
      "birthing.chance" "weaning.chance" "infancy.chance"
      "juvenility.chance" "adulthood.chance" "senescency.chance"
      "x.magnitude" "y.magnitude" )
    
    ask anima1s [
      
      if ( not member? group.identity selected-groups ) [ set selected-groups lput group.identity selected-groups ]
      
      ; turtle variables can only be saved in string format
      set chromosome.I csv:to-string chromosome.I
      set chromosome.II csv:to-string chromosome.II
      export-turtle-to path turtle-list 
      set chromosome.I csv:from-string chromosome.I
      set chromosome.II csv:from-string chromosome.II 
      
    ]
    
    foreach selected-groups [ g ->
      ask one-of groups with [ meta-id = g ] [ export-turtle-to path group-list ]
    ]
    
    set documentation-notes (word "New population " (remove ".csv" remove ( word path-to-experiment "/") path ) " saved. " documentation-notes )
    update-metafile "population" remove ".csv" remove ( word path-to-experiment "/") path
  ]
end

;----------------------------------------------------------------------------------------------
; GENOTYPE FILES
;----------------------------------------------------------------------------------------------

to-report generate-genotype-id
  report ( word "g" [meta-id] of one-of anima1s  )
end

to-report genotype-file-exists?
  report file-exists? ( word path-to-experiment "/" genotype ".txt" )
end

to import-genotype [ path ]
  
  ask anima1s [
    
    set chromosome.I []
    set chromosome.II []
    
    file-open path
    let first-chromosome? true 
    while [ not file-at-end? ] [
      let row (csv:from-row file-read-line " ")
      (ifelse 
        ( row = [""] ) 
        [ set first-chromosome? false ]
        ( first-chromosome? ) 
        [ set chromosome.I lput row chromosome.I ]
        [ set chromosome.II lput row chromosome.II ])
    ]
    file-close
    
  ]
  
  set documentation-notes (word "Imported genotype " ( remove ".txt" remove ( word path-to-experiment "/") path ) ". " documentation-notes )
  update-metafile "genotype" remove ( word path-to-experiment "/") path 
  
end

to save-genotype [ path ]
  (csv:to-file path (sentence chromosome.I [[]] chromosome.II ) " ")
  set documentation-notes (word "Saved genotype " (remove ".txt" remove ( word path-to-experiment "/") path ) ". " documentation-notes )
  update-metafile "genotype" simulation-id 
end

