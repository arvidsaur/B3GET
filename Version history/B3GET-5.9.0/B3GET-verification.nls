;---------------------------------------------------------------------------------------------------------------------------------
; 
;                             oo .8888b oo                     dP   oo                   
;                                88   "                        88                        
;  dP   .dP .d8888b. 88d888b. dP 88aaa  dP .d8888b. .d8888b. d8888P dP .d8888b. 88d888b. 
;  88   d8' 88ooood8 88'  `88 88 88     88 88'  `"" 88'  `88   88   88 88'  `88 88'  `88 
;  88 .88'  88.  ... 88       88 88     88 88.  ... 88.  .88   88   88 88.  .88 88    88 
;  8888P'   `88888P' dP       dP dP     dP `88888P' `88888P8   dP   dP `88888P' dP    dP 
; 
; NetLogo 6.1.0
;--------------------------------------------------------------------------------------------------------------------------------- 
;
; This 'verification' extension contains all functions related to verifying B3GET's code. B3GET requires access to the following 
; functions in this extension in order to work properly:
;
; 1. GUI OUTPUT FUNCTIONS (listed below)
; 2. SAVE-VERIFICATION-TO
;
;--------------------------------------------------------------------------------------------------------------------------------- 

;-------------------------------------------------------------------------------------------------
; SPOT CHECK FUNCTIONS
;-------------------------------------------------------------------------------------------------

to reset-chromosomes
  if ( mother != nobody and father != nobody ) [
    ask mother [ 
      set chromosome.I [ [ "A" "B" "C" ] [ "D" "E" "F" ] [ "G" "H" "I" ] [ "X" "Y" "Z" ] [ "E" 0.1 0.2 0.3 ]] 
      set chromosome.II [ [ "A2" "B2" "C2" ] [ "D2" "E2" "F2" ] [ "G2" "H2" "I2" ] ] 
    ]
    ask father [ 
      set chromosome.I [ [ "J" "K" "L" ] [ "M" "N" "O" ] [ "P" "Q" "R" ] ] 
      set chromosome.II [ [ "J2" "K2" "L2" ] [ "M2" "N2" "O2" ] [ "P2" "Q2" "R2" ]  ] 
    ]
    setup-chromosomes-from mother father
  ]
end

to output-decisions
  if ( subject != nobody ) [
    ask subject [
      foreach decision.vectors [ decision ->
        output-print decision
      ]
    ]
  ]
end

;--------------------------------------------------------------------------------------------------------------------------------------------------
; VERIFICATION TAPE:
;
; Generates a "tape" of all verification measurements that looks something like this:
;
; DATE-AND-TIME  MODEL-VERSION  SIMULATION-ID  TICKS  VERIFICATION_1  VERIFICATION_2  VERIFICATION_3  VERIFICATION_4   ....
;  - - - - -      - - - - - -    - - - - - -    - -     function_1      function_2      function_3      function_4     ....
;  - - - - -      - - - - - -    - - - - - -    - -      runtime          dynamic         static           visual      ....
; date-and-time  model-version  simulation-id  ticks   true / false    true / false    true / false    true / false    ....
;
;--------------------------------------------------------------------------------------------------------------------------------------------------

;---------------------------------------------------------------------------------------------------------------------------------
; GUI OUPUT FUNCTIONS 
;---------------------------------------------------------------------------------------------------------------------------------

to-report how-many-ticks? report 10 end

to output-runtime ; Outputs a report after 10 ticks using the "profiler" extension.
  profiler:reset
  profiler:start
  repeat how-many-ticks? [ go ]
  output-print profiler:report
  profiler:stop
end

to output-all-verification
  clear-output
  let new-tape generate-verification-tape
  let length-of-tape length first new-tape
  let i 0
  
  while [ i < length-of-tape ]
  [
    (ifelse 
      ( i < 4 ) [output-print (word  item i item 0 new-tape " " item i item 3 new-tape ) if ( i = 3 ) [ output-print ( "     " ) ] ]
      [ output-print (word " " (i - 3) ". " item i item 3 new-tape "  " item i item 2 new-tape "  " item i item 1 new-tape "  :  " item i item 0 new-tape )])
    set i i + 1
  ]
end

to output-false-verification
  clear-output
  let new-tape generate-verification-tape
  let length-of-tape length first new-tape
  let i 0
  let j 0
  while [ i < length-of-tape ]
  [
    (ifelse 
      ( i < 4 ) [output-print (word  item i item 0 new-tape " " item i item 3 new-tape ) if ( i = 3 ) [ output-print ( "     " ) ] ]
      [ if (item i item 3 new-tape = false) [ set j j + 1 output-print (word " " j ". " item i item 3 new-tape " " item i item 2 new-tape " " item i item 1 new-tape " : " item i item 0 new-tape ) ]])
    set i i + 1
  ]
end

to output-true-verification
  clear-output
  let new-tape generate-verification-tape
  let length-of-tape length first new-tape
  let i 0
  let j 0
  while [ i < length-of-tape ]
  [
    (ifelse 
      ( i < 4 ) [output-print (word  item i item 0 new-tape " " item i item 3 new-tape ) if ( i = 3 ) [ output-print ( "     " ) ] ]
      [ if (item i item 3 new-tape = true ) [ set j j + 1 output-print (word " " j ". " item i item 3 new-tape " " item i item 2 new-tape " " item i item 1 new-tape " : " item i item 0 new-tape ) ]])
    set i i + 1
  ]
end

;--------------------------------------------------------------------------------------------------------------------------------------------------
; SAVE to FILE FUNCTIONS
;--------------------------------------------------------------------------------------------------------------------------------------------------

to save-verification-to [ file-name ]
  
  let new-tape generate-verification-tape
  
  let existing-file []
  ifelse ( file-exists? (word path-to-experiment "/" file-name ) )
  [ file-open (word path-to-experiment "/" file-name ) set existing-file csv:from-file (word path-to-experiment "/" file-name ) ]
  [ set existing-file (sentence but-last new-tape ) ]
  let updated-file lput ( last new-tape ) existing-file
  csv:to-file (word path-to-experiment "/" file-name ) updated-file
  file-close
  
end

;--------------------------------------------------------------------------------------------------------------------------------------------------
; GENERATE TAPE
;--------------------------------------------------------------------------------------------------------------------------------------------------

to-report generate-verification-tape
  
  profiler:reset
  profiler:start
  
  repeat how-many-ticks? [ go ]
  
  let header (list "date-and-time" "model-version" "simulation-id" "ticks" )
  let verification (list "" "" "" "" )
  let function (list "" "" "" "" )
  let body (list date-and-time model-version simulation-id ticks ) 
  
  carefully [ ; visual verification has date when it was last completed
    
    ;--------------------------------------------------------------------------------------------------------------------
    ; GO
    ;--------------------------------------------------------------------------------------------------------------------
    
    ;    ;    set header lput "Exclusive Runtime of GO" header 
    ;    ;    set verification lput "runtime" verification 
    ;    ;    set function lput "go" function
    ;    ;    set body lput ( profiler:exclusive-time "go" ) body
    ;    ;    
    ;    ;    set header lput "Inclusive Runtime of GO" header 
    ;    ;    set verification lput "runtime" verification 
    ;    ;    set function lput "go" function
    ;    ;    set body lput ( profiler:inclusive-time "go" ) body 
    
    ;--------------------------------------------------------------------------------------------------------------------
    ; UPDATE-PLANTS
    ;--------------------------------------------------------------------------------------------------------------------
    
    ;;    set header lput "Plant abundance matches patch-density? " header 
    ;;    set verification lput "dynamic" verification 
    ;;    set function lput "update-plants" function
    ;;    set body lput false body
    ;;    
    ;;    set header lput "Plant energy available doesn't exceed patch-quality? " header 
    ;;    set verification lput "dynamic" verification
    ;;    set function lput "update-plants" function 
    ;;    set body lput false body
    ;;    
    ;;    set header lput "There are some plants that do not have maximum energy? " header 
    ;;    set verification lput "dynamic" verification 
    ;;    set function lput "update-plants" function
    ;;    set body lput false body
   
    
    ;--------------------------------------------------------------------------------------------------------------------
    ; DETERIORATE
    ;--------------------------------------------------------------------------------------------------------------------
    
    ;    ;    set header lput "Nonzero calls to BODY-DETERIORATION in population?" header 
    ;    ;    set verification lput "runtime" verification 
    ;    ;    set function lput "body-deterioration" function
    ;    ;    set body lput ( profiler:calls "body-deterioration" > 0 ) body
    ;    ;    
    ;    ;    set header lput "Calls to BODY-DETERIORATION same as count population?" header 
    ;    ;    set verification lput "runtime" verification 
    ;    ;    set function lput "body-deterioration" function
    ;    ;    set body lput ( profiler:calls "body-deterioration" = count anima1s ) body
    ;    ;
    ;    ;    set header lput "BODY-DETERIORATION function as expected?" header 
    ;    ;    set verification lput "static" verification 
    ;    ;    set function lput "body-deterioration" function
    ;    ;    ask one-of anima1s [
    ;    ;      ;      let random-energy random-float 1.0
    ;    ;      ;      let saved_weaning _weaning_chance
    ;    ;      ;      let expected-value ( saved_weaning ^ (1 / ( 1 + random-energy) ))
    ;    ;      ;      weaning% random-energy 
    ;    ;      ;      let actual-value _weaning_chance
    ;    ;      ;      set _weaning_chance saved_weaning
    ;    ;      ;      set body lput ( expected-value = actual-value ) body
    ;    ;      set body lput false body
    ;    ;    ]
    ;    ;    
    ;    ;    set header lput "Dynamic logic?" header 
    ;    ;    set verification lput "dynamic" verification 
    ;    ;    set function lput "body-deterioration" function
    ;    ;    set body lput false body
    
    ;--------------------------------------------------------------------------------------------------------------------
    ; CHECK-MORTALITY
    ;--------------------------------------------------------------------------------------------------------------------
    
    ;    ;    set header lput "Senesecents have non-zero chance to become dead? " header 
    ;    ;    set verification lput "dynamic" verification 
    ;    ;    set function lput "-" function
    ;    ;    set body lput ( not any? anima1s with [ life_history = "sensecent" and _mortality_chance = 0 ]) body
    
    ;--------------------------------------------------------------------------------------------------------------------
    ; UPDATE-APPEARANCE
    ;--------------------------------------------------------------------------------------------------------------------
    
    ;    set header lput "Fertility status always matches label? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-appearance" function
    ;    set body lput ( not any? anima1s with [ label != first fertility ] ) body
    
    ;--------------------------------------------------------------------------------------------------------------------
    ; GET-SHAPE
    ;--------------------------------------------------------------------------------------------------------------------
    
        
    ; --------------------------------------------------------------------------------------------------------------------
    ; MAKE-DECISIONS
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to MAKE-DECISIONS? " header 
    set verification lput "runtime" verification 
    set function lput "make-decisions" function
    set body lput ( profiler:calls "make-decisions" > 1 ) body
    
    ;    set header lput "Every individual makes decisions once?" header
    ;    set verification lput "dyanmic" verification 
    ;    set function lput "decide" function
    ;    set body lput ( false ) body 
    ;    
    ;    set header lput "Everyone has a full decision list?" header
    ;    set verification lput "dyanmic" verification 
    ;    set function lput "decide" function
    ;    set body lput ( false ) body 
    
    
    
    
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; ACT
    ; --------------------------------------------------------------------------------------------------------------------
    
    ;    set header lput "Summation of decision-vectors percent-weights equals 1?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "act" function
    ;    set body lput ( false ) body
    ;
    ;    set header lput "Nonzero calls to DO-ACTION in population?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "do-action" function
    ;    set body lput ( profiler:calls "do-action" > 0 ) body
    ;    
    ;    set header lput "Not any ACTIONs with group as the ego or target?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "do-action" function
    ;    set body lput ( not any? actions with [ is-group? get-ego or is-group? get-target ]) body
    ;    
    ;    set header lput "Gestatees only interact with their mother or themselves? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "do-action" function
    ;    set body lput ( not any? actions with [ [life_history] of get-ego = "gestatee" and ( get-target != [mother] of get-ego or get-target != get-ego) ] ) body
    ;    
    ;;    set header lput "Only mothers can interact with their gestatees? " header 
    ;;    set verification lput "dynamic" verification 
    ;;    set function lput "do-action" function
    ;;    set body lput ( not any? actions with [ is-mob? get-target and [life_history] of get-target = "gestatee" and [mother] of get-target != get-ego ]  ) body
    ;    
    ;;    set header lput "The only interaction from mother to gestatee is 'supply'? " header 
    ;;    set verification lput "dynamic" verification 
    ;;    set function lput "do-action" function
    ;;    set body lput ( not any? actions with [ is-mob? get-target and [life_history] of get-target = "gestatee" and [mother] of get-target = get-ego  and not action-type = "GFT" ] ) body
    ;    
    ;;    set header lput "The only interaction from gestatee to mother is 'demand'? " header 
    ;;    set verification lput "dynamic" verification 
    ;;    set function lput "do-action" function
    ;;    set body lput ( not any? actions with [ [life_history] of get-ego = "gestatee" and [mother] of get-ego = get-target and not action-type = "RFT" ] ) body
    ;    
    ;    set header lput "Only infants and gestatees can 'demand' from a female? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "do-action" function
    ;    set body lput ( not any? actions with [ action-type = "RFT" and not ([life_history] of get-ego = "gestatee" or [life_history] of get-ego = "infant") ] ) body
    ;    
    ;    set header lput "Infants cannot perform other target-directed actions besides 'demand'? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "do-action" function
    ;    set body lput ( not any? actions with [ action-type != "RFT" and [life_history] of get-ego = "infant" and get-target != nobody] ) body
    ;    
    ;    set header lput "Juveniles cannot perform any specialized actions? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "do-action" function
    ;    set body lput ( not any? actions with [ [life_history] of get-ego = "juvenile" and ( action-type = "RFT" or action-type = "GFT" )] ) body
    ;    
    ;    set header lput "Only cycling adult females and adult males can 'conceive'? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "do-action" function
    ;    set body lput ( false ) body
    ;    
    ;    set header lput "Only pregnant and lactating adult females can 'supply'? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "do-action" function
    ;    set body lput ( not any? actions with [ action-type = "GFT" and not ( [fertility] of get-ego = "pregnant" or [fertility] of get-ego = "lactating" ) ] ) body
    ;    
    ;    set header lput "Senescents cannot perform any specialized actions, including 'conceive'? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "do-action" function
    ;    set body lput ( not any? actions with [ [life_history] of get-ego = "senescent" and ( action-type = "RFT" or action-type = "GFT" )] ) body
    
    ;    set header lput "Nonzero calls to UPDATE-STATUS in population?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( profiler:calls "update-status" > 1 ) body
    ;    
    ;    set header lput "Calls to UPDATE-STATUS same as count population?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( profiler:calls "update-status" = count anima1s ) body
    ;    
    ;    set header lput "Only adult females have a fertility status?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( not any? anima1s with [ sex = "female" and life_history = "adult" and not (length fertility > 1) ] ) body
    ;    
    ;    set header lput "Agents are one of life-history options?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( not any? anima1s with [ life_history != "gestatee" and life_history != "infant" and life_history != "juvenile" and life_history != "adult" and life_history != "senescent" and life_history != "dead" ] ) body
    ;    
    ;    set header lput "There is at least one agent of each life_history?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( length (remove-duplicates ([life_history] of anima1s)) = 6 ) body
    ;    
    ;    set header lput "Adult females are one of fertility options?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( not any? anima1s with [ life_history = "adult" and sex = "female" and (fertility != "cycling" and fertility != "pregnant" and fertility != "lactating") ] ) body
    ;    
    ;    set header lput "Only adult females can be cycling?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( not any? anima1s with [ ( life_history != "adult" or sex = "male" ) and fertility = "cycling" ] ) body
    ;    
    ;    set header lput "Cycling females do not have any gestatees? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( not any? anima1s with [ fertility = "cycling" and any? anima1s with [ life_history = "gestatee" and mother = myself ]] ) body
    ;    
    ;    set header lput "Cycling females do not have any infants? " header
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( not any? anima1s with [ fertility = "cycling" and any? anima1s with [ life_history = "infant" and mother = myself ]]  ) body
    ;    
    ;    set header lput "Only adult females can be pregnant? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( not any? anima1s with [ ( life_history != "adult" or sex = "male" ) and fertility = "pregnant" ] ) body
    ;    
    ;    set header lput "All living mothers of gestatees are pregnant? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( not any? anima1s with [ life_history = "gestatee" and mother != nobody and [fertility] of mother != "pregnant" ]  ) body
    ;    
    ;    set header lput "Pregnant females have dependant gestatee(s)? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( not any? anima1s with [ fertility = "pregnant" and not any? anima1s with [ life_history = "gestatee" and mother = myself ] ] ) body
    ;    
    ;    set header lput "Only adult females can be lactating? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( not any? anima1s with [ ( life_history != "adult" or sex = "male" ) and fertility = "lactating" ] ) body
    ;    
    ;    set header lput "Lactating females have dependant infant(s)? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( not any? anima1s with [ fertility = "pregnant" and not any? anima1s with [ life_history = "infant" and mother = myself ] ] ) body
    ;    
    ;    set header lput "All living mothers of infants are lactating? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-status" function
    ;    set body lput ( not any? anima1s with [ life_history = "gestatee" and mother != nobody and [fertility] of mother != "lacating" ]) body
    
    ;    set header lput "Offpsring are about half genetically related to their mother? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "get-degree-relatedness-with" function
    ;    set body lput ( not any? anima1s with [ mother != nobody and abs ( 0.5 - get-degree-relatedness-with mother ) > 0.10 ] ) body
    ;    
    ;    set header lput "Offpsring are about half genetically related to their father? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "get-degree-relatedness-with" function
    ;    set body lput ( not any? anima1s with [ father != nobody and abs ( 0.5 - get-degree-relatedness-with father ) > 0.10 ] ) body
    ;    
    ;    set header lput "Siblings are about half genetically related to each other? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "get-degree-relatedness-with" function
    ;    set body lput ( false ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; UPDATE-ENERGY
    ; --------------------------------------------------------------------------------------------------------------------

    ; --------------------------------------------------------------------------------------------------------------------
    ; MAINTAIN-BODY
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to MAINTAIN-BODY? " header 
    set verification lput "runtime" verification 
    set function lput "maintain-body" function
    set body lput ( profiler:calls "maintain-body" > 1 ) body
    
    ;    set header lput "All anima1s call MAINTAIN-BODY?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "maintain-body" function
    ;    set body lput ( false ) body
    
    ;    set header lput "MAINTAIN-BODY updates living.chance as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "maintain-body" function
    ;    ask one-of anima1s with [ living.chance > 0 ] [
    ;      let random-energy random-float 1.0 * one-of [ -1  1 ]
    ;      let saved-living-chance living.chance
    ;      let expected-value ifelse-value 
    ;      ( random-energy < 0 )
    ;      [ saved-living-chance ^ (1 + abs random-energy) ]
    ;      [ saved-living-chance ^ (1 / ( 1 + random-energy) ) ]
    ;      maintain-body random-energy 
    ;      let actual-value living.chance
    ;      set living.chance saved-living-chance
    ;      set body lput ( expected-value = actual-value ) body
    ;    ]
    
    set header lput "All anima1s have a living.chance between zero and one? " header 
    set verification lput "dynamic" verification 
    set function lput "maintain-body" function
    set body lput ( not any? anima1s with [ living.chance < 0 or living.chance > 1 ] ) body
    
    set header lput "All anima1s have a living.chance approaching one? " header 
    set verification lput "dynamic" verification 
    set function lput "maintain-body" function
    set body lput ( not any? anima1s with [ not is.dead and living.chance < 0.95 or living.chance > 1 ] ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; BODY-SIZE
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to BODY-SIZE? " header 
    set verification lput "runtime" verification 
    set function lput "body-size" function
    set body lput ( profiler:calls "body-size" > 1 ) body
    
    ;    set header lput "GROW actions same number as GROW calls?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "grow" function
    ;    set body lput (( count actions with [ action-type = "GRW" ] ) = ( profiler:calls "grow" )) body
    ;    
    ;    set header lput "GROW function increases _body_size as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "grow" function
    ;    ask one-of anima1s [
    ;      let random-energy random-float 1.0
    ;      let saved-body-size _body_size
    ;      let expected-value ( saved-body-size ^ (1 / ( 1 + random-energy) ))
    ;      grow random-energy 
    ;      let actual-value _body_size
    ;      set _body_size saved-body-size
    ;      set body lput ( expected-value = actual-value ) body
    ;    ]
    ;    
    ;    set header lput "Infants are generally larger than gestatees?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "grow" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ life_history = "infant" ] ) [ mean [_body_size] of anima1s with [ life_history = "infant" ]] [0] ) >= (ifelse-value ( any? anima1s with [ life_history = "gestatee" ] ) [ mean [_body_size] of anima1s with [ life_history = "gestatee"]] [0] )) body
    ;    
    ;    set header lput "Juveniles are generally larger than infants?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "grow" function
    ;    set body lput ( ( ifelse-value ( any? anima1s with [ life_history = "juvenile" ] ) [mean [_body_size] of anima1s with [ life_history = "juvenile" ]] [0]) >= (ifelse-value ( any? anima1s with [ life_history = "infant" ] ) [mean [_body_size] of anima1s with [ life_history = "infant"]] [0] )) body
    ;    
    ;    set header lput "Adults are generally larger than juveniles?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "grow" function
    ;    set body lput ( ( ifelse-value ( any? anima1s with [ life_history = "adult" ] ) [mean [_body_size] of anima1s with [ life_history = "adult" ]][0]) >= ( ifelse-value ( any? anima1s with [ life_history = "juvenile" ] ) [mean [_body_size] of anima1s with [ life_history = "juvenile"]] [0] )) body
    ;    
    ;    set header lput "Agent _body_size is between zero and one? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "grow" function
    ;    set body lput ( not any? anima1s with [ _body_size < 0 or _body_size > 1 ] ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; BODY-SHADE
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to BODY-SHADE? " header 
    set verification lput "runtime" verification 
    set function lput "body-shade" function
    set body lput ( profiler:calls "body-shade" > 1 ) body
    
    ;    set header lput "BODY-SHADE updates body.shade as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "body-shade" function
    ;    ask one-of anima1s with [ body.shade > 0.001 ] [
    ;      let random-energy random-float 1.0 * one-of [ -1  1 ]
    ;      let saved-shade body.shade
    ;      let expected-value ifelse-value 
    ;      ( random-energy < 0 )
    ;      [ saved-shade ^ (1 + abs random-energy) ]
    ;      [ saved-shade ^ (1 / ( 1 + random-energy) ) ]
    ;      body-shade random-energy 
    ;      let actual-value body.shade
    ;      set body.shade saved-shade
    ;      set body lput ( expected-value = actual-value ) body
    ;    ]
    
    ;    set header lput "Infants are generally darker than gestatees?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "body-shade" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ life_history = "infant" ] ) [ mean [body.shade] of anima1s with [ life_history = "infant" ]] [0] ) >= (ifelse-value ( any? anima1s with [ life_history = "gestatee" ] ) [ mean [body.shade] of anima1s with [ life_history = "gestatee"]] [0] )) body
    ;    
    ;    set header lput "Juveniles are generally darker than infants?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "body-shade" function
    ;    set body lput ( ( ifelse-value ( any? anima1s with [ life_history = "juvenile" ] ) [mean [body.shade] of anima1s with [ life_history = "juvenile" ]] [0]) >= (ifelse-value ( any? anima1s with [ life_history = "infant" ] ) [mean [body.shade] of anima1s with [ life_history = "infant"]] [0] )) body
    ;    
    ;    set header lput "Adults are generally darker than juveniles?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "body-shade" function
    ;    set body lput ( ( ifelse-value ( any? anima1s with [ life_history = "adult" ] ) [mean [body.shade] of anima1s with [ life_history = "adult" ]][0]) >= ( ifelse-value ( any? anima1s with [ life_history = "juvenile" ] ) [mean [body.shade] of anima1s with [ life_history = "juvenile"]] [0] )) body
    
    set header lput "All anima1s have a body.shade between zero and one? " header 
    set verification lput "dynamic" verification 
    set function lput "body-shade" function
    set body lput ( not any? anima1s with [ body.shade < 0 or body.shade > 1 ] ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; DAY-PERCEPTION
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to DAY-PERCEPTION? " header 
    set verification lput "runtime" verification 
    set function lput "day-perception" function
    set body lput ( profiler:calls "day-perception" > 1 ) body
    
    ;;    set header lput "PERCEPTION actions same number as PERCEPTION calls?" header 
    ;;    set verification lput "runtime" verification 
    ;;    set function lput "perception" function
    ;;    set body lput (( count actions with [ action-type = "IPR" ] ) = ( profiler:calls "perception" )) body
    ;;    
    ;;    set header lput "PERCEPTION function increases _perception_range as expected?" header 
    ;;    set verification lput "static" verification 
    ;;    set function lput "perception" function
    ;;    ask one-of anima1s [
    ;;      let random-energy random-float 1.0
    ;;      let saved-perception _perception_range
    ;;      let expected-value ( saved-perception ^ (1 / ( 1 + random-energy) ))
    ;;      perception random-energy
    ;;      let actual-value _perception_range
    ;;      set _perception_range saved-perception
    ;;      set body lput ( expected-value = actual-value ) body
    ;;    ]
    ;;    
    ;;    set header lput "Adults are generally more perceptive than juveniles, infants or gestatees?" header 
    ;;    set verification lput "dynamic" verification 
    ;;    set function lput "perception" function
    ;;    set body lput ( ( ifelse-value ( any? anima1s with [ life_history = "adult" ] ) [mean [_perception_range] of anima1s with [ life_history = "adult" ]][0]) >= ( ifelse-value ( any? anima1s with [ life_history = "juvenile" or life_history = "infant" or life_history = "gestatee" ] ) [mean [_perception_range] of anima1s with [ life_history = "juvenile" or life_history = "infant" or life_history = "gestatee"]] [0] )) body
    ;;    
    ;;    set header lput "Agent _perception_range is between zero and one? " header 
    ;;    set verification lput "dynamic" verification 
    ;;    set function lput "perception" function
    ;;    set body lput ( not any? anima1s with [ _perception_range < 0 or _perception_range > 1 ] ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; NIGHT-PERCEPTION
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to NIGHT-PERCEPTION? " header 
    set verification lput "runtime" verification 
    set function lput "night-perception" function
    set body lput ( profiler:calls "night-perception" > 1 ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; AUDIO-PERCEPTION
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to AUDIO-PERCEPTION? " header 
    set verification lput "runtime" verification 
    set function lput "audio-perception" function
    set body lput ( profiler:calls "audio-perception" > 1 ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; CONCEPTION-CHANCE
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to CONCEPTION-CHANCE? " header 
    set verification lput "runtime" verification 
    set function lput "conception-chance" function
    set body lput ( profiler:calls "conception-chance" > 1 ) body
    
    ;    set header lput "CONCEPTION actions same number as CONCEPTION calls?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "conception%" function
    ;    set body lput (( count actions with [ action-type = "ICC" ] ) = ( profiler:calls "conception%" )) body
    ;    
    ;    set header lput "CONCEPTION function increases _conception_chance as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "conception%" function
    ;    ask one-of anima1s [
    ;      let random-energy random-float 1.0
    ;      let saved-conception _conception_chance
    ;      let expected-value ( saved-conception ^ (1 / ( 1 + random-energy) ))
    ;      conception% random-energy 
    ;      let actual-value _conception_chance
    ;      set _conception_chance saved-conception
    ;      set body lput ( expected-value = actual-value ) body
    ;    ]
    ;
    ;    set header lput "Juveniles generally have higher _conception_chance than infants or gestatees?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "conception%" function
    ;    set body lput ( ( ifelse-value ( any? anima1s with [ life_history = "juvenile" ] ) [mean [_conception_chance] of anima1s with [ life_history = "juvenile" ]] [0]) > (ifelse-value ( any? anima1s with [ life_history = "infant" or life_history = "gestatee" ] ) [mean [_conception_chance] of anima1s with [ life_history = "infant" or life_history = "gestatee"]] [0] )) body
    ;    
    ;    set header lput "Adults generally have higher _conception_chance than juveniles?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "conception%" function
    ;    set body lput ( ( ifelse-value ( any? anima1s with [ life_history = "adult" ] ) [mean [_conception_chance] of anima1s with [ life_history = "adult" ]][0]) > ( ifelse-value ( any? anima1s with [ life_history = "juvenile" ] ) [mean [_conception_chance] of anima1s with [ life_history = "juvenile"]] [0] )) body
    ;    
    ;    set header lput "Adults have _conception_chance higher than 0.8?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "conception%" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ life_history = "adult" ] ) [ mean [_conception_chance] of anima1s with [ life_history = "adult" ]] [0] ) > 0.8 ) body
    ;    
    ;    set header lput "Agent _conception_chance is between zero and one? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "conception%" function
    ;    set body lput ( not any? anima1s with [ _conception_chance < 0 or _conception_chance > 1 ] ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; MUTATION-RATE
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to MUTATION-RATE? " header 
    set verification lput "runtime" verification 
    set function lput "mutation-rate" function
    set body lput ( profiler:calls "mutation-rate" > 1 ) body
    
    ;    set header lput "MUTATION actions same number as MUTATION calls?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "mutation%" function
    ;    set body lput (( count actions with [ action-type = "ICC" ] ) = ( profiler:calls "mutation%" )) body
    ;    
    ;    set header lput "MUTATION function increases _mutation_chance as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "mutation%" function
    ;    ask one-of anima1s [
    ;      let random-energy random-float 1.0
    ;      let saved-mutation _mutation_chance
    ;      let expected-value ( saved-mutation ^ (1 / ( 1 + random-energy) ))
    ;      mutation% random-energy 
    ;      let actual-value _mutation_chance
    ;      set _mutation_chance saved-mutation
    ;      set body lput ( expected-value = actual-value ) body
    ;    ]
    ;    
    ;    set header lput "Juveniles generally have higher _mutation_chance than infants or gestatees?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "mutation%" function
    ;    set body lput ( ( ifelse-value ( any? anima1s with [ life_history = "juvenile" ] ) [mean [_mutation_chance] of anima1s with [ life_history = "juvenile" ]] [0]) > (ifelse-value ( any? anima1s with [ life_history = "infant" or life_history = "gestatee" ] ) [mean [_mutation_chance] of anima1s with [ life_history = "infant" or life_history = "gestatee"]] [0] )) body
    ;    
    ;    set header lput "Adults generally have higher _mutation_chance than juveniles?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "mutation%" function
    ;    set body lput ( ( ifelse-value ( any? anima1s with [ life_history = "adult" ] ) [mean [_mutation_chance] of anima1s with [ life_history = "adult" ]][0]) > ( ifelse-value ( any? anima1s with [ life_history = "juvenile" ] ) [mean [_mutation_chance] of anima1s with [ life_history = "juvenile"]] [0] )) body
    ;    
    ;    set header lput "Adults have _mutation_chance lower than 0.1?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "mutation%" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ life_history = "adult" ] ) [ mean [_mutation_chance] of anima1s with [ life_history = "adult" ]] [0] ) < 0.1 ) body
    ;    
    ;    set header lput "Agent _mutation_chance is between zero and one? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "mutation%" function
    ;    set body lput ( not any? anima1s with [ _mutation_chance < 0 or _mutation_chance > 1 ] ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; SEX-RATIO
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to SEX-RATIO? " header 
    set verification lput "runtime" verification 
    set function lput "sex-ratio" function
    set body lput ( profiler:calls "sex-ratio" > 1 ) body
    
    ;    set header lput "SEXRATIO actions same number as SEXRATIO calls?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "sexratio" function
    ;    set body lput (( count actions with [ action-type = "SXR" ] ) = ( profiler:calls "sexratio" )) body
    ;    
    ;    set header lput "SEXRATIO function increases _sex_ratio as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "sexratio" function
    ;    ask one-of anima1s [
    ;      let random-energy random-float 1.0
    ;      let saved-sexratio _sex_ratio
    ;      let expected-value ( saved-sexratio ^ (1 / ( 1 + random-energy) ))
    ;      sexratio random-energy 
    ;      let actual-value _sex_ratio
    ;      set _sex_ratio saved-sexratio
    ;      set body lput ( expected-value = actual-value ) body
    ;    ]
    ;    
    ;    set header lput "Agent _sex_ratio is between zero and one? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "sexratio" function
    ;    set body lput ( not any? anima1s with [ _sex_ratio < 0 or _sex_ratio > 1 ] ) body
    ;    
    ;    set header lput "There are some 'female' agents?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "sexratio" function
    ;    set body lput ( count anima1s with [ sex = "female" ] > 0 ) body
    ;    
    ;    set header lput "There are some 'male' agents?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "sexratio" function
    ;    set body lput ( count anima1s with [ sex = "male" ] > 0 ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; LITTER-SIZE
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to LITTER-SIZE?" header 
    set verification lput "runtime" verification 
    set function lput "litter-size" function
    set body lput ( profiler:calls "litter-size" > 1 ) body
    
    ;    set header lput "LITTER actions same number as LITTER calls?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "litter#" function
    ;    set body lput (( count actions with [ action-type = "LTS" ] ) = ( profiler:calls "litter#" )) body
    ;    
    ;    set header lput "LITTER function increases _litter_size as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "litter#" function
    ;    ask one-of anima1s [
    ;      let random-energy random-float 1.0
    ;      let saved-litter _litter_size
    ;      let expected-value ( saved-litter ^ (1 / ( 1 + random-energy) ))
    ;      litter# random-energy 
    ;      let actual-value _litter_size
    ;      set _litter_size saved-litter
    ;      set body lput ( expected-value = actual-value ) body
    ;    ]
    ;    
    ;    set header lput "Adults have litters of one or greater?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "litter#" function
    ;    set body lput ( 100 ^ (ifelse-value ( any? anima1s with [ life_history = "adult" ] ) [ mean [_litter_size] of anima1s with [ life_history = "adult" ]] [0] ) > 1 ) body
    ;    
    ;    set header lput "Agent _litter_size is between zero and one? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "litter#" function
    ;    set body lput ( not any? anima1s with [ _litter_size < 0 or _litter_size > 1 ] ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; LEAVE-GROUP
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to LEAVE-GROUP?" header 
    set verification lput "runtime" verification 
    set function lput "leave-group" function
    set body lput ( profiler:calls "leave-group" > 1 ) body
    
    set header lput "Not any groups with no group members?" header 
    set verification lput "dynamic" verification 
    set function lput "leave-group" function
    set body lput ( not any? groups with [ count group-members = 0 ] ) body
    
    ;;    set header lput "LEAVE function as expected?" header 
    ;;    set verification lput "static" verification 
    ;;    set function lput "leave" function
    ;;    ask one-of anima1s [
    ;;      ;      let random-energy random-float 1.0
    ;;      ;      let saved_weaning _weaning_chance
    ;;      ;      let expected-value ( saved_weaning ^ (1 / ( 1 + random-energy) ))
    ;;      ;      weaning% random-energy 
    ;;      ;      let actual-value _weaning_chance
    ;;      ;      set _weaning_chance saved_weaning
    ;;      ;      set body lput ( expected-value = actual-value ) body
    ;;      set body lput false body
    ;;    ]
    ;    
    ;    set header lput "Dynamic logic?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "leave" function
    ;    set body lput false body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; INITIALIZE-GROUP
    ; --------------------------------------------------------------------------------------------------------------------
    
    ;    set header lput "Not any groups without any members?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "-" function
    ;    set body lput ( not any? groups with [ not any? anima1s with [ current-group-id = myself ] ] ) body
    
    ;    not any groups without members and not any members without groups
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; SET-HEADING
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to SET-HEADING?" header 
    set verification lput "runtime" verification 
    set function lput "set-heading" function
    set body lput ( profiler:calls "set-heading" > 1 ) body
    
    ;    set header lput "Calls to MOVE same as count population?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "move" function
    ;    set body lput ( profiler:calls "move" = count anima1s ) body
    ;
    ;;    set header lput "MOVE function as expected?" header 
    ;;    set verification lput "static" verification 
    ;;    set function lput "leave" function
    ;;    ask one-of anima1s [
    ;;      ;      let random-energy random-float 1.0
    ;;      ;      let saved_weaning _weaning_chance
    ;;      ;      let expected-value ( saved_weaning ^ (1 / ( 1 + random-energy) ))
    ;;      ;      weaning% random-energy 
    ;;      ;      let actual-value _weaning_chance
    ;;      ;      set _weaning_chance saved_weaning
    ;;      ;      set body lput ( expected-value = actual-value ) body
    ;;      set body lput false body
    ;;    ]
    ;    
    ;    set header lput "Dynamic logic?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "leave" function
    ;    set body lput false body
    
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; TURN-LEFT
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to TURN-LEFT?" header 
    set verification lput "runtime" verification 
    set function lput "turn-left" function
    set body lput ( profiler:calls "turn-left" > 1 ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; TURN-RIGHT
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to TURN-RIGHT?" header 
    set verification lput "runtime" verification 
    set function lput "turn-right" function
    set body lput ( profiler:calls "turn-right" > 1 ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; GO-FORWARD
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to GO-FORWARD?" header 
    set verification lput "runtime" verification 
    set function lput "go-forward" function
    set body lput ( profiler:calls "go-forward" > 1 ) body
    

    ; --------------------------------------------------------------------------------------------------------------------
    ; SIGNALING
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to SIGNAL-A-CHANCE?" header 
    set verification lput "runtime" verification 
    set function lput "signal-a-chance" function
    set body lput ( profiler:calls "signal-a-chance" > 1 ) body
    
    set header lput "Nonzero calls to SIGNAL-A-ON?" header 
    set verification lput "runtime" verification 
    set function lput "signal-a-on" function
    set body lput ( profiler:calls "signal-a-on" > 1 ) body
    
    set header lput "Nonzero calls to SIGNAL-B-CHANCE?" header 
    set verification lput "runtime" verification 
    set function lput "signal-b-chance" function
    set body lput ( profiler:calls "signal-b-chance" > 1 ) body
    
    set header lput "Nonzero calls to SIGNAL-B-ON?" header 
    set verification lput "runtime" verification 
    set function lput "signal-b-on" function
    set body lput ( profiler:calls "signal-b-on" > 1 ) body
    
    set header lput "Nonzero calls to SIGNAL-C-CHANCE?" header 
    set verification lput "runtime" verification 
    set function lput "signal-c-chance" function
    set body lput ( profiler:calls "signal-c-chance" > 1 ) body
    
    set header lput "Nonzero calls to SIGNAL-C-ON?" header 
    set verification lput "runtime" verification 
    set function lput "signal-c-on" function
    set body lput ( profiler:calls "signal-c-on" > 1 ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; CHECK-INFANCY
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to INFANCY-CHANCE?" header 
    set verification lput "runtime" verification 
    set function lput "infancy-chance" function
    set body lput ( profiler:calls "infancy-chance" > 1 ) body
    
    ;    set header lput "INFANT% function increases _infancy_chance as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "infant%" function
    ;    ask one-of anima1s [
    ;      let random-energy random-float 1.0
    ;      let saved-infancy _infancy_chance
    ;      let expected-value ( saved-infancy ^ (1 / ( 1 + random-energy) ))
    ;      infant% random-energy 
    ;      let actual-value _infancy_chance
    ;      set _infancy_chance saved-infancy
    ;      set body lput ( expected-value = actual-value ) body
    ;    ]
    ;
    ;    set header lput "Other agents generally have higher _infancy_chance than gestatees?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "infant%" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ life_history != "gestatee" ] ) [ mean [_infancy_chance] of anima1s with [ life_history != "gestatee" ]] [0] ) > (ifelse-value ( any? anima1s with [ life_history = "gestatee" ] ) [ mean [_infancy_chance] of anima1s with [ life_history = "gestatee"]] [0] )) body
    ;    
    ;    set header lput "Agent _infancy_chance is between zero and one? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "infant%" function
    ;    set body lput ( not any? anima1s with [ _infancy_chance < 0 or _infancy_chance > 1 ] ) body
    

    set header lput "Nonzero calls to CHECK-INFANCY?" header 
    set verification lput "runtime" verification 
    set function lput "check-infancy" function
    set body lput ( profiler:calls "check-infancy" > 1 ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; CHECK-BIRTH
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to BIRTHING-CHANCE?" header 
    set verification lput "runtime" verification 
    set function lput "birthing-chance" function
    set body lput ( profiler:calls "birthing-chance" > 1 ) body
    
    ;    set header lput "BIRTHING% function increases _birthing_chance as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "birthing%" function
    ;    ask one-of anima1s [
    ;      let random-energy random-float 1.0
    ;      let saved_birthing _birthing_chance
    ;      let expected-value ( saved_birthing ^ (1 / ( 1 + random-energy) ))
    ;      birthing% random-energy 
    ;      let actual-value _birthing_chance
    ;      set _birthing_chance saved_birthing
    ;      set body lput ( expected-value = actual-value ) body
    ;    ]
    ;
    ;    set header lput "Pregnant agents generally have higher _birthing_chance than non-pregnant agents?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "birthing%" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ fertility = "pregnant" ] ) [ mean [_birthing_chance] of anima1s with [ fertility = "pregnant" ]] [0] ) > (ifelse-value ( any? anima1s with [ fertility != "pregnant" ] ) [ mean [_birthing_chance] of anima1s with [ fertility != "pregnant" ]] [0] )) body
    ;    
    ;    set header lput "Agent _birthing_chance is between zero and one? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "birthing%" function
    ;    set body lput ( not any? anima1s with [ _birthing_chance < 0 or _birthing_chance > 1 ] ) body

    set header lput "Nonzero calls to CHECK-BIRTH?" header 
    set verification lput "runtime" verification 
    set function lput "check-birth" function
    set body lput ( profiler:calls "check-birth" > 1 ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; UPDATE-TO-INFANT
    ; --------------------------------------------------------------------------------------------------------------------
    
    ;    set header lput "There are some 'infant' agents?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-to-infant" function
    ;    set body lput ( count anima1s with [ life_history = "infant" ] > 0 ) body
    
    ;    set header lput "Non-gestatees are not hidden? " header
    ;    set verification lput "dynamic" verification 
    ;    set function lput "give-birth" function
    ;    set body lput ( not any? anima1s with [ life_history != "gestatee" and hidden? = true ] ) body
    
    ;;   ticks in between life history stages not too small or too large
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; CHECK-JUVENILITY
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to JUVENILE-CHANCE?" header 
    set verification lput "runtime" verification 
    set function lput "juvenile-chance" function
    set body lput ( profiler:calls "juvenile-chance" > 1 ) body
    
    ;    set header lput "JUVENILE% function increases _juvenile_chance as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "juvenile%" function
    ;    ask one-of anima1s [
    ;      let random-energy random-float 1.0
    ;      let saved_juvenility _juvenility_chance
    ;      let expected-value ( saved_juvenility ^ (1 / ( 1 + random-energy) ))
    ;      juvenile% random-energy 
    ;      let actual-value _juvenility_chance
    ;      set _juvenility_chance saved_juvenility
    ;      set body lput ( expected-value = actual-value ) body
    ;    ]
    ;    
    ;    set header lput "Infants generally have higher _juvenility_chance than gestatees?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "juvenile%" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ life_history = "infant" ] ) [ mean [_juvenility_chance] of anima1s with [ life_history = "infant" ]] [0] ) > (ifelse-value ( any? anima1s with [ life_history = "gestatee" ] ) [ mean [_juvenility_chance] of anima1s with [ life_history = "gestatee" ]] [0] )) body
    ;    
    ;    set header lput "Other agents generally have higher _juvenility_chance than infants or gestatees?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "juvenile%" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ life_history != "gestatee" and life_history != "infant" ] ) [ mean [_juvenility_chance] of anima1s with [ life_history != "gestatee" and life_history != "infant" ]] [0] ) > (ifelse-value ( any? anima1s with [ life_history = "gestatee" or life_history = "infant" ] ) [ mean [_juvenility_chance] of anima1s with [ life_history = "gestatee" or life_history = "infant" ]] [0] )) body
    ;    
    ;    set header lput "Agent _juvenility_chance is between zero and one? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "juvenile%" function
    ;    set body lput ( not any? anima1s with [ _juvenility_chance < 0 or _juvenility_chance > 1 ] ) body
    

    set header lput "Nonzero calls to CHECK-JUVENILITY?" header 
    set verification lput "runtime" verification 
    set function lput "check-juvenility" function
    set body lput ( profiler:calls "check-juvenility" > 1 ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; CHECK-WEANING
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to WEANING-CHANCE?" header 
    set verification lput "runtime" verification 
    set function lput "weaning-chance" function
    set body lput ( profiler:calls "weaning-chance" > 1 ) body
    
    ;    set header lput "WEANING% function increases _weaning_chance as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "weaning%" function
    ;    ask one-of anima1s [
    ;      let random-energy random-float 1.0
    ;      let saved_weaning _weaning_chance
    ;      let expected-value ( saved_weaning ^ (1 / ( 1 + random-energy) ))
    ;      weaning% random-energy 
    ;      let actual-value _weaning_chance
    ;      set _weaning_chance saved_weaning
    ;      set body lput ( expected-value = actual-value ) body
    ;    ]
    ;
    ;    set header lput "Lactating agents generally have higher _weaning_chance than non-lactating agents?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "weaning%" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ fertility = "lactating" ] ) [ mean [_weaning_chance] of anima1s with [ fertility = "lactating" ]] [0] ) > (ifelse-value ( any? anima1s with [ fertility != "lactating" ] ) [ mean [_weaning_chance] of anima1s with [ fertility != "lactating" ]] [0] )) body
    ;    
    ;    set header lput "Agent _weaning_chance is between zero and one? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "weaning%" function
    ;    set body lput ( not any? anima1s with [ _weaning_chance < 0 or _weaning_chance > 1 ] ) body
    

    set header lput "Nonzero calls to CHECK-WEANING?" header 
    set verification lput "runtime" verification 
    set function lput "check-weaning" function
    set body lput ( profiler:calls "check-weaning" > 1 ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; UPDATE-TO-JUVENILE
    ; --------------------------------------------------------------------------------------------------------------------
    
    ;    set header lput "There are some 'juvenile' agents?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-to-juvenile" function
    ;    set body lput ( count anima1s with [ life_history = "juvenile" ] > 0 ) body
    
    ;;   ticks in between life history stages not too small or too large
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; CHECK-ADULTHODD
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to ADULT-CHANCE?" header 
    set verification lput "runtime" verification 
    set function lput "adult-chance" function
    set body lput ( profiler:calls "adult-chance" > 1 ) body
    
    ;    set header lput "ADULT% function increases _adulthood_chance as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "adult%" function
    ;    ask one-of anima1s [
    ;      let random-energy random-float 1.0
    ;      let saved_adulthood _adulthood_chance
    ;      let expected-value ( saved_adulthood ^ (1 / ( 1 + random-energy) ))
    ;      adult% random-energy 
    ;      let actual-value _adulthood_chance
    ;      set _adulthood_chance saved_adulthood
    ;      set body lput ( expected-value = actual-value ) body
    ;    ]
    ;
    ;    set header lput "Juveniles generally have higher _adulthood_chance than infants or gestatees?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "adult%" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ life_history = "juvenile" ] ) [ mean [_adulthood_chance] of anima1s with [ life_history = "juvenile" ]] [0] ) > (ifelse-value ( any? anima1s with [ life_history = "gestatee" or life_history = "infant" ] ) [ mean [_adulthood_chance] of anima1s with [ life_history = "gestatee" or life_history = "infant" ]] [0] )) body
    ;    
    ;    set header lput "Senescents and adults generally have higher _adulthood_chance than juveniles, infants or gestatees?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "adult%" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ life_history = "senescent" or life_history = "adult" ] ) [ mean [_adulthood_chance] of anima1s with [ life_history = "senescent" or life_history = "adult" ]] [0] ) > (ifelse-value ( any? anima1s with [ life_history = "gestatee" or life_history = "infant" or life_history = "juvenile" ] ) [ mean [_adulthood_chance] of anima1s with [ life_history = "gestatee" or life_history = "infant" or life_history = "juvenile"]] [0] )) body
    ;    
    ;    set header lput "Agent _adulthood_chance is between zero and one? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "adult%" function
    ;    set body lput ( not any? anima1s with [ _adulthood_chance < 0 or _adulthood_chance > 1 ] ) body
    

    set header lput "Nonzero calls to WEANING-CHANCE?" header 
    set verification lput "runtime" verification 
    set function lput "weaning-chance" function
    set body lput ( profiler:calls "weaning-chance" > 1 ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; UPDATE-TO-ADULT
    ; --------------------------------------------------------------------------------------------------------------------

    ;    set header lput "There are some 'adult' agents?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-to-adult" function
    ;    set body lput ( count anima1s with [ life_history = "adult" ] > 0 ) body
    
    ;;   ticks in between life history stages not too small or too large
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; CHECK-SENESCENCE
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to SENESCENT-CHANCE?" header 
    set verification lput "runtime" verification 
    set function lput "senescent-chance" function
    set body lput ( profiler:calls "senescent-chance" > 1 ) body
    
    ;    set header lput "SENESCENT% function increases _senescency_chance as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "senescent%" function
    ;    ask one-of anima1s [
    ;      let random-energy random-float 1.0
    ;      let saved_senescency _senescency_chance
    ;      let expected-value ( saved_senescency ^ (1 / ( 1 + random-energy) ))
    ;      senescent% random-energy 
    ;      let actual-value _senescency_chance
    ;      set _senescency_chance saved_senescency
    ;      set body lput ( expected-value = actual-value ) body
    ;    ]
    ;
    ;    set header lput "Adults generally have higher _senescency_chance than juveniles, infants or gestatees?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "senescent%" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ life_history = "adults" ] ) [ mean [_senescency_chance] of anima1s with [ life_history = "adult" ]] [0] ) > (ifelse-value ( any? anima1s with [ life_history = "gestatee" or life_history = "infant" or life_history = "juvenile" ] ) [ mean [_senescency_chance] of anima1s with [ life_history = "gestatee" or life_history = "infant" or life_history = "juvenile" ]] [0] )) body
    ;    
    ;    set header lput "Senescents generally have higher _senescency_chance than adults, juveniles, infants or gestatees?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "senescent%" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ life_history = "senescent" ] ) [ mean [_senescency_chance] of anima1s with [ life_history = "senescent" ]] [0] ) > (ifelse-value ( any? anima1s with [ life_history = "gestatee" or life_history = "infant" or life_history = "juvenile" or life_history = "adult" ] ) [ mean [_senescency_chance] of anima1s with [ life_history = "gestatee" or life_history = "infant" or life_history = "juvenile" or life_history = "adult" ]] [0] )) body
    ;    
    ;    set header lput "Agent _senescency_chance is between zero and one? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "senescent%" function
    ;    set body lput ( not any? anima1s with [ _senescency_chance < 0 or _senescency_chance > 1 ] ) body
    

    set header lput "Nonzero calls to CHECK-SENESCENCE?" header 
    set verification lput "runtime" verification 
    set function lput "check-senescence" function
    set body lput ( profiler:calls "check-senescence" > 1 ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; UPDATE-TO-SENESCENT
    ; --------------------------------------------------------------------------------------------------------------------
    
    ;    set header lput "There are some 'senescent' agents?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "update-to-senescent" function
    ;    set body lput ( count anima1s with [ life_history = "senescent" ] > 0 ) body
    
    
    ;;   ticks in between life history stages not too small or too large
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; DIGEST-STOMACH
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to DIGEST-STOMACH?" header 
    set verification lput "runtime" verification 
    set function lput "digest-stomach" function
    set body lput ( profiler:calls "digest-stomach" > 1 ) body
    
    ; stomach contents not full
    
    
    ;    ;    set header lput "Agents energy is greater than zero? " header 
    ;    ;    set verification lput "dynamic" verification 
    ;    ;    set function lput "-" function
    ;    ;    set body lput ( not any? anima1s with [ _energy < 0 ] ) body
    
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; RESERVE-ENERGY
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to RESERVE-ENERGY?" header 
    set verification lput "runtime" verification 
    set function lput "reserve-energy" function
    set body lput ( profiler:calls "reserve-energy" > 1 ) body
    
    ;    set header lput "RESERVE function adds energy to _reserves as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "reserve" function
    ;    ask one-of anima1s [
    ;      let random-energy random-float 1.0
    ;      let saved-reserves _reserves
    ;      let expected-value saved-reserves + random-energy
    ;      reserve random-energy 
    ;      let actual-value _reserves
    ;      set _reserves saved-reserves
    ;      set body lput ( expected-value = actual-value ) body
    ;    ]
    ;    
    ;    set header lput "Females generally have the higher _reserves than males?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "reserve" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ sex = "female" ] ) [ mean [_reserves] of anima1s with [ sex = "female" ]] [0] ) >= (ifelse-value ( any? anima1s with [ sex = "male" ] ) [ mean [_reserves] of anima1s with [ sex = "male"]] [0] )) body
    ;    
    ;    set header lput "All cycing Females have nonzero _reserves?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "reserve" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ fertility = "cycling" ] ) [ count anima1s with [ fertility = "cycling" and _reserves > 0 ]] [0] ) = (ifelse-value ( any? anima1s with [ fertility = "cycling" ] ) [ count anima1s with [ fertility = "cycling" ]] [0] ) ) body
    ;    
    ;    set header lput "All pregnant Females have nonzero _reserves?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "reserve" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ fertility = "pregnant" ] ) [ count anima1s with [ fertility = "pregnant" and _reserves > 0 ]] [0] ) = (ifelse-value ( any? anima1s with [ fertility = "pregnant" ] ) [ count anima1s with [ fertility = "pregnant" ]] [0] ) ) body
    ;    
    ;    set header lput "All lactating Females have nonzero _reserves?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "reserve" function
    ;    set body lput ( (ifelse-value ( any? anima1s with [ fertility = "lactating" ] ) [ count anima1s with [ fertility = "lactating" and _reserves > 0 ]] [0] ) = (ifelse-value ( any? anima1s with [ fertility = "lactating" ] ) [ count anima1s with [ fertility = "lactating" ]] [0] ) ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; BURN-RESERVES
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to BURN-RESERVES?" header 
    set verification lput "runtime" verification 
    set function lput "burn-reserves" function
    set body lput ( profiler:calls "burn-reserves" > 1 ) body
    
    ;    ;    set header lput "BURN function decreases _reserves as expected?" header 
    ;    ;    set verification lput "static" verification 
    ;    ;    set function lput "burn" function
    ;    ;    ask one-of anima1s [
    ;    ;      let random-energy random-float 1.0
    ;    ;      let saved_reserves _reserves
    ;    ;      let expected-value 0 ;????
    ;    ;      burn random-energy
    ;    ;      let actual-value _reserves
    ;    ;      set _reserves saved_reserves
    ;    ;      set body lput ( expected-value = actual-value ) body
    ;    ;    ]
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; SUPPLY-TO
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to SUPPLY-TO?" header 
    set verification lput "runtime" verification 
    set function lput "supply-to" function
    set body lput ( profiler:calls "supply-to" > 1 ) body
    
    ;    set header lput "SUPPLY actions same number as SUPPLY calls?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "supply" function
    ;    set body lput (( count actions with [ action-type = "GFT" ] ) = ( profiler:calls "supply" )) body
    ;    
    ;;    set header lput "SUPPLY function as expected?" header 
    ;;    set verification lput "static" verification 
    ;;    set function lput "supply" function
    ;;    ask one-of anima1s [
    ;;      ;      let random-energy random-float 1.0
    ;;      ;      let saved_weaning _weaning_chance
    ;;      ;      let expected-value ( saved_weaning ^ (1 / ( 1 + random-energy) ))
    ;;      ;      weaning% random-energy 
    ;;      ;      let actual-value _weaning_chance
    ;;      ;      set _weaning_chance saved_weaning
    ;;      ;      set body lput ( expected-value = actual-value ) body
    ;;      set body lput false body
    ;;    ]
    ;    
    ;    set header lput "Lactating and pregnant females have most supplys?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "supply" function
    ;    set body lput false body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; DEMAND-FROM
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to DEMAND-FROM?" header 
    set verification lput "runtime" verification 
    set function lput "demand-from" function
    set body lput ( profiler:calls "demand-from" > 1 ) body
    
    set header lput "Nonzero calls to RECEIVE-FROM?" header 
    set verification lput "runtime" verification 
    set function lput "receive-from" function
    set body lput ( profiler:calls "receive-from" > 1 ) body
    
    set header lput "Calls to RECEIVE-FROM less than or equal to DEMAND-FROM?" header 
    set verification lput "runtime" verification 
    set function lput "receive-from" function
    set body lput ( profiler:calls "receive-from" <= profiler:calls "demand-from" ) body
    
    ;;    set header lput "DEMAND function as expected?" header 
    ;;    set verification lput "static" verification 
    ;;    set function lput "demand" function
    ;;    ask one-of anima1s [
    ;;      ;      let random-energy random-float 1.0
    ;;      ;      let saved_weaning _weaning_chance
    ;;      ;      let expected-value ( saved_weaning ^ (1 / ( 1 + random-energy) ))
    ;;      ;      weaning% random-energy 
    ;;      ;      let actual-value _weaning_chance
    ;;      ;      set _weaning_chance saved_weaning
    ;;      ;      set body lput ( expected-value = actual-value ) body
    ;;      set body lput false body
    ;;    ]
    ;    
    ;    set header lput "Dynamic logic?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "demand" function
    ;    set body lput false body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; EAT
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to EAT?" header 
    set verification lput "runtime" verification 
    set function lput "eat" function
    set body lput ( profiler:calls "eat" > 1 ) body
    
    
    ;;    set header lput "EAT function as expected?" header 
    ;;    set verification lput "static" verification 
    ;;    set function lput "eat" function
    ;;    ask one-of anima1s [
    ;;      ;      let random-energy random-float 1.0
    ;;      ;      let saved_weaning _weaning_chance
    ;;      ;      let expected-value ( saved_weaning ^ (1 / ( 1 + random-energy) ))
    ;;      ;      weaning% random-energy 
    ;;      ;      let actual-value _weaning_chance
    ;;      ;      set _weaning_chance saved_weaning
    ;;      ;      set body lput ( expected-value = actual-value ) body
    ;;      set body lput false body
    ;;    ]
    ;    
    ;    set header lput "Agents do not 'eat' when there are no plants?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "eat" function
    ;    set body lput ( not any? actions with [ action-type = "EAT" and not any? plants-here ] ) body
    ;    
    ;    set header lput "Agents do not 'eat' when target is not a plant?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "eat" function
    ;    set body lput ( not any? actions with [ action-type = "EAT" and not is-plant? get-target ] ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; PICK-UP
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to PICK-UP?" header 
    set verification lput "runtime" verification 
    set function lput "pick-up" function
    set body lput ( profiler:calls "pick-up" > 1 ) body
    
    ;;    set header lput "PICKUP function adds TARGET to carrys as expected?" header 
    ;;    set verification lput "static" verification 
    ;;    set function lput "pickup" function
    ;;    ask one-of anima1s [
    ;;      ;      let random-energy random-float 1.0
    ;;      ;      let saved_weaning _weaning_chance
    ;;      ;      let expected-value ( saved_weaning ^ (1 / ( 1 + random-energy) ))
    ;;      ;      weaning% random-energy 
    ;;      ;      let actual-value _weaning_chance
    ;;      ;      set _weaning_chance saved_weaning
    ;;      ;      set body lput ( expected-value = actual-value ) body
    ;;      set body lput false body
    ;;    ]
    ;    
    ;    set header lput "Pregnant and lactating females have most carrys?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "pickup" function
    ;    set body lput false body
    ;    
    ;    set header lput "Infants and gestatees are the most carried?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "pickup" function
    ;    set body lput false body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; PUT-DOWN
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to PUT-DOWN?" header 
    set verification lput "runtime" verification 
    set function lput "put-down" function
    set body lput ( profiler:calls "put-down" > 1 ) body
    
    ;    set header lput "PUTDOWN actions same number as PUTDOWN calls?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "putdown" function
    ;    set body lput (( count actions with [ action-type = "PDN" ] ) = ( profiler:calls "putdown" )) body
    ;    
    ;;    set header lput "PUTDOWN function as expected?" header 
    ;;    set verification lput "static" verification 
    ;;    set function lput "putdown" function
    ;;    ask one-of anima1s [
    ;;      ;      let random-energy random-float 1.0
    ;;      ;      let saved_weaning _weaning_chance
    ;;      ;      let expected-value ( saved_weaning ^ (1 / ( 1 + random-energy) ))
    ;;      ;      weaning% random-energy 
    ;;      ;      let actual-value _weaning_chance
    ;;      ;      set _weaning_chance saved_weaning
    ;;      ;      set body lput ( expected-value = actual-value ) body
    ;;      set body lput false body
    ;;    ]
    ;    
    ;    set header lput "Juveniles have most putdowns?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "putdown" function
    ;    set body lput false body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; ATTACK
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to ATTACK?" header 
    set verification lput "runtime" verification 
    set function lput "attack" function
    set body lput ( profiler:calls "attack" > 1 ) body
    
    ;;    set header lput "ATTACK function as expected?" header 
    ;;    set verification lput "static" verification 
    ;;    set function lput "attack" function
    ;;    ask one-of anima1s [
    ;;      ;      let random-energy random-float 1.0
    ;;      ;      let saved_weaning _weaning_chance
    ;;      ;      let expected-value ( saved_weaning ^ (1 / ( 1 + random-energy) ))
    ;;      ;      weaning% random-energy 
    ;;      ;      let actual-value _weaning_chance
    ;;      ;      set _weaning_chance saved_weaning
    ;;      ;      set body lput ( expected-value = actual-value ) body
    ;;      set body lput false body
    ;;    ]
    ;    
    ;    set header lput "Males attack more than females?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "attack" function
    ;    set body lput false body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; GROOM
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to GROOM?" header 
    set verification lput "runtime" verification 
    set function lput "groom" function
    set body lput ( profiler:calls "groom" > 1 ) body
    
    ;;    set header lput "GROOM function as expected?" header 
    ;;    set verification lput "static" verification 
    ;;    set function lput "groom" function
    ;;    ask one-of anima1s [
    ;;      ;      let random-energy random-float 1.0
    ;;      ;      let saved_weaning _weaning_chance
    ;;      ;      let expected-value ( saved_weaning ^ (1 / ( 1 + random-energy) ))
    ;;      ;      weaning% random-energy 
    ;;      ;      let actual-value _weaning_chance
    ;;      ;      set _weaning_chance saved_weaning
    ;;      ;      set body lput ( expected-value = actual-value ) body
    ;;      set body lput false body
    ;;    ]
    ;    
    ;    set header lput "Dynamic logic?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "groom" function
    ;    set body lput false body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; JOIN-GROUP-OF
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to JOIN-GROUP-OF?" header 
    set verification lput "runtime" verification 
    set function lput "join-group-of" function
    set body lput ( profiler:calls "join-group-of" > 1 ) body
    
    ;;    set header lput "JOIN function as expected?" header 
    ;;    set verification lput "static" verification 
    ;;    set function lput "join" function
    ;;    ask one-of anima1s [
    ;;      ;      let random-energy random-float 1.0
    ;;      ;      let saved_weaning _weaning_chance
    ;;      ;      let expected-value ( saved_weaning ^ (1 / ( 1 + random-energy) ))
    ;;      ;      weaning% random-energy 
    ;;      ;      let actual-value _weaning_chance
    ;;      ;      set _weaning_chance saved_weaning
    ;;      ;      set body lput ( expected-value = actual-value ) body
    ;;      set body lput false body
    ;;    ]
    ;    
    ;    set header lput "Dynamic logic?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "join" function
    ;    set body lput false body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; MATE-WITH
    ; --------------------------------------------------------------------------------------------------------------------
    
    set header lput "Nonzero calls to MATE-WITH?" header 
    set verification lput "runtime" verification 
    set function lput "mate-with" function
    set body lput ( profiler:calls "mate-with" > 1 ) body
    
    set header lput "Nonzero calls to CONCEIVE-WITH?" header 
    set verification lput "runtime" verification 
    set function lput "conceive-with" function
    set body lput ( profiler:calls "conceive-with" > 1 ) body
    
    ;    set header lput "Nonzero calls to MATE-WITH?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "mate-with" function
    ;    set body lput ( profiler:calls "mate-with" > 1 ) body
    
    ;    set header lput "Nonzero calls to mate-with in population?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "mate-with" function
    ;    set body lput ( profiler:calls "mate-with" > 1 ) body 
    
    ;    set header lput "mate-with actions same number as mate-with calls?" header 
    ;    set verification lput "runtime" verification 
    ;    set function lput "mate-with" function
    ;    set body lput (( count actions with [ action-type = "MAT" ] ) = ( profiler:calls "mate-with" )) body
    ;    
    ;    set header lput "mate-with function as expected?" header 
    ;    set verification lput "static" verification 
    ;    set function lput "mate-with" function
    ;    ask one-of anima1s [
    ;      ;      let random-energy random-float 1.0
    ;      ;      let saved_weaning _weaning_chance
    ;      ;      let expected-value ( saved_weaning ^ (1 / ( 1 + random-energy) ))
    ;      ;      weaning% random-energy 
    ;      ;      let actual-value _weaning_chance
    ;      ;      set _weaning_chance saved_weaning
    ;      ;      set body lput ( expected-value = actual-value ) body
    ;      set body lput false body
    ;    ]
    
    ;    set header lput "Males do not 'mate-with' when there are no cycling females?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "mate-with" function
    ;    set body lput ( not any? actions with [ action-type = "MAT" and [sex] of get-ego = "male" and not any? anima1s with [ fertility = "cycling" ]] ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; CONCEIVE-WITH
    ; --------------------------------------------------------------------------------------------------------------------
    
    ;;    set header lput "CONCEIVE function as expected?" header 
    ;;    set verification lput "static" verification 
    ;;    set function lput "conceive?" function
    ;;    ask one-of anima1s [
    ;;      ;      let random-energy random-float 1.0
    ;;      ;      let saved_weaning _weaning_chance
    ;;      ;      let expected-value ( saved_weaning ^ (1 / ( 1 + random-energy) ))
    ;;      ;      weaning% random-energy 
    ;;      ;      let actual-value _weaning_chance
    ;;      ;      set _weaning_chance saved_weaning
    ;;      ;      set body lput ( expected-value = actual-value ) body
    ;;      set body lput false body
    ;;    ]
    ;    
    ;    set header lput "No gestatees, infants, or juveniles have offspring? " header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "conceive?" function
    ;    set body lput ( not any? anima1s with [ ( life_history = "gestatee" or life_history = "infant" or life_history = "juvenile" ) and any? my-offspring ]) body
    ;    
    ;    set header lput "There are a nonzero number of agents?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "conceive?" function
    ;    set body lput ( count anima1s > 0 ) body
    ;    
    ;    set header lput "There are a nonzero number of gestatees?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "conceive?" function
    ;    set body lput ( count anima1s with [ life_history = "gestatee" ] > 0 ) body
    
    ; --------------------------------------------------------------------------------------------------------------------
    ; INITIALIZATION
    ; --------------------------------------------------------------------------------------------------------------------
    
    ;    ; check every state variable making sure every agent normal values
    ;    
    ;    set header lput "Gestatees are hidden?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "initialization" function
    ;    set body lput ( not any? anima1s with [ life_history = "gestatee" and hidden? = false ] ) body
    ;    
    ;    set header lput "Males have a triangle shape?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "initialization" function
    ;    set body lput ( not any? anima1s with [ sex = "male" and shape != "triangle" ] ) body 
    ;    
    ;    set header lput "Females have a circle shape? " header
    ;    set verification lput "dynamic" verification 
    ;    set function lput "initialization" function
    ;    set body lput ( not any? anima1s with [ sex = "female" and shape != "circle" ] ) body
    ;    
    ;    set header lput "Agents have a non-negative generation?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "initialization" function
    ;    set body lput ( not any? anima1s with [ generation < 0 ] ) body
    ;    
    ;    set header lput "Gestatees have the same natal-group-id as mother?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "initialization" function
    ;    set body lput ( not any? anima1s with [ life_history = "gestatee" and mother != nobody and natal-group-id != [natal-group-id] of mother ] ) body
    ;    
    ;    set header lput "Agents are either male or female?" header 
    ;    set verification lput "dynamic" verification 
    ;    set function lput "initialization" function
    ;    set body lput ( not any? anima1s with [ sex != "male" and sex != "female" ] ) body
    
    ;;    set header lput "Chromosomes are roughly half from mother? " header 
    ;;    set verification lput "dynamic" verification 
    ;;    set function lput "recombine-chromosomes" function
    ;;    set body lput ( mean [get-degree-relatedness-with mother] of mob with [ mother != nobody ] <= 0.55 and mean [get-degree-relatedness-with mother] of mob with [ mother != nobody ] >= 0.45 ) body
    ;    
    ;;    set header lput "Chromosomes are roughly half from father? " header 
    ;;    set verification lput "dynamic" verification 
    ;;    set function lput "recombine-chromosomes" function
    ;;    set body lput ( mean [get-degree-relatedness-with father] of mob with [ father != nobody ]<= 0.55 and mean [get-degree-relatedness-with father] of anima1s with [ father != nobody ] >= 0.45 ) body
    
    ;;    set header lput "Chromosomes are slightly different from mother?" header 
    ;;    set verification lput "dynamic" verification 
    ;;    set function lput "mutate-chromosomes" function
    ;;    set body lput false body
    ;    
    ;;    set header lput "Chromosomes are slightly different from father?" header 
    ;;    set verification lput "dynamic" verification 
    ;;    set function lput "mutate-chromosomes" function
    ;;    set body lput false body
    
  ][ ]
  
  report (list header verification function body )
  profiler:stop 
  
end


