;----------------------------------------------------------------------------------------------
;
;             dP            d88888P                   
;             88                d8'                   
;  .d8888b. d8888P .d8888b.    d8'  dP    dP .d8888b. 
;  Y8ooooo.   88   88'  `88   d8'   88    88 Y8ooooo. 
;        88   88   88.  .88  d8'    88.  .88       88 
;  `88888P'   dP   `88888P8 d8'     `88888P' `88888P' 
;                                                                                       
;----------------------------------------------------------------------------------------------
; 
; This extension contains all functions that allow anima1s to make decisions from their 
; genotypes. B3GET requires access to the following functions in this extension in order to 
; work properly:
; 
; ACT
; DO-ACTION 
; GET-MUTATION
; GENERATE-DECISIONS
;----------------------------------------------------------------------------------------------

to act
  
  foreach decision.vectors [ vector ->
    let ego item 1 vector
    let target item 2 vector
    let code item 3 vector
    let operation item 4 vector
    let raw-weight item 5 vector
    let energy-cost abs raw-weight
    let polarity ( raw-weight > 0 )
    let not-done item 6 vector
    
    if ( not-done and energy.supply > energy-cost ) [
      update-energy ( - energy-cost )
      decisions-done (list vector)
      
      ifelse ifelse-value ( target = nobody ) [ false ] [ distance target < ( size / 2 + [size] of target / 2 ) ] [
        do-action code target raw-weight
        
      ][
        if (target != nobody ) [
          let ycor-difference ([ycor] of target - [ycor] of self )
          let xcor-difference ([xcor] of target - [xcor] of self )
          let angle ifelse-value ( ycor-difference = 0 or xcor-difference = 0 ) [ random 360 ] [ atan ycor-difference xcor-difference ]
          if ( polarity = false ) [ set angle angle - 180 ] ; could possibly simplify by taking out polarity and ...
          set x.magnitude x.magnitude + (energy-cost * sin angle) ; ... putting raw-weight here instead of energy-cost
          set y.magnitude y.magnitude + (energy-cost * cos angle) ; ... would that be mathematically equivalent?
        ]
      ]
    ]
  ]
  
end

;----------------------------------------------------------------------------------------------
; DO-ACTION
;
; Operation to do a given ACTION directed to a given TARGET with a given VALUE.
;
; CALLER: anima1
; ACTION: the action code representing the action to perform.
; TARGET: the receiver of an inter-action.
; VALUE: the amount of energy allotted to the action.
;----------------------------------------------------------------------------------------------

to do-action [ action-code target value ]
  
  carefully [
    if action-code = "MNT" [ maintain-body value ]
    if action-code = "GRW" [ body-size value ]
    if action-code = "BSD" [ body-shade value ]
    if action-code = "IPR" [ day-perception value ]
    if action-code = "NPR" [ night-perception value ]
    if action-code = "APR" [ audio-perception value ]
    if action-code = "DPA" [ day-perception-angle value ]
    if action-code = "NPA" [ night-perception-angle value ]
    if action-code = "APA" [ audio-perception-angle value ]
    if action-code = "VCR" [ vocal-range value ]
    if action-code = "ICC" [ conception-chance value ]
    if action-code = "MTR" [ mutation-rate value ]
    if action-code = "SXR" [ sex-ratio value ]
    if action-code = "LTS" [ litter-size value ]
    if action-code = "LEV" [ leave-group value ]
    if action-code = "TRT" [ turn-right value ]
    if action-code = "TLF" [ turn-left value ]
    if action-code = "GFD" [ go-forward value ]
    if action-code = "HED" [ set-heading value ]
    if action-code = "SAO" [ signal-a-on value ]
    if action-code = "SBO" [ signal-b-on value ]
    if action-code = "SCO" [ signal-c-on value ]
    if action-code = "CKI" [ check-infancy value ]
    if action-code = "CKB" [ check-birth value ]
    if action-code = "CKJ" [ check-juvenility value ]
    if action-code = "CKW" [ check-weaning value ]
    if action-code = "CKA" [ check-adulthood value ]
    if action-code = "CKS" [ check-senescence value ]
    if action-code = "GFT" [ supply-to target value ]
    if action-code = "RFT" [ demand-from target value ]
    if action-code = "EAT" [ eat target value ]
    if action-code = "PKU" [ pick-up target value ]
    if action-code = "SQM" [ squirm-from target value ]
    if action-code = "PDN" [ put-down target value ]
    if action-code = "CLG" [ cling-to target value ]
    if action-code = "ATK" [ attack target value ]
    if action-code = "HLP" [ help target value ]
    if action-code = "JNG" [ join-group-of target value ]
    if action-code = "MAT" [ mate-with target value ]
    
  ][  ]
  
end

;----------------------------------------------------------------------------------------------
; GET-MUTATION
;
; Returns a randomly selected codon to occasionally introduce novel mutations into a population.
;
; CALLER: anima1
;----------------------------------------------------------------------------------------------

to-report get-mutation
  report 
  one-of [
    "DEC" "MNT" "GRW" "BSD" "IPR" 
    "NPR" "APR" "ICC" "MTR" "SXR" 
    "LTS" "LEV" "TRT" "TLF" "GFD" 
    "HED" "SAC" "SBC" "SCC" "SAO" 
    "SBO" "SCO" "INC" "CKI" "GVB" 
    "CKB" "JVC" "CKJ" "WEN" "CKW"
    "ADC" "CKA" "SNC" "CKS" "DSC" 
    "FAT" "BRN" "GFT" "RFT" "EAT" 
    "PKU" "PDN" "ATK" "HLP" "JNG"
    "MAT" "DPA" "NPA" "APA" "VCR" 
    "e" "o" "m" "f" "g" "i" "j" 
    "a" "s" "c" "p" "l" "r" "b"
    "h" "x" "k" "q" "n" "u" "p"
    "y" "t" "d" "v" "w" "z" "+"
    "gm" "gf" "im" "if" "jm" "jf"
    "af" "am" "sm" "sf" true false
  ]
end

;----------------------------------------------------------------------------------------------
; GENERATE-DECISIONS
;
; Reporter that returns a list of decision vectors generated from genotype.
;
; Caller: anima1
; ENVIRONMENT: list of turtles (both plants and anima1s) observed by the caller.
;----------------------------------------------------------------------------------------------

to generate-decisions [ local-turtles ]
  
  let meself self
  let current-energy energy.supply
  let self-phenotype status-of meself
  let decision-vectors []
  
  foreach (sentence chromosome.I chromosome.II) [ g ->
    let gene-ego item 1 g
    let gene-other item 2 g
    let gene-action item 3 g
    let gene-weight item 4 g
    
    if first-string-is-part-of-last? ( gene-ego ) ( self-phenotype ) [
      ask local-turtles [
        let otherguy self
        let other-phenotype [status-of otherguy] of meself
        if first-string-is-part-of-last? ( gene-other ) ( other-phenotype ) [
          let distance-to-target ifelse-value ( distance meself > 1 ) [ distance meself ] [ 1 ]
          let vector-doesnt-exist true
          foreach decision-vectors [ v ->
            if ( item 2 v = otherguy ) and ( item 3 v = gene-action ) [
              set vector-doesnt-exist false ; could make this more effient by doing it all at the same time at the end
              set v replace-item 5 v ( item 5 v + precision ( gene-weight / ( distance-to-target ^ 2 )) 5 )]]
          if vector-doesnt-exist [ set decision-vectors lput (list random 9999999 meself otherguy gene-action ( get-action gene-action ) precision ( gene-weight / ( distance-to-target ^ 2 )) 5 true ) decision-vectors ]
  ]]]]
  
  set decision.vectors (sentence decision.vectors decision-vectors )
end

;---------------------------------------------------------------------------------------------- 
; REPORTERS
;----------------------------------------------------------------------------------------------

to-report first-string-is-part-of-last? [ string1 string2 ]
  let first-is-part-of-last true
  let index 0
  while [index < length string1] [
    if ( not member? item index string1 string2 ) and ( item index string1 != " " ) [ set first-is-part-of-last false ]
    set index index + 1 ]
  report first-is-part-of-last
end

to-report status-of [ target ]
  let target-self ifelse-value ( target = self ) [ "e" ] [ "o" ]
  let target-alive ifelse-value ( is-anima1? target and not is.dead ) [ "v" ] [ "w" ]
  let target-kind ifelse-value ( is-anima1? target ) [ "z" ] [ "d" ]
  let target-sex ifelse-value ( is-anima1? target ) [ first [biological.sex] of target ] [ " " ] ; m f
  let target-life-history ifelse-value ( is-anima1? target ) [ first [life.history] of target ] [ " " ] ; g i j a s 
  let target-fertility ifelse-value ( is-anima1? target ) [ first [female.fertility] of target ] [ " " ] ; c p l
  let target-size ifelse-value ( [size] of target < size ) [ "r" ] [ "b" ]
  let target-health ifelse-value ( is-anima1? target ) [ ifelse-value ( [living.chance] of target > living.chance ) [ "h" ] [ "x" ] ] [ " " ]
  let target-kin ifelse-value ( is-anima1? target ) [ ifelse-value ( relatedness-with target >= 0.25 ) [ "k" ] [ "q" ] ] [ " " ]
  let target-group ifelse-value ( is-anima1? target ) [ ifelse-value ( [group.identity] of target = group.identity ) [ "n" ] [ "u" ]] [ " " ]
  let target-carry ifelse-value ( member? target carried.items ) [ "y" ] [ ifelse-value ( is-anima1? target and member? self [carried.items] of target ) [ "+" ] [ "t" ] ]
  report (word target-self target-alive target-kind target-sex target-life-history target-fertility target-size target-health target-kin target-group target-carry )
end

;--------------------------------------------------------------------------------------------------------------------
; REPORTERS
;--------------------------------------------------------------------------------------------------------------------

to-report get-decisions [ target target-target action-name ]
  report filter [ vector -> item 2 vector = target-target and item 4 vector = action-name and item 6 vector = true ] [ decision.vectors ] of target 
end

to-report get-decisions-cost [ vector-list ]
  report sum map [ vector -> item 5 vector ] vector-list
end


to-report get-not-done-decisions 
  report filter [ vector -> item 6 vector = true ] decision.vectors
end

to decisions-done [ vector-list ]
  if ( not empty? vector-list ) [
    let vector-ids map [ vector -> item 0 vector ] vector-list
    foreach decision.vectors [ vector ->
      if ( member? item 0 vector vector-ids ) [ set decision.vectors replace-item (position vector decision.vectors) decision.vectors replace-item 6 vector false ]
    ]
  ]
end

to remove-done-decisions
  set decision.vectors filter [ vector -> item 6 vector = true ] decision.vectors
end
